#!/usr/bin/perl

# This script makes a connection between local port 11970 and remote port portbase + 70,
# and the same on 11971 and portbase + 71.

# More specifically, it makes outbound connections to both and relays information
# between them. This seems to be a way for DGD to make no outbound connection, yet
# still talk to a UserDB.

# It looks like SkotOS no longer users the userdb file containing a UserDB portbase and host.
# Instead, this script opens a connection to it (on port portbase+70 and portbase+71) as its
# outgoing flow of data.

# Modified from /var/skotos/support/misc/userdb-authctl

use strict;
use warnings;
use IO::Socket::INET;
use IO::Select;

my $portbase = 11000;
my $ipnumber = "127.0.0.1";
my %connected = ();
my %conntypes = ();
my %conndirection = ();
my $select = IO::Select->new();

print "Starting userdb-authctl\n";

sub connect_authd() {
    my ($remote, $local);

    print "Connecting with authd\n";

    while (!defined($remote)) {
	$remote = IO::Socket::INET->new(PeerAddr  => "localhost:11970",
					LocalHost => "127.0.0.1",
					Timeout   => 60,
					Blocking  => 0);
	if (!defined($remote)) {
	    sleep(1);
	}
    }
    while (!defined($local)) {
	$local  = IO::Socket::INET->new(PeerAddr  => "localhost:11070",
					LocalHost => "127.0.0.1",
					Timeout   => 60,
					Blocking  => 0);
	if (!defined($local)) {
	    sleep(1);
	}
    }
    $select->add($remote, $local);
    $connected{$remote} = $local;
    $conntypes{$remote} = "auth";
    $conndirection{$remote} = "to-local";
    $connected{$local} = $remote;
    $conntypes{$local} = "auth";
    $conndirection{$local} = "to-remote";
}

sub connect_ctld() {
    my ($remote, $local);

    print "Connecting with ctld\n";

    while (!defined($remote)) {
	$remote = IO::Socket::INET->new(PeerAddr  => "localhost:11971",
					LocalHost => $ipnumber,
					Timeout   => 60,
					Blocking  => 0);
	if (!defined($remote)) {
	    sleep(1);
	}
    }
    while (!defined($local)) {
	$local  = IO::Socket::INET->new(PeerAddr  => "localhost:11071",
					LocalHost => $ipnumber,
					Timeout   => 60,
					Blocking  => 0);
	if (!defined($local)) {
	    sleep(1);
	}
    }
    $select->add($remote, $local);
    $connected{$remote} = $local;
    $conntypes{$remote} = "ctl";
    $conndirection{$remote} = "to-local";
    $connected{$local} = $remote;
    $conntypes{$local} = "ctl";
    $conndirection{$local} = "to-remote";
}

# Make the initial connections:
connect_authd();
connect_ctld();

# Go into an endless loop relaying traffic and reconnecting where needed:
while (1) {
    my ($can_read, $can_write, $can_except) = IO::Select->select($select, undef, undef, 1);

    foreach my $handle (@$can_read) {
	next if !defined($handle);

	my $buffer = "";

	my $result = $handle->recv($buffer, 1024);
	my $type = $conntypes{$handle};
	my $direction = $conndirection{$handle};
	if (length($buffer) > 0) {
            print "Forwarding type " . $type . ": " . $buffer . "\n";
	    $connected{$handle}->send($buffer);
	} else {
	    my $peer = $connected{$handle};

            print "Disconnect on read, type " . $type . ", direction " . $direction . "\n";
            # Without a sleep, this script sometimes tries to connect thousands of times,
            # swamping DGD and getting it into an exception loop where it can't allocate
            # new objects for connections.
            sleep 3;

	    $select->remove($handle, $peer);
	    $handle->close();
	    $peer->close();

	    if ($type eq 'ctl') {
		connect_ctld();
	    } elsif ($type eq 'auth') {
		connect_authd();
	    }
	}
    }
}

# close FH;  # Not needed, infinite loop
