<object clone="/base/obj/thing" owner="SID">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="0.3"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="plant"/>
            <Base:SName sname="pot"/>
            <Base:SName sname="flowers"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="flowers"/>
            <Base:PName pname="plants"/>
            <Base:PName pname="pots"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="green"/>
          <Base:Adjective adjective="potted"/>
          <Base:Adjective adjective="small"/>
          <Base:Adjective adjective="yellow"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the potted yellow flowers
          </Base:Description>
          <Base:Description type="examine">
             The beautiful potted yellow tulips appear to be well cared for.
          </Base:Description>
          <Base:Description type="look">
             Potted yellow flowers.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="bilbo:react:poke">
         "run"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0010">
         "goto 0030"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0020">
         "emit.actor You poke around through \$brief(this) but do not find anything of interest. :: exit false"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0030">
         "set this.random to \$random(9) :: if this.random \> 2 then goto 0020"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0040">
         "set this.time to \$systime :: if this.time:picked \> this.time then goto 0020"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0050">
         "set this.cnt to \$count(actor.chatters:Ed:plants:flower) :: if this.cnt \> this.max then goto 0020"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0060">
         "emit.actor You poke around in \$brief(this) and find what you're looking for. :: emit.audience \$brief(actor) pokes around \$brief(this) and finds something of interest."
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0070">
         "set this.time:picked to \$systime :: add 1800 to this.time:picked :: set this.object to \$lookup(this.type) :: create \$prop(this.object) in actor"
      </Base:InitialProperty>
      <Base:InitialProperty property="bilbo:react:poke:0080">
         "set this.random to nil :: set this.time to nil :: set this.cnt to nil :: exit false"
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="bilbo:react:poke">
         "run"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0010">
         "goto 0030"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0020">
         "emit.actor You poke around through \$brief(this) but do not find anything of interest. :: exit false"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0030">
         "set this.random to \$random(9) :: if this.random \> 2 then goto 0020"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0040">
         "set this.time to \$systime :: if this.time:picked \> this.time then goto 0020"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0050">
         "set this.cnt to \$count(actor.chatters:Ed:plants:flower) :: if this.cnt \> this.max then goto 0020"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0060">
         "emit.actor You poke around in \$brief(this) and find what you're looking for. :: emit.audience \$brief(actor) pokes around \$brief(this) and finds something of interest."
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0070">
         "set this.time:picked to \$systime :: add 1800 to this.time:picked :: set this.object to \$lookup(this.type) :: create \$prop(this.object) in actor"
      </Core:Property>
      <Core:Property property="bilbo:react:poke:0080">
         "set this.random to nil :: set this.time to nil :: set this.cnt to nil :: exit false"
      </Core:Property>
      <Core:Property property="merry:lib:get_item">
         X[M] if( !\$source )\{ EmitTo( \$actor, "[source parameter required; it should be the woe name of the flower, or the woe name of the object that contains the harvesting properties.]" ); return TRUE; \}

if( \$target ) \$tgt =  NRefOb( \$target ); else \$tgt = \$source;

\$rand = \$source.rand;
\$type = \$source.type;

if( !\$type )\{
  EmitTo( \$actor, "[You need to set the type to spawn in the object.]" );
  return TRUE;
\}

if( (!\$rand \|\| !random( \$rand )) \&\& ( !\$tgt.time \|\| \$tgt.time \<= time() ))\{

  \$ob = Spawn( \$type );

  \$emit = \$source.emit; if( !\$emit ) \$emit = "You pick "+Describe( \$ob )+" from "+Describe( \$target )+".";
  \$emit3rd = \$source.emit3rd; if( !\$emit3rd ) \$emit3rd = "(actor) picks "+Describe( \$ob )+" from "+Describe( \$target )+".";

  \$ob."base:environment" = \$actor;

  \$del = \$tgt.delay;

  if( !\$del ) \$del = 60;

  \$tgt.time = time() + \$del;

\} else if( \$rand \|\| \$tgt.time )\{

  \$emit = \$source.failed; if( !\$emit ) \$emit = "You poke around but fail to find anything.";
  \$emit3rd = \$source.failed3rd; if( !\$emit3rd ) \$emit = "(actor) pokes around but fails to find anything.";

\}

if( \$emit )\{
  \$emit = replace_strings( \$emit, "(actor)", Describe( \$actor ), "(actor:nominative)", \$actor."trait:nominative", "(actor:possessive)", \$actor."trait:possessive", "(actor:objective)", \$actor."trait:objective" );

  EmitTo( \$actor, \$emit );
\}

if( \$emit3rd )\{
  \$emit3rd = replace_strings( \$emit3rd, "(actor)", Describe( \$actor ), "(actor:nominative)", \$actor."trait:nominative", "(actor:possessive)", \$actor."trait:possessive", "(actor:objective)", \$actor."trait:objective" );

  EmitIn( \$actor."base:environment", \$emit3rd, \$actor );
\}
      </Core:Property>
      <Core:Property property="merry:react:poke-dob">
         X[M] /* this script is used in areas where (multiple, possibly) details are targeted to get items. grand example is a garden where actors can pick several kinds of flowers.

The property "directory" must contain the woe name of the -folder- that contains the flower data.

This woe folder should contain objects that match the -detail names- of each detail in the room that can be picked. */

\$detail = NRefDetail( \$target );

\$dir = this.directory;

\$ob = Obj( \$dir + ":" + \$detail );

if( !\$ob ) return TRUE; else Call( \$\{Ur:plant:flower:ur:potted-ur\}, "get_item", \$source: \$ob );
      </Core:Property>
      <Core:Property property="skill:fatigue">100.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="970534119" state="Open" user="lisad">
           Poisons - Hack, they just give a message.
        </Notes:Note>
        <Notes:Note ix="1036346267" state="Open" user="zwoc">
           Added a merry lib here that does the same as the bilbo script. When and if the usage of the bilbo version ever is removed, the script can be removed but the merry script should either be moved somewhere else or kept here. -Kalle.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
