<object clone="/base/obj/thing" owner="Generic">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="changemessageactor">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="changemessageenv">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="gaitdesc">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="revertmessageactor">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="revertmessageenv">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="storage:calltomoveoverride">
         X[M] Call(\$\{Marrach:Coders:kuang:libs:Hideous\},"moveoverride");
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:arrmoves">
         (\{ "amble", "bounce", "creep", "hop", "lope", "lumber", "march", "pace", "roll", "sashay", "saunter", "scamper", "shuffle", "skip", "slide", "step", "tiptoe", "toddle", "trot", "trudge", "trundle", "walk", "run" \})
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:arrtraits">
         (\{ "browshape", "build", "cheekshape", "earshape", "eyebrowshape", "eyecolor", "eyeshape", "facialhair", "faciallength", "haircolor", "haircoverage", "hairlength", "hairstyle", "hairtype", "hands", "height", "jawshape", "lipshape", "mouthshape", "noseshape", "skin" \})
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:browshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:build">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:cheekshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:earshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:examine">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:eyebrowshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:eyecolor">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:eyeshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:facialhair">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:faciallength">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:haircolor">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:haircoverage">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:hairlength">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:hairstyle">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:hairtype">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:hands">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:height">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:jawshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:lipshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:look">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:mouthshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:noseshape">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:override:skin">
         ""
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:overridemove">
         "shuffle"
      </Base:InitialProperty>
      <Base:InitialProperty property="trait:target">
         ""
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="merry:act:start">
         X[M] /*blank everything out*/

string *traits;
int ctr;

this.changemessageactor = "";
this.changemessageenv = "";
this.revertmessageactor = "";
this.revertmessageenv = "";
this."trait:target" = "";

traits = (\{ "browshape", "build", "cheekshape", "earshape", "eyebrowshape", "eyecolor", "eyeshape", "facialhair", "faciallength", "haircolor", "haircoverage", "hairlength", "hairstyle", "hairtype", "hands", "height", "jawshape", "lipshape", "mouthshape", "noseshape", "skin" \});


for(ctr=0;ctr\<sizeof(traits);ctr++)
\{
Set(this,"trait:override:" + traits[ctr],"");
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:makehideous">
         X[M] object target;
string *traits;
string * moves;
string * alt;
int ctr;
string savedTraits;
string moveOverrideTxt;

traits = this."trait:arrtraits";

if (this."trait:target" != "")
\{
 target = Obj(this."trait:target");
 if(target."trait:saved") return FALSE;

 if(this."trait:override:look")
 \{
  target."trait:saved:override:look" = target."trait:override:look";
  target."trait:override:look" = this."trait:override:look";
 \}

 if(this."trait:override:examine")
 \{
  target."trait:saved:override:examine" = target."trait:override:examine";
  target."trait:override:examine" = this."trait:override:examine";
 \}

/*save traits off*/
 savedTraits = "";

 for(ctr=0;ctr\<sizeof(traits);ctr++)
 \{
  if(Get(target,"appearance:" + traits[ctr]))
  \{
   savedTraits += Get(target,"appearance:" + traits[ctr]) + "\|";
  \}
  else
  \{
   savedTraits += "\|";
  \}
 \}
  /*save off the number of traits the target has*/
 savedTraits = Get(target,"#traits[0]") + "\|" + savedTraits;

 target."trait:saved" = savedTraits;

 /*now set targets traits to the hideous ones*/
 for(ctr=0;ctr\<sizeof(traits);ctr++)
 \{
  if (Get(this,"trait:override:" + traits[ctr]) !="")
  \{
   Set(target,"appearance:" + traits[ctr],Get(this,"trait:override:" + traits[ctr]));
  \}
 \}



 /*now set this to zero so the traits cannot be altered*/
 Set(target,"#traits[0]", 0);
 Set(target,"generic",nil);

 Bilbo(target,"react","descsub");

 if(this.changeMessageActor != "")
 \{
  EmitTo(target,this.changeMessageActor);
 \}
 if(this.changeMessageenv != "")
 \{
  EmitIn(target."base:environment",this.changeMessageenv,\$actor);
 \}

/*set gait*/
if(this.gaitDesc !="")
\{
 Set(target,"base:gait",this.gaitDesc);
\}
/*override movement actions*/
moves = this."trait:arrmoves";


 if(moves !=nil)
 \{
  for(ctr=0;ctr\<sizeof(moves);ctr++)
  \{
   Set(target,"merry:act:temp:" +moves[ctr],Get(target,"merry:act" + moves[ctr]));
   Set(target,"merry:act:" + moves[ctr] ,this."storage:calltomoveoverride");
  \}
 \}


\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:moveoverride">
         X[M] string adv;

adv =\$adverb;


if (!adv)
\{
adv="";
\}
else
\{
adv = " " + adv;
\}


if(\$target)
\{
EmitTo(\$actor,"You " + this."trait:overridemove" + adv + " to " + Describe(\$target));

EmitIn(\$actor."base:environment",\$actor."trait:brief" + " " + this."trait:overridemove" + "s"  + adv + " to " + Describe(\$target),\$actor);
\}
else
\{
EmitTo(\$actor,"You " + this."trait:overridemove" + adv );

EmitIn(\$actor."base:environment",\$actor."trait:brief" + " " + this."trait:overridemove" + "s"  + adv ,\$actor);
\}
      </Core:Property>
      <Core:Property property="merry:lib:unmakehideous">
         X[M] object target;
string *traits;
int ctr;
string * savedTraits;
string *moves;


traits =  this."trait:arrtraits";

if (this."trait:target" != "")
\{
 target = Obj(this."trait:target");

if(target."trait:saved:override:look")\{
 target."trait:override:look" = target."trait:saved:override:look";
\}

if(target."trait:save:override:examine")\{
 target."trait:override:examine" = target."trait:saved:override:examine";
\}

/*save traits off*/
 savedTraits = explode(target."trait:saved","\|");

 for(ctr=0;ctr\<sizeof(traits);ctr++)
 \{
  if(savedTraits[ctr+1] !="")
  \{
   Set(target,"appearance:" + traits[ctr],savedTraits[ctr+1]);
  \}
  else
  \{
   Set(target,"appearance:" + traits[ctr],"");
  \}
 \}
 Set(target,"#traits[0]",(int)savedTraits[0]);
 Set(target,"generic",TRUE);
 Bilbo(target,"react","descsub");

 if(this.revertmessageactor !="")
 \{
  EmitTo(target,this.revertmessageactor);
 \}

 if(this.revertmessageenv !="")
 \{
  EmitIn(target."base:environment",this.revertmessageenv,\$actor);
 \}
 Set(target,"base:gait",nil);

 moves = this."trait:arrmoves";
 if(moves)\{
  for(ctr=0;ctr\<sizeof(moves);ctr++)
  \{
   Set(target,"merry:act:" + moves[ctr],Get(target,"merry:act:temp" + moves[ctr]));
  \}
 \}

/*zap stuff*/
target."trait:saved" = nil;
target."trait:saved:override:look" = nil;
target."trait:saved:override:examine" = nil;
\}
      </Core:Property>
      <Core:Property property="revertmessageactor">
         "You feel your back straightening, your claws turn back into fingers. You feel like your old self again."
      </Core:Property>
      <Core:Property property="revertmessageenv">
         "Paulo back straightens, his claws turn back into fingers and he turns back into the person he was before."
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="storage:altersub">
         \<Generic:DB:UrPeople:altersub\>
      </Core:Property>
      <Core:Property property="storage:calltomoveoverride">
         X[M] Call(\$\{Marrach:Coders:kuang:libs:Hideous\},"moveoverride");
      </Core:Property>
      <Core:Property property="trait:arralter">
         (\{ "altersub", "style", "tattoo" \})
      </Core:Property>
      <Core:Property property="trait:arrmoves">
         (\{ "amble", "bounce", "creep", "hop", "lope", "lumber", "march", "pace", "roll", "sashay", "saunter", "scamper", "shuffle", "skip", "slide", "step", "tiptoe", "toddle", "trot", "trudge", "trundle", "walk", "run" \})
      </Core:Property>
      <Core:Property property="trait:arrtraits">
         (\{ "browshape", "build", "cheekshape", "earshape", "eyebrowshape", "eyecolor", "eyeshape", "facialhair", "faciallength", "haircolor", "haircoverage", "hairlength", "hairstyle", "hairtype", "hands", "height", "jawshape", "lipshape", "mouthshape", "noseshape", "skin" \})
      </Core:Property>
      <Core:Property property="trait:overridemove">
         "shuffle"
      </Core:Property>
      <Core:Property property="trait:target">
         "Marrach:players:P:paulo"
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
