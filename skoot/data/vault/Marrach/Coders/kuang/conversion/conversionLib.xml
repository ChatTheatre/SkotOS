<object clone="/base/obj/thing" owner="Generic">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="healing:scarlocation">
         "leftleg"
      </Core:Property>
      <Core:Property property="merry:lib:converttourhuman">
         X[M] /*
set base:UrParent to UrMale or UrFemale
transfer scar details
transfer wound details

delete bilbo traits array
delete bilbo inherits
run makedescriptions code
remove description traits

\$tattooLocation
*/



\$evokes = explode(replace_strings(\$conversionList,"\\"",""),",");


for(\$ctr=0;\$ctr\<sizeof(\$evokes);\$ctr++)\{
 if(\$objOverride)\{
  \$obj=\$objOverride;
 \}
 else \{
 \$obj = Obj("Marrach:players:" + capitalize(\$evokes[\$ctr][0 .. 0]) + ":" + lower_case(\$evokes[\$ctr]));
 \}

 if(!\$obj)\{
  EmitTo(\$actor,"Unable to find and convert \\"" + \$evokes[\$ctr] + "\\"");
 \}
 else\{
/*SET THE BASE CLASSES*/
  if(!\$actor) \$actor = \$obj;
  EmitTo(\$actor,"Converting " + \$evokes[\$ctr]);

  if(\$obj."base:male" == 1)\{
   \$obj."base:urparent" = \$\{MGeneric:UrMale\};
  \}
  else \{
   \$obj."base:urparent" = \$\{MGeneric:UrFemale\};
  \}


/*remove old description traits*/
  EmitTo(\$actor,"Removing old descriptions");
  \$obj."trait:brief:eye" = nil;
  \$obj."trait:brief:hair" = nil;


/*Call description generating code for new descriptions*/
  EmitTo(\$actor,"Making descriptions");
  Call(\$obj,"makehairdesc");
  Call(\$obj,"makeexaminedescpart");

/*make locational scar if scar detail is present*/
  EmitTo(\$actor,"Dealing with scars");
  if(\$obj."trait:scar-count")\{
   if((int)\$obj."trait:scar-count" \>0)\{
    Call(this,"createLocationalScar",\$location: "leftleg", \$amount: 1.0, \$objAlter: \$obj);
   \}
  \}

/*convert the tattoo to a locational tattoo*/
  EmitTo(\$actor,"Converting tattoo");
  if(!\$tattooLocation) \$tattooLocation = "leftarm";

  if(\$obj."details:tattoo:sname:tattoo")\{
   Call(this,"createlocationaltattoo",\$objAlter: \$obj, \$location: \$tattooLocation, \$symbol: \$obj."appearance:symbol");
  \}


/*convert hairlength, hairstyle, hairtype, haircolor, facialhairlength, facialhair to alteration properties*/

\$obj."alteration:hair:haircolor" = \$obj."appearance:haircolor";
\$obj."alteration:hair:hairtype" = \$obj."appearance:hairtype";
\$obj."alteration:hair:hairlength" = \$obj."appearance:hairlength";
\$obj."alteration:hair:hairstyle" = \$obj."appearance:hairstyle";
\$obj."alteration:facialhair:faciallength" = \$obj."appearance:faciallength";




/*DELETE bilbo trait array and all bilbo inherits*/
  \$propmap = \$obj."*";
  \$ix = map_indices(\$propmap);
  for(\$ctr2=0;\$ctr2\<sizeof(\$ix);\$ctr2++)\{
   if(sscanf(\$ix[\$ctr2],"#traits[%*s")==1 \|\| sscanf(\$ix[\$ctr2],"bilbo:inherit:%*s")==1 \|\| sscanf(\$ix[\$ctr2],"trait:hairstyle:%*s")==1 \|\| sscanf(\$ix[\$ctr2],"trait:haircolor:%*s")==1 \|\| sscanf(\$ix[\$ctr2],"trait:hairlength:%*s")==1 \|\| sscanf(\$ix[\$ctr2],"trait:symbol:%*s")==1)\{

    EmitTo(\$actor,"removing " + \$ix[\$ctr2]);
    Set(\$obj,\$ix[\$ctr2],nil);
   \}
  \}

 \}
\}


return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:createlocationalscar">
         X[M] /*
\$location - the location for the new scar
\$objAlter - the person to alter
\$remove - the location of the scar to remove
\$amount = amount to scar by
*/
/*hide the old scar details by removing all snames and adjectives*/

int ctr;
string *arrAdj;

\$objAlter."details:scar:snames:scar" = nil;
arrAdj = \$objAlter."details:scar:adjectives";

for(ctr=0;ctr\<sizeof(arrAdj);ctr++)\{
 Set(\$objAlter,"details:scar:adjective:" + arrAdj[ctr],nil);
\}


/*add scar to location if \$location is specified*/
if(\$location)\{
 if(!\$amount)\{
  \$amount=1.0;
 \}
 this."healing:scarlocation" = \$location;
 Call(\$objAlter,"scar-scar",\$amount: \$amount);
\}

/*remove the detail at \$remove*/
if(\$remove)\{
 if(\$objAlter."healing:scarlocations")\{
  if(\$objAlter."healing:scarlocations"[\$remove])\{
   \$objAlter."healing:scarlocations" -= \$objAlter."healing:scarlocations"[\$remove];
  \}
 \}

Set(\$objAlter,"scar:" + \$remove + ":desc",nil);


Set(\$objAlter,"details:" + \$remove + ":sname:scar",nil);
arrAdj = Get(\$objAlter,"details:" + \$remove + ":adjectives");
for(ctr=0;ctr\<sizeof(arrAdj);ctr++)\{
Set(\$objAlter,"details:" + \$remove + ":adjective" + arrAdj[ctr],nil);
\}

\}
      </Core:Property>
      <Core:Property property="merry:lib:createlocationaltattoo">
         X[M] /*
\$objAlter - object to have tattoo detail altered
\$location - location to add tattoo to
\$remove - location to remove locational tattoo from
\$symbol - normal tattoo symbol
\$overridebrief - override tattoo breif description for bespoke tattoo's
\$overridetattoolook - override tattoo look description
\$overridelocationlook - override location look description

*/

string *arrTmp;
int ctr;
NRef target;

/*remove single tattoo detail*/
if(\$objAlter."details:tattoo:snames")\{

 arrTmp = \$objAlter."details:tattoo:snames";
 for(ctr=0;ctr\<sizeof(arrTmp);ctr++)\{
  Set(\$objAlter,"details:tattoo:sname:" + arrTmp[ctr],nil);
 \}
\}

if(\$objAlter."details:tattoo:adjectives")\{

 arrTmp = \$objAlter."details:tattoo:adjectives";
 for(ctr=0;ctr\<sizeof(arrTmp);ctr++)\{
  Set(\$objAlter,"details:tattoo:adjective:" + arrTmp[ctr],nil);
 \}
\}



/*remove tattoo detail from \$remove location*/

if(\$remove)\{
target = NewNRef(\$objAlter,\$remove);
Act(\$objAlter, "tattoo", \$evoke: "symbol none", \$target: \$remove);

\}



if(\$location)\{
 target = NewNRef(\$objAlter,\$location);
 if(\$symbol)\{
  \$target = target;
  \$evoke = "\\"symbol " + \$symbol + "\\"";
  EmitTo(\$actor,"converting tattoo with " + \$location + " " + \$symbol + " " + \$objAlter."skotos:charname");
  Call(\$objAlter,"doskill",\$usingskill: "Tattooist", \$skillverb: "tattoo", \$noHold: TRUE);

 \}

 if(\$overridebrief \&\& \$overridetattoolook \&\& \$overridelocationlook)\{
  Act(\$objAlter, "tattoo", \$evoke: "symbol bespoke [" + \$overridebrief + "][" + \$overridetattoolook + "][" + \$overridelocationlook + "]", \$target: target);
 \}
\}



return TRUE;
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
