<object clone="/obj/properties" owner="SkotOS">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="html:config">
         X[S] \<html\>
  \<head\>
    \<title\>Configuration [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
  \</head\>
  \<body onLoad="setParentTitle();"\>
    \<h1\>Tool Web Interface - Configuration\</h1\>
\{? \| \$(info) \|
    \<div class="info"\>[\$[ctime(time())]] \$(info)\</div\>
\}
    \<p\>
      There are a few elements in the web interface you can configure to suit your own needs and desires.  Be warned that not all apply (yet) to all elements.  Most important ones are the text-(height\\\|width\\\|background\\\|foreground) settings that are used for both the +tool (bilbo\\\|merry) edit and the Property Editor.
    \</p\>
    \<zsession zid="\$(zid)" udat="\$(Udat.dat)"\>
       \<zform zid="\$(zid)"\>
         \<action\>
           \$[::config_update();]
           \<redirect propob="Tool:Lib:Popup" prop="config" info="\$(info)"/\>
        \</action\>
        \<table border="0" cellpadding="3" cellspacing="0"\>
          \<tr\>\<th align="left"\>Name\</th\>\<th align="left"\>Current\</th\>\<th align="left"\>Default\</th\>\</tr\>
          \$[::config_rows()]
          \<tr\>\<td\>\\\&nbsp;\</td\>\<td align="center"\>\<input type="submit" value="Update Settings"/\>\</td\>\<td\>\\\&nbsp;\</td\>\</tr\>
        \</table\>
      \</zform\>
    \</zsession\>
    \<p\>
      For your convenience, I'll provide you with some common colour numbers:
    \</p\>
    \<table width="80%" align="center" border="0" cellpadding="3" cellspacing="0"\>
    \$[int i, j, k;
       string *list, output;

       output = "";
       list = (\{ "00", "80", "c0", "ff" \});
       for (i = 0; i \< 4; i++) \{
           for (j = 0; j \< 4; j++) \{
               output += "\<TR\>";
               for (k = 0; k \< 4; k++) \{
                   output +=
                       "\<TD align=right\>\<tt\>#" + list[i] + list[j] + list[k] + "\</tt\>\</TD\>" +
                      "\<TD width=\\"10%\\" bgcolor=\\"" + list[i] + list[j] + list[k] + "\\"\>\&nbsp;\</TD\>";

               \}
               output += "\</TR\>";
           \}
       \}
       return output;]
    \</table\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:css">
         X[S] \<style\>
    BODY \\\{
        background: \$(tool.config:work-background);
        color: \$(tool.config:work-foreground);
    \\\}
    A:link, A:visited, A:active \\\{
        text-decoration:none;
        color: \$(tool.config:link-normal);
    \\\}
    A:hover \\\{
        color: \$(tool.config:link-hover);
    \\\}
    .menu \\\{
        background: \$(tool.config:menu-background);
        color: \$(tool.config:menu-foreground);
    \\\}
    .error \\\{
        background: #ffffff;
        color: #ff0000;
        border: thin;
        margin: 5p;
    \\\}
    SELECT, INPUT \\\{
        font-size: small;
        font-family:courier new, courier, monospace;
    \\\}
    TEXTAREA \\\{
        font-size: small;
        font-family:courier new, courier, monospace;
    \\\}
\</style\>
      </Core:Property>
      <Core:Property property="html:editor_textarea">
         X[S] \<tr\>\<td colspan="6"\>\<hr/\>\</td\>\</tr\>
\<zform zid="\$(zid)"\>
  \<action\>
    \$[::editor_change()]
    \{? \| \$(warning) \|
      \<zsession zid="\$(zid)" edit_contents="\$(edit_contents)" edit_contents_valid="1"\>
        \<redirect propob="\$(this)" prop="propedit" zid="\$(zid)" edit_type="\$(edit_type_new)" warning="\$(warning)" update_obj="\$(update_obj)" update_prop="\$(update_prop)"/\>
      \</zsession\>
    \|
      \<zsession zid="\$(zid)" edit_contents="" edit_contents_valid="0"\>
        \<redirect propob="\$(this)" prop="propedit" zid="\$(zid)" info="\$(info)" update_obj="\$(update_obj)" update_prop="\$(update_prop)"/\>
      \</zsession\>
    \}
  \</action\>
  \{? \| \$(warning) \|
    \<tr\>\<td colspan="6"\>\<div class="error"\>[\$[ctime(time())]]\\\&nbsp;\$(warning)\</div\>\</td\>\</tr\>
  \}
  \{? \| \$(info) \|
    \<tr\>\<td colspan="6"\>\<div class="info"\>[\$[ctime(time())]]\\\&nbsp;\$(info)\</div\>\</td\>\</tr\>
  \}
\{? equal \| \$(Udat.name) \| ninonino \|
  \<tr\>\<th colspan="6" nowrap="1"\>
    [ \<escape-html simple="1"\>\$(edit_obj)\</escape-html\> /
      \<escape-html simple="1"\>\$(edit_prop)\</escape-html\> ]
    \<input type="hidden" name="edit_type_old" value="\$(contents_type)"/\>
    \<select name="edit_type_new"\>
\{? equal \| \$(contents_type) \| nil \| \<option value="nil" selected="1"\>Nil\</option\> \| \<option value="nil"\>Nil\</option\> \}
\{? equal \| \$(contents_type) \| int \| \<option value="int" selected="1"\>Int\</option\> \| \<option value="int"\>Int\</option\> \}
\{? equal \| \$(contents_type) \| float \| \<option value="float" selected="1"\>Float\</option\> \| \<option value="float"\>Float\</option\> \}
\{? equal \| \$(contents_type) \| string \| \<option value="string" selected="1"\>String\</option\> \| \<option value="string"\>String\</option\> \}
\{? equal \| \$(contents_type) \| object \| \<option value="object" selected="1"\>Object\</option\> \| \<option value="object"\>Object\</option\> \}
\{? equal \| \$(contents_type) \| array \| \<option value="array" selected="1"\>Array\</option\> \| \<option value="array"\>Array\</option\> \}
\{? equal \| \$(contents_type) \| mapping \| \<option value="mapping" selected="1"\>Mapping\</option\> \| \<option value="mapping"\>Mapping\</option\> \}
\{? equal \| \$(contents_type) \| merry \| \<option value="merry" selected="1"\>Merry\</option\> \| \<option value="merry"\>Merry\</option\> \}
\{? equal \| \$(contents_type) \| sam \| \<option value="sam" selected="1"\>SAM\</option\> \| \<option value="sam"\>SAM\</option\> \}
    \</select\>
  \</th\>\</tr\>
\|
  \<tr\>\<th colspan="6"\>
    [ \<escape-html simple="1"\>\$(edit_obj)\</escape-html\> /
      \<escape-html simple="1"\>\$(edit_prop)\</escape-html\> - \$(contents_type) - \<span id="info_textarea"/\>]\</th\>\</tr\>
  \<input type="hidden" name="edit_type_old" value="\$(contents_type)"/\>
  \<input type="hidden" name="edit_type_new" value="\$(contents_type)"/\>
\}
  \<tr\>\<td colspan="6" align="center"\>
    \<input type="hidden" name="update_obj" value="\$(edit_obj)"/\>
    \<input type="hidden" name="update_prop" value="\$(edit_prop)"/\>
    \<textarea id="tool_textarea" onkeypress="return keyboard_fun();" onkeyup="return keyboard_fun();" onkeydown="return keyboard_fun();" onmouseup="return mouse_fun();" onmousedown="return mouse_fun();" onmousemove="return mouse_fun();" onload="update_location();" style="background: \$(tool.config:text-background); color: \$(tool.config:text-foreground); width: 100%;" cols="\$(tool.config:text-width)" rows="\$(tool.config:text-height)" wrap="virtual" name="edit_contents"\>\<escape-html simple="1"\>\$(contents)\</escape-html\>\</textarea\>
    \$[\$cursor_offset = (\$contents_type == "sam" \|\| \$contents_type == "merry") ? 1 : 0;]
    \<script language="Javascript"\>
        var update_pending = 0;
        function figure_location(str, pos) \\\{
            str = str.substring(0, pos);
            var lines = str.split("\\\\n");
            return (lines.length - \$(cursor_offset)) + "," + (lines[lines.length - 1].length + 1);
        \\\}
        function update_location() \\\{
            update_pending = 0;
            var obj = document.getElementById("tool_textarea");
            var info = document.getElementById("info_textarea");
            if (obj.setSelectionRange) \\\{
                if (obj.selectionStart == obj.selectionEnd) \\\{
                    info.innerHTML = "Text size: " + obj.value.length + " bytes; " +
                                     "Cursor at " + figure_location(obj.value, obj.selectionStart);
                \\\} else \\\{
                    info.innerHTML = "Text size: " + obj.value.length + " bytes; " +
                                     "Marked from " + figure_location(obj.value, obj.selectionStart) + " to " + figure_location(obj.value, obj.selectionEnd);
                \\\}
            \\\} else if (document.selection \\\&\\\& document.selection.createRange \\\&\\\& obj.isTextEdit) \\\{
                // Based on:
                // http://msdn.microsoft.com/library/en-us/dnwebteam/html/webteam12032001.asp
                //
                // Create a 'bookmark' that is as unique as reasonably possible:
                var bookmark = (new Date().toGMTString()) + "/" + obj.value.length;
                //
                // Create a copy of the current selection (assuming it's in the textarea:
                var cursor = document.selection.createRange().duplicate();
                //
                // Remember what the selected text was, if any:
                var marked = cursor.text;
                //
                // Collapse the copy of the selection to the beginning, and place the bookmark:
                cursor.collapse(true);
                cursor.text = bookmark;
                //
                // Find the bookmark in the textarea contents, there's our offset:
                var i = obj.value.search(bookmark);
                //
                // In the new selection, mark the entire thing and delete it:
                cursor.moveStart('character', -bookmark.length);
                cursor.execCommand('Delete');
                //
                if (marked.length == 0) \\\{
                    info.innerHTML = "Text size: " + obj.value.length + " bytes; " +
                                     "Cursor at " + figure_location(obj.value, i);
                \\\} else \\\{
                    info.innerHTML = "Text size: " + obj.value.length + " bytes; " +
                                     "Marked from " + figure_location(obj.value, i) + " to " + figure_location(obj.value, i + marked.length);
                \\\}
            \\\} else \\\{
                info.innerHTML = "Text size: " + obj.value.length;
            \\\}
        \\\}
        function keyboard_fun() \\\{
            if (!update_pending) \\\{
                update_pending = 1;
                setTimeout("update_location()", 100);
            \\\}
            return true;
        \\\}
        function mouse_fun() \\\{
            if (!update_pending) \\\{
                update_pending = 1;
                setTimeout("update_location()", 100);
            \\\}
        \\\}
        update_location();
    //\</script\>
  \</td\>\</tr\>
  \<tr\>\<td colspan="3" align="left"\>
    \<input type="submit" value="\$[\$contents ? "Update" : "Create"]"/\>
  \</td\>\<td colspan="3" align="right"\>
    \<input type="reset" name="Reset"/\>
    \<input type="submit" name="delete" value="Delete"/\>
  \</td\>\</tr\>
\</zform\>
      </Core:Property>
      <Core:Property property="html:empty">
         X[S] \<html\>
  \<head\>
    \<title\>Empty Page\</title\>
\$(Tool:Lib:Popup.html:css)
  \</head\>
  \<body\>
    \<table width="100%" height="100%" border="0"\>
      \<tr\>\<td align="center" valign="middle"\>
        This Space Unintentionally Left Blank.
      \</td\>\</tr\>
    \</table\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:exec">
         X[S] \<html\>
  \<head\>
    \<title\>Exec [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
  \</head\>
  \<body onLoad="setParentTitle();"\>
    \<table border="0" cellpadding="3" cellspacing="0"\>
\{? \| \$(exec_error) \|
      \<tr\>\<td colspan="2"\>\<div class="error"\>\$(exec_error)\</div\>\</td\>\</tr\>
\}
      \<zform zid="\$(zid)"\>
        \<action\>
          \$[::execute();]
          \<zsession zid="\$(zid)" exec_system="\$(exec_system)" exec_input="\$(exec_input)" exec_output="\$(exec_output)"\>
          \<redirect propob="\$(this)" prop="exec" zid="\$(zid)" exec_error="\$(exec_error)"/\>
          \</zsession\>
        \</action\>
        \<tr\>
          \<td\>System:\</td\>
          \<td\>\<select name="exec_system"\>
\{? equal \| \$(exec_system) \| sam \|
                \<option selected="1" value="sam"\>SAM\</option\>
\|
                \<option value="sam"\>SAM\</option\>
\}
\{? equal \| \$(exec_system) \| merry \|
                \<option selected="1" value="merry"\>Merry\</option\>
\|
                \<option value="merry"\>Merry\</option\>
\}
              \</select\>
          \</td\>
        \</tr\>
        \<tr\>
          \<td\>Input:\</td\>
          \<td\>
            \<textarea rows="10" cols="60" name="exec_input"\>\<escape-html simple="1"\>\$(exec_input)\</escape-html\>\</textarea\>
          \</td\>
        \</tr\>
        \<tr\>\<td align="center" colspan="2"\>\<input type="submit" value="Execute This"/\>\</td\>\</tr\>
      \</zform\>
\{? \| \$(exec_output) \|
      \<tr\>
        \<td\>Output:\</td\>
        \<td\>\<div class="info"\>\<escape-html simple="1"\>\$(exec_output)\</escape-html\>\</div\>\</td\>
      \</tr\>
\}
    \</table\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:faq">
         X[S] \<html\>
  \<head\>
    \<title\>Merry \\\&amp; SAM FAQ [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
  \</head\>
  \<body onload="setParentTitle();"\>
    \<h1\>Merry \\\&amp; SAM Frequently Asked Questions\</h1\>
    \<p\>
      These are some common (I think) questions that we've encountered while writing dynamic webpages and popup code using SAM \\\&amp; embedded Merry code.  If you can think of other gotchas that you'd like to share with your fellow coders, \<a href="mailto:nino@skotos.net"\>email me\</a\>!
    \</p\>
    \<dl\>
      \<dt\>\<b\>Q:\</b\>\</dt\>
      \<dd\>I have a link with an object name in it, why does that not work?\</dd\>
      \<dt\>\<b\>A:\</b\>\</dt\>
      \<dd\>You probably have a \<b\>#\</b\> in there somewhere and are manually constructing the URL. Use url_encode() to turn tricky URL characters into escaped (\<b\>%xx\</b\>) characters.\</dd\>
      \<hr/\>
      \<dt\>\<b\>Q:\</b\>\</dt\>
      \<dd\>In SAM I can use \<b\>\\\$(UDat.name)\</b\>, but in Merry there is no such thing.\</dd\>
      \<dt\>\<b\>A:\</b\>\</dt\>
      \<dd\>SAM is account-oriented because on the webpages that's typically all you have, whereas Merry is virtual-world oriented (bodies, objects) and only in exceptional situations (SH or SG commands) knows about accounts related to certain bodies. If you want to use the \<b\>\\\$(Udat.name)\</b\> information in Merry snippets embedded in SAM code, do something like this:
\<pre\>
    \\\&lt;z username="\\\$(UDat.name)"\\\>\\\$[ ...use \\\$username now... ]\\\&lt;/z\\\>
\</pre\>
      \</dd\>
      \<hr/\>
      \<dt\>\<b\>Q:\</b\>\</dt\>
      \<dd\>I'm trying to display some text with HTML codes escaped properly but it isn't working?\</dd\>
      \<dt\>\<b\>A:\</b\>\</dt\>
      \<dd\>The easiest approach is to assign the contents to a \<b\>\\\$variable\</b\> and then embed the result in \<b\>\\\&lt;escape-html simple\\\>...\\\&lt;escape-html\\\>\</b\> tags, like this:
\<pre\>
    \\\$[ \\\$contents = ...; ]
    \\\&lt;PRE\\\>\\\&lt;escape-html simple\\\>\\\$(contents)\\\&lt;/escape-html\\\>\\\&lt;/PRE\\\>
\</pre\>
\</dd\>
      \<hr/\>
      \<dt\>\<b\>Q:\</b\>\</dt\>
      \<dd\>I'm getting \<b\>no udat in zform\</b\>, now what do I do?\</dd\>
      \<dt\>\<b\>A:\</b\>\</dt\>
      \<dd\>Stop using \<b\>UnSAM(ParseXML(...))\</b\>, it is seldom the solution to the problem you're trying to solve.\</dd\>
      \<hr/\>
      \<dt\>\<b\>Q:\</b\>\</dt\>
      \<dd\>How do I collect the multiple results from a \<b\>\\\&lt;SELECT\\\>\</b\> statement with the \<b\>multiple\</b\> attribute activated?\</dd\>
      \<dt\>\<b\>A:\</b\>\</dt\>
      \<dd\>You'll want to use the special naming convention of \<b\>\\\&lt;somename\\\>[]\</b\>, which causes the server to collect all the values for \<b\>\\\&lt;somename\\\>[]\</b\> and store the result in an array in \<b\>\\\$\\\&lt;somename\\\>\</b\>.  Example:
\<pre\>
    \\\&lt;select name="weekdays[]" multiple\\\>
      \\\&lt;option value="0"\\\>Sunday\\\&lt;/option\\\>
      \\\&lt;option value="1"\\\>Monday\\\&lt;/option\\\>
      \\\&lt;option value="2"\\\>Tuesday\\\&lt;/option\\\>
      \\\&lt;option value="3"\\\>Wednesday\\\&lt;/option\\\>
      \\\&lt;option value="4"\\\>Thursday\\\&lt;/option\\\>
      \\\&lt;option value="5"\\\>Friday\\\&lt;/option\\\>
      \\\&lt;option value="6"\\\>Saturday\\\&lt;/option\\\>
    \\\&lt;/select\\\>
\</pre\>
Now \\\$weekdays will contain a list of days, if any had been selected, or be nil (non-existing) if none were.
\</dd\>
    \</dl\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:go">
         X[S] \<z uname="\$(UDat.Name)" uhost="\$(UDat.Host)" udat="\$(UDat.dat)"\>
\$[\$update_obj = \$obj; \$update_prop = \$prop; ::editor_update();] \$(this.html:propedit)
\</z\>
      </Core:Property>
      <Core:Property property="html:ide">
         X[S] \<html\>
  \<head\>
    \<title\>[ Tool - IDE ]\</title\>
\$(Tool:Lib:Popup.html:css)
  \</head\>
  \<body\>
    \<zform\>
      \<action\>
        \$[\$warning = ::ide_form();]
        \{? \| \$(warning) \|
          \<redirect propob="Tool:Lib:Popup" prop="html:ide" obj="\$(obj)" warning="\$(warning)"/\> \|
          \<redirect base="/Tool/IDE.sam" obj="\$(obj)"/\> \}
      \</action\>
      \<table border="0" cellpadding="3" cellspacing="0"\>
        \{? \| \$(warning) \| \<tr\>\<td colspan="3"\>\$(warning)\</td\>\</tr\> \| \}
        \<tr\>
          \<th align="left"\>Object:\</th\>
          \<td\>\<input type="text" name="obj" value="\$(obj)" size="40" maxlen="80"/\>\</td\>
          \<td\>\<input type="submit" value="View"/\>\</td\>
        \</tr\>
      \</table\>
    \</zform\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:index">
         X[S] \<html\>
  \<head\>
    \<title\>Main [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
  \</head\>
  \{? \| \$(UDat.host) \|
  \<zsession body="\$(body)"\>
    \<frameset cols="120,*" border="0" framespacing="0" frameborder="no"\>
      \<frame name="tool:menu" src="/SAM/Prop/\$(this.name)/menu?zid=\$(zid)"/\>
      \<frame name="tool:output" src="/SAM/Prop/\$(this.name)/PropEdit"/\>
    \</frameset\>
  \</zsession\>
    \| \{? \| \$(UDat.guide) \|
  \<body\>
    \<h1\>Access Denied\</h1\>
    \<p\>
      This page is only available for StoryCoders and StoryPlotters,
      not to StoryGuides.
    \</p\>
  \</body\>
        \|
  \<body\>
    \<h1\>Access Denied\</h1\>
    \<p\>
      This page is only available for StoryCoders and StoryPlotters.
    \</p\>
  \</body\>
       \}
    \}
\</html\>
      </Core:Property>
      <Core:Property property="html:javascript">
         X[S] \<script\>
function setParentTitle() \\\{
      var curTitle = document.title
      parent.document.title = curTitle
\\\}
//\</script\>
      </Core:Property>
      <Core:Property property="html:logs_index">
         X[S] \<html\>
  \<head\>
    \<title\>Error Logs [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
  \</head\>
  \<body onLoad="setParentTitle();"\>
    \<center\>\<b\>We can't fix your bugs, but we can make them easier to find.\</b\>\</center\>
    \<sbr/\>
    \$(this.html:logs_pulldown)
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:logs_pulldown">
         X[S] \<zform\>
  \<action\>
    \<redirect propob="\$(this)" prop="logs_show" log="\$(log)"/\>
  \</action\>
  Pick an error log to review:
  \<select name="log" onchange="submit();"\>
    \$[int i, sz;

      \$list = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects", \$folder: "Log");
      \$totals = ([ ]);
      sz = sizeof(\$list);
      for (i = 0; i \< sz; i++) \{
          mapping map;

          map = structure_propmap(Get(Obj("Log:" + \$list[i]), "*"));
          map = map["err"];

          if (map \&\& map_sizeof(map)) \{
              \$totals[\$list[i]] = map_sizeof(map);
          \} else \{
              \$list[i] = nil;
          \}
      \}
      \$list -= (\{ nil \});]
    \<for var="name" val="\$(list)"\>
      \$[\$total = \$totals[\$name];]
      \{? equal \| \$(log) \| \$(name) \|
        \<option selected="1" value="\$(name)"\>\$(name) [\$(total)]\</option\>
      \|
        \<option value="\$(name)"\>\$(name) [\$(total)]\</option\>
      \}
    \</for\>
  \</select\>
  \<input type="submit"/\>
\</zform\>
      </Core:Property>
      <Core:Property property="html:logs_show">
         X[S] \$[if (\$log == nil) \$log = "Tool";]
\<html\>
  \<head\>
    \<title\>Error Logs [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
\<style\>
A:link, A:visited, A:active \\\{
    color: #f0f0f0;
    background: #404040;
\\\}
A:hover \\\{
    color: #ffffff;
    background: #808080;
\\\}
//\</style\>
  \</head\>
  \<body onLoad="setParentTitle();"\>
   \<center\>\<b\>We can't fix your bugs, but we can make them easier to find.\</b\>\</center\>
   \<sbr/\>
   \$(this.html:logs_pulldown)
   \<sbr/\>
   \$[object obj;

     obj = Obj("Log:" + \$log);
     if (obj == nil) \{
        \$hasharr = nil;
     \} else \{
        \$properties = Get(obj, "*");
        \$structmap = structure_propmap(\$properties);
        \$structmap = \$structmap["err"];
        if (\$structmap) \{
            int i, sz;

            \$hasharr = map_indices(\$structmap);
            \$stamps = ([ ]);
            sz = map_sizeof(\$structmap);
            for (i = 0; i \< sz; i++) \{
                int stamp;

                stamp = \$structmap[\$hasharr[i]]["most-recently-at"];
                \$stamps[pad_left((string)stamp, 10) + ":" + \$hasharr[i]] = \$hasharr[i];
            \}
            \$hasharr = map_indices(\$stamps);
        \}
     \}]
    \{? \| \$(hasharr) \|
      \<h3\>Scripts in \$(log):* with errors:\</h3\>
      \<zform log="\$(log)"\>
      \<action\>
        \$[if (typeof(\$hash) == T_ARRAY) \{
              int    i, sz_i;
              string *list;
              object obj;

              list = Call(\$\{/usr/System/sys/idd\}, "idd:get-objects", \$folder: "Log");
              sz_i = sizeof(list);
              for (i = 0; i \< sz_i; i++) \{
                  int j, sz_j;
                  mapping map;

                  obj = Obj("Log:" + list[i]);
                  if (!obj) \{
                      continue;
                  \}
                  map = structure_propmap(obj."*");
                  map = map["err"];
                  if (!map) \{
                      continue;
                  \}
                  sz_j = sizeof(\$hash);
                  for (j = 0; j \< sz_j; j++) \{
                      int k, sz_k;
                      string *tags;
                      mapping data;

                      data = map[\$hash[j]];
                      if (!data) \{
                          continue;
                      \}
                      sz_k = map_sizeof(data);
                      tags = map_indices(data);

                      for (k = 0; k \< sz_k; k++) \{
                          Set(obj, "err:" + \$hash[j] + ":" + tags[k], nil);
                      \}
                  \}
               \}
           \}]
        \<redirect propob="\$(this)" prop="logs_show" log="\$(log)"/\>
      \</action\>
      \<table width="100%"\>
        \<for var="stamp" val="\$(hasharr)"\>
          \$[\$hash = \$stamps[\$stamp]; \$hashmap = \$structmap[\$hash];]
          \<tr\>\<td colspan="4"\>\\\&nbsp;\</td\>\</tr\>
          \<tr bgcolor="brown" valign="top"\>
            \<td width="1%"\>\<input type="checkbox" name="hash[]" value="\$(hash)"/\>\</td\>
            \<th width="5%" align="right"\>Error:\</th\>
            \<td align="left" colspan="2"\>
              \$[replace_html(\$hashmap["error"])]
            \</td\>
          \</tr\>
          \<tr bgcolor="brown" valign="top"\>
            \<th colspan="2" align="right" nowrap="1"\>Last occured on:\</th\>
            \<td align="left" colspan="2"\>
              \$[ctime(\$hashmap["most-recently-at"])]
            \</td\>
          \</tr\>
          \<tr bgcolor="brown" valign="top"\>
            \<th colspan="2" align="right" nowrap="1"\>Total times occured:\</th\>
            \<td align="left" colspan="2"\>
              \$(hashmap.total-times)
            \</td\>
          \</tr\>
          \<tr bgcolor="red" valign="top"\>
            \<th colspan="2" nowrap="1"\>line number\</th\>
            \<th\>script object\</th\>
            \<th\>signal (if known)\</th\>
          \</tr\>
          \$[/* convert to SAM-friendly format */
             int i;
             mixed *trace;
             trace = \$hashmap["call-trace"];
             \$trace = allocate(sizeof(trace)/3);
             for (i = 0; i \< sizeof(trace); i += 3) \{
                \$trace[i/3] = ([
                   "line": trace[i],
                   "script": trace[i+1],
                   "signal": trace[i+2]
                ]);
            \}]
          \<for var="bit" val="\$(trace)"\>
            \<tr bgcolor="purple" valign="top"\>
              \<font color="white"\>
                \<td colspan="2" align="right"\>\$(bit.line)\</td\>
                \<td align="left"\>
                  \<zact udat="\$(UDat.dat)" uname="\$(UDat.name)" update_obj="\$(bit.script)"\>
                    \$(bit.script)
                    \<action\>
                      \$[::editor_update();]
                      \<redirect propob="\$(this)" prop="PropEdit"/\>
                    \</action\>
                  \</zact\>
                \</td\>
                \<td align="left"\>
                  \<zact udat="\$(UDat.dat)" uname="\$(UDat.name)" update_obj="\$(bit.script)" update_prop="\$(bit.signal)"\>
                    \$(bit.signal)
                    \<action\>
                      \$[object obj;
                        string mode, signal;

                        sscanf(\$update_prop, "%s:%s", mode, signal);
                        obj = FindMerry(Obj(\$update_obj), mode, signal);
                        if (obj) \{
                            \$update_obj = name(obj);
                        \}
                        \$update_prop = "merry:" + \$update_prop;

                        ::editor_update();]
                      \<redirect propob="\$(this)" prop="PropEdit"/\>
                    \</action\>
                  \</zact\>
                \</td\>
              \</font\>
            \</tr\>
          \</for\>
        \</for\>
        \<tr\>\<td colspan="4"\>\\\&nbsp;\</td\>\</tr\>
        \<tr\>\<td colspan="4"\>\<input type="submit" value="Delete Entries"/\>\</td\>\</tr\>
      \</table\>
      \</zform\>
    \| There are no errors for \$(log):*. Hurray!
    \}
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:menu">
         X[S] \<html\>
  \<head\>
    \<title\>Tool Web Menu\</title\>
    \<base target="tool:output"/\>
\$(this.html:css)
  \</head\>
  \<body class="menu" style="margin: 0; padding: 0; border: 0"\>
\\\<!--    \\\<a target="_top" href="http://www.skotos.net/"\\\>\\\<img border="0" src="http://www.skotos.net/navbar/navbar_01.jpg"/\\\>\\\</a\\\>\\\<sbr/\\\> --\\\>
    \<b\>Working:\</b\>\<sbr/\>
    \\\&middot; \<zlink base="PropEdit" zlink_title="Edit Properties in WOE objects"\>Property Editor\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="Exec" zlink_title="Execute SAM/Merry code"\>Execute\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="IDE" zlink_title="Review BILBO/Merry code" zlink_target="_top"\>IDE\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="Logs_Index"\>Error Logs\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="Config"\>Configuration\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="faq" zlink_title="Merry/SAM Frequently Asked Questions"\>FAQ\</zlink\>\<sbr/\>
    \<b\>Unsupported:\</b\>\<sbr/\>
    \\\&middot; \<a target="_top" title="A WOE alternative that only uses HTTP requests, not the custom port.  Downside is that it is not dynamic." href="/Tool/WOE.sam"\>HTTP WOE\</a\>\<sbr/\>
    \<b\>Unfinished:\</b\>\<sbr/\>
    \\\&middot; \<zlink base="Help"\>Help\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="Transfer_obj"\>Transfer Utility\</zlink\>\<sbr/\>
    \<b\>External:\</b\>\<sbr/\>
    \\\&middot; \<zlink base="/SAM/Prop/Nino:Examples:Z" zlink_title="Examples of SAM/Merry based webpages"\>Nino's Examples\</zlink\>\<sbr/\>
    \\\&middot; \<zlink base="/SAM/Prop/Nino:Examples:Code/themer" zlink_title="Editing Colour Themes"\>Theme Editor\</zlink\>\<sbr/\>
    \{? inequal \| \$(System.HostName) \| marrach.skotos.net \|
       \{? \| \$(UDat.dat.skotos:flags:marrach) \|
    \\\&middot; \<a target="_top" href="http://marrach.skotos.net/SAM/Prop/Tool:Lib:Popup" title="Marrach's Tool Web Interface"\>Marrach Popup\</a\>\<sbr/\>
       \}
    \}
    \{? inequal \| \$(System.HostName) \| lovecraft.skotos.net \|
       \{? \| \$(UDat.dat.skotos:flags:stages) \|
    \\\&middot; \<a target="_top" href="http://lovecraft.skotos.net/SAM/Prop/Tool:Lib:Popup" title="Loveraft's Tool Web Interface"\>Lovecraft Popup\</a\>\<sbr/\>
       \}
    \}
    \{? inequal \| \$(System.HostName) \| mv.skotos.net \|
       \{? \| \$(UDat.dat.skotos:flags:mortalis) \|
    \\\&middot; \<a target="_top" href="http://mv.skotos.net/SAM/Prop/Tool:Lib:Popup" title="Mortalis' Tool Web Interface"\>Mortalis Popup\</a\>\<sbr/\>
       \}
    \}
    \{? inequal \| \$(System.HostName) \| skotos-seven.skotos.net \|
       \{? \| \$(UDat.dat.skotos:flags:skotos7) \|
    \\\&middot; \<a target="_top" href="http://skotos-seven.skotos.net/SAM/Prop/Tool:Lib:Popup" title="S7's Tool Web Interface"\>S7 Popup\</a\>\<sbr/\>
       \}
    \}
    \{? inequal \| \$(System.HostName) \| stages.skotos.net \|
       \{? \| \$(UDat.dat.skotos:flags:stages) \|
    \\\&middot; \<a target="_top" href="http://stages.skotos.net/SAM/Prop/Tool:Lib:Popup" title="Stages' Tool Web Interface"\>Stages Popup\</a\>\<sbr/\>
       \}
    \}
    \{? inequal \| \$(System.HostName) \| lazarus.skotos.net \|
       \{? \| \$(UDat.dat.skotos:flags:lazarus) \|
    \\\&middot; \<a target="_top" href="http://lazarus.skotos.net/SAM/Prop/Tool:Lib:Popup" title="Stages' Tool Web Interface"\>Lazarus Popup\</a\>\<sbr/\>
       \}
    \}
    \{? \| \$[\$body \&\& Obj(\$body)] \|
    \\\&middot; \<zlink base="/SAM/Prop/Lib:Assist:lib:assistpopup/html:popup" actor="\$(body)" cmd="+tas" command="+tas" data="Data:DB:assist:AssistGeneralDB" input="new" zlink_title="Task Assist System"\>TAS\</zlink\>\<sbr/\>
    \}
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:propedit">
         X[S] \<html\>
  \<head\>
    \<title\>Property Editor [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
  \</head\>
  \<body onLoad="pageInitialised();"\>
    \<zsession zid="\$(zid)" udat="\$(UDat.dat)" uname="\$(UDat.name)"\>
      \<table border="0" cellpadding="1" cellspacing="0" width="100%"\>
        \$[ParseXML(::property_pulldown())]
        \$[mixed str;
          str = ::property_editor();
          if (str \&\& typeof(str) != T_STRING) \{
              \$focus = "edit_contents";
          \}
          return str;]
      \</table\>
    \</zsession\>
  \</body\>
\</html\>
\<script\>
  function pageInitialised() \\\{
      setParentTitle();
\{? \| \$(focus) \|
      // document.getElementsByName('\$(focus)')[0].focus();
\}
  \\\}
\</script\>
      </Core:Property>
      <Core:Property property="html:transfer">
         X[S] \<html\>
  \<head\>
    \<title\>Transfer Utility [\$(Udat.name)@\$(System.HostName)] Tool Web\</title\>
\$(this.html:css)
\$(this.html:javascript)
  \</head\>
  \<body onLoad="setParentTitle();"\>
    \<h1\>Tool - Transfer Utility\</h1\>
    \<p\>
      Not sure yet if this is going to work, but the idea is the following:
      \<ul\>
        \<li\>Requirements:
          \<ul\>
            \<li\>You have WOE access on both ends.\</li\>
            \<li\>This utility exists on both ends.\</li\>
            \<li\>The object exists on both ends.\</li\>
          \</ul\>
        \</li\>
        \<li\>Procedure:
          \<ol\>
            \<li\>You indicate which object you want to transfer.\</li\>
            \<li\>The XML form of the object is fetched and stored server-side in temporary storage.\</li\>
            \<li\>You select which server you want to transfer it to. (S7 to CM, or vice versa, in most cases.)\</li\>
            \<li\>You are presented with a post-form which, in hidden \<b\>\\\&lt;input\</b\> tags, contains the XML form of the object and which will go to e target server.\</li\>
            \<li\>On the target server there is a special (Tool) form that receives the information and reconfigures the indicated object.\</li\>
          \</ol\>
        \</li\>
      \</ul\>
    \</p\>
    \{? equal \| \$(UDat.name) \| nino \|
    \<p\>
      \<b\>Okay, I assume you know what you're doing.\</b\>
      The actual form is \<zlink base="transfer_obj"\>here\</zlink\>.
    \</p\>
    \|
    \<p\>
      \<i\>Work in progress, wait until it's ready.\</i\>
    \</p\>
    \}
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:transfer_obj">
         X[S] \<html udat="\$(Udat.dat)"\>
  \<head\>
    \<title\>Tool - Transfer Utility\</title\>
\$(this.html:css)
  \</head\>
  \<body\>
    \<h1\>Tool - Transfer Utility\</h1\>
    \<ul\>
      \<li\>Requirements:
        \<ul\>
          \<li\>You have WOE access on both ends.\</li\>
          \<li\>This utility exists on both ends.\</li\>
          \<li\>The object exists on both ends.\</li\>
        \</ul\>
      \</li\>
      \<li\>Procedure:
        \<ol\>
          \<li\>You indicate which object you want to transfer and to which server.\</li\>
          \<li\>You are presented with a post-form which, in hidden \<b\>\\\&lt;input\\\>\</b\> tags, contains the XML form of the object and which will go to the target server.\</li\>
          \<li\>On the target server there is a special (Tool) web-form that receives the information and reconfigures the indicated object.\</li\>
        \</ol\>
      \</li\>
    \</ul\>
    \<table border="1" cellpadding="3" cellspacing="0"\>
\{? \| \$(warning) \|
      \<tr\>\<td colspan="3"\>\<div class="error"\>\$(warning)\</div\>\</td\>\</tr\>
\}
      \<zform zid="\$(zid)"\>
        \<action\>
         \<z udat="\$(UDat.dat)"\>
          \$[if (strlen(Str(\$transfer_obj_other))) \{
                \$transfer_obj = \$transfer_obj_other;
            \}
            ::transfer_checkobj();
            if (!\$warning) \{
                ::transfer_checkto();
            \}]
          \<zsession zid="\$(zid)" transfer_obj="\$(transfer_obj)" transfer_to="\$(transfer_to)"\>
            \{? \| \$(warning) \|
              \<redirect propob="\$(this)" prop="transfer_obj" zid="\$(zid)" warning="\$(warning)"/\>
            \|
              \<redirect propob="\$(this)" prop="transfer_send" zid="\$(zid)"/\>
            \}
          \</zsession\>
         \</z\>
        \</action\>
        \<tr\>
          \<td valign="top"\>What object do you want to transfer:\</td\>
          \<td valign="top"\>
        \$[/**/
\$history = \$udat."tool:edit_history";

if (\$history \&\& map_sizeof(\$history)) \{
    int i, sz;
    object *obs;
    sz = map_sizeof(\$history);
    obs = map_values(\$history);

    /*
     * Resync object-names with what they really are, in case of objects having been
     * renamed since they got added to the history mapping.
     */
    \$history = ([ ]);
    for (i = 0; i \< sz; i++) \{
        \$history[name(obs[i])] = obs[i];
    \}
\} else \{
    \$history = ([ ]);
\}
\$edit_obj = \$udat."tool:edit_obj";]
            \<select name="transfer_obj"\>
              \<for var="obj" val="\$[map_indices(\$history)]"\>
                \{? equal \| \$(edit_obj) \| \$(obj) \|
                  \<option selected="1" value="\$(obj)"\>\$(obj)\</option\>
                \|
                  \<option value="\$(obj)"\>\$(obj)\</option\>
                \}
              \</for\>
            \</select\>
            \<sbr/\>
            \<input type="text" name="transfer_obj_other" value="\$(transfer_obj_other)"/\>\</td\>
        \</tr\>
        \<tr\>
          \<td\>What server do you want to transfer to:\</td\>
          \<td\>\<select name="transfer_to"\>
                \<option value="lovecraft.skotos.net"\>Lovecraft Country: Arkham By Night\</option\>
                \<option value="marrach.skotos.net"\>Castle Marrach\</option\>
                \<option value="mv.skotos.net"\>Mortalis Victus\</option\>
                \<option value="skotos-seven.skotos.net"\>Skotos Seven\</option\>
                \<option value="stages.skotos.net"\>Stages\</option\>
              \</select\>
          \</td\>
        \</tr\>
        \<tr\>
          \<td colspan="2" align="center"\>\<input type="submit" value="Continue"/\>\</td\>
        \</tr\>
      \</zform\>
    \</table\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:transfer_receive">
         X[S] \<html\>
  \<head\>
    \<title\>Tool - Transfer Utility\</title\>
\$(this.html:css)
  \</head\>
  \<body\>
    \<h1\>Tool - Transfer Utility\</h1\>
    \<p\>
      The receiving end got the following information:
      \<table border="1" cellpadding="3" cellspacing="0"\>
        \$[::transfer_verifymd5();]
        \<tr\>\<td\>transfer_obj\</td\>\<td\>\$(transfer_obj)\</td\>\</tr\>
        \<tr\>\<td\>transfer_from\</td\>\<td\>\$(transfer_from)\</td\>\</tr\>
        \<tr\>\<td\>transfer_to\</td\>\<td\>\$(transfer_to)\</td\>\</tr\>
        \<tr\>\<td\>transfer_type\</td\>\<td\>\$(transfer_type)\</td\>\</tr\>
        \<tr\>\<td\>transfer_md5\</td\>\<td\>\$(transfer_md5) [Verified: \$(transfer_verified)]\</td\>\</tr\>
        \<tr\>\<td\>transfer_size\</td\>\<td\>\$(transfer_size) [\$[strlen(\$transfer_xml)]]\</td\>\</tr\>
        \<tr\>\<td\>transfer_orig\</td\>\<td\>\$(transfer_orig) [\$[strlen(\$transfer_xml_d)]]\</td\>\</tr\>
        \{? equal \| \$(transfer_md5) \| \$(transfer_verified) \|
          \<postxml xml="\$(transfer_xml_d)" obj="\$(transfer_obj)"/\>
          \<tr\>\<td colspan="2"\>\<div class="info"\>The MD5 checksums matched, attempted to reconfigure the target object.\</div\>\</td\>\</tr\>
        \|
          \<tr\>\<td colspan="2"\>\<div class="error"\>The MD5 checksums did not match, aborting reconfiguration of the target object!\</div\>\</td\>\</tr\>
          \<tr\>\<td\>transfer_xml_d\</td\>\<td\>\<escape-html simple="1"\>\$(transfer_xml_d)\</escape-html\>\</td\>\</tr\>
        \}
      \</table\>
    \</p\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:transfer_send">
         X[S] \<html\>
  \<head\>
    \<title\>Tool - Transfer Utility\</title\>
\$(this.html:css)
  \</head\>
  \<body\>
    \<table border="0" cellpadding="3" cellspacing="0"\>
      \<form method="post" action="http://\$(transfer_to)/SAM/Prop/\$(this.name)/transfer_receive"\>
        \<input type="hidden" name="transfer_obj" value="\$(transfer_obj)"/\>
        \<input type="hidden" name="transfer_to" value="\$(transfer_to)"/\>
        \<input type="hidden" name="transfer_from" value="\$(System.HostName)"/\>
        \<z action="\$[nil]" obj="\$(transfer_obj)" transfer_type="url" xml="\$(Dev.XMLState)"\>
          \$[::transfer_generatexml();]
          \<input type="hidden" name="transfer_md5" value="\$(transfer_md5)"/\>
          \<input type="hidden" name="transfer_size" value="\$(transfer_size)"/\>
          \<input type="hidden" name="transfer_orig" value="\$(transfer_orig)"/\>
          \<input type="hidden" name="transfer_xml" value="\$(transfer_xml)"/\>
          \<input type="hidden" name="transfer_type" value="\$(transfer_type)"/\>
        \</z\>
        \<tr\>
          \<td\>This page now contains (hidden away) the XML source of that object.  When you hit send, it'll submit that information plus some extra bits to the target host and if all goes according to plan, it'll reconfigure the object there and let you know how it went.\</td\>
        \</tr\>
        \<tr\>
          \<td align="center"\>
            \<input type="submit" value="Send!"/\>
          \</td\>
        \</tr\>
      \</form\>
    \</table\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="html:transfer_to">
         X[S] \<html\>
  \<head\>
    \<title\>Tool - Transfer Utility\</title\>
\$(this.html:css)
  \</head\>
  \<body\>
    \<h1\>Tool - Transfer Utility\</h1\>
    \<table border="0" cellpadding="3" cellspacing="0"\>
      \<zform zid="\$(zid)"\>
        \<action\>
          \<zsession zid="\$(zid)" transfer_to="\$(transfer_to)"\>
            \$[::transfer_checkto();]
            \{? \| \$(warning) \|
              \<redirect propob="\$(this)" prop="transfer_to" zid="\$(zid)" warning="\$(warning)"/\>
            \|
              \<redirect propob="\$(this)" prop="transfer_send" zid="\$(zid)"/\>
            \}
          \</zsession\>
        \</action\>
          \<tr\>
            \<td\>What server do you want to transfer to:\</td\>
            \<td\>\<select name="transfer_to"\>
                  \<option value="lovecraft.skotos.net"\>Lovecraft Country: Arkham By Night\</option\>
                  \<option value="marrach.skotos.net"\>Castle Marrach\</option\>
                  \<option value="mv.skotos.net"\>Mortalis Victus\</option\>
                  \<option value="skotos-seven.skotos.net"\>Skotos Seven\</option\>
                  \<option value="stages.skotos.net"\>Stages\</option\>
                \</select\>
            \</td\>
            \<td\>\<input type="submit" value="Continue"/\>\</td\>
          \</tr\>
      \</zform\>
    \</table\>
  \</body\>
\</html\>
      </Core:Property>
      <Core:Property property="merry:lib:config_rows">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

int i, sz;
string *list, output;

output = "";
list = Call(\$\{Tool:Config\}, "query_list");
for (i = 0, sz = sizeof(list); i \< sz; i++) \{
    mixed val, def;

    val = Call(\$\{Tool:Config\}, "query_config", \$name: list[i], \$udat: \$udat);
    def = Call(\$\{Tool:Config\}, "query_default", \$name: list[i]);
    output +=
        "\<INPUT type=hidden name=\\"entries[]\\" value=\\"" + list[i] + "\\"/\>" +
        "\<tr\>" +
        "\<td\>" + list[i] + "\</td\>" +
        "\<td\>\<input type=text name=\\"values[]\\" value=\\"" + replace_html((string)val) + "\\"/\>\</td\>" +
        "\<td\>\<tt\>" + def + "\</tt\>\</td\>" +
        "\</tr\>";
\}
return output;
      </Core:Property>
      <Core:Property property="merry:lib:config_update">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

int i, sz;

sz = sizeof(\$entries);
if (sizeof(\$values) != sizeof(\$entries)) \{
    error("Mismatch!");
\}

for (i = 0; i \< sz; i++) \{
    Call(\$\{Tool:Config\}, "set_config", \$name: \$entries[i], \$value: \$values[i], \$udat: \$udat);
\}

\$info = "Configuration updated successfully.";
      </Core:Property>
      <Core:Property property="merry:lib:editor_change">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

constant merry_lpc_offset = 5;

string err;
mixed verify;

if (\$update_obj) \{
    \$edit_obj  = \$update_obj;
\} else \{
    \$edit_obj  = \$udat."tool:edit_obj";
\}
if (\$update_prop) \{
    \$edit_prop = \$update_prop;
\} else \{
    \$edit_prop = \$udat."tool:edit_prop";
\}
verify = Get(Obj(\$edit_obj), \$edit_prop);

if (\$delete == "Delete") \{
    if (verify == nil) \{
        \$warning = "Property had already been cleared.";
    \} else \{
        mixed log;

        Set(Obj(\$edit_obj), \$edit_prop, nil);
        log = Obj(\$edit_obj).revisions;
        if (typeof(log) != T_ARRAY) \{
            log = (\{ \});
        \}
        log += (\{
            time(),
            \$uname ? \$uname : "???",
            "P"
        \});
        Obj(\$edit_obj).revisions = log;

        /*
         * Create an XML snapshot:
         */
        Call(\$\{SID:TheVault\}, "XMLSnapShot", \$obj: Obj(\$edit_obj));

        \$info = "Property deleted successfully.";
    \}
    return nil;
\}

if (\$uname == "nino") \{
if (\$edit_type_new != \$edit_type_old) \{
    switch (\$edit_type_new) \{
    case "sam":
        if (strlen(\$edit_contents) \< 4 \|\| \$edit_contents[..3] != "X[S]") \{
            \$edit_contents = "X[S] " + \$edit_contents;
        \}
        break;
    case "merry":
        if (strlen(\$edit_contents) \< 4 \|\| \$edit_contents[..3] != "X[M]") \{
            \$edit_contents = "X[M] " + \$edit_contents;
        \}
        break;
    default:
        break;
    \}
\}
\}

\$edit_contents = implode(explode("\\r\\n" + \$edit_contents + "\\r\\n", "\\r\\n"), "\\n");

if (\$uname == "nino") \{
    switch (\$edit_type_new) \{
    default:
        err = catch(Set(Obj(\$edit_obj), \$edit_prop, ascii_to_mixed(\$edit_contents)));
        break;
    \}
\} else \{
    err = catch(Set(Obj(\$edit_obj), \$edit_prop,
ascii_to_mixed(\$edit_contents)));
\}

if (err) \{
    string str;

    if (sscanf(err, "PACKET: %s\|%s", err, str)) \{
        mixed *arr;

        arr = ascii_to_mixed(str);
        if (sizeof(arr) \> 0) \{
            int i;

            if (\$edit_type_new == "merry") \{
                \$warning = ::format_merry_cerror(\$list: arr, \$contents: \$edit_contents, \$error: err);
            \} else \{
                \$warning = err + ":\<br\>\\n";
                for (i = 0; i \< sizeof(arr); i++) \{
                    \$warning += "Line " + (arr[i][1] - merry_lpc_offset) + ": " + arr[i][2] + "\<br\>\\n";
                \}
            \}
        \}
    \} else \{
        int linenr;

        if (\$edit_type_new == "merry" \&\&
            sscanf(err, "merry parse error around line: %d", linenr)) \{
            \$warning = ::format_merry_cerror(\$list: (\{ (\{ nil, linenr + merry_lpc_offset, "Merry parse error" \}) \}), \$contents: \$edit_contents, \$error: "Merry error");
        \} else \{
            if (\$edit_type_new == "sam" \&\&
                sscanf(err, "XML: file N/A line %d: %s", linenr, err) == 2) \{
                \$warning = ::format_merry_cerror(\$list: (\{ (\{ nil, linenr + merry_lpc_offset, err \}) \}), \$contents: \$edit_contents, \$error: "XML error");
            \} else \{
                \$warning = "Error while setting property: " + replace_html(err);
            \}
        \}
    \}
\} else \{
    if (mixed_to_ascii(verify, TRUE) != \$edit_contents) \{
        mixed log;

        log = Get(Obj(\$edit_obj), "revisions");
        if (typeof(log) != T_ARRAY) \{
            log = (\{ \});
        \}
        log += (\{
            time(),
            \$uname ? \$uname : "???",
            "P"
        \});
        Set(Obj(\$edit_obj), "revisions", log);

        /*
         * Create an XML snapshot:
         */
        Call(\$\{SID:TheVault\}, "XMLSnapShot", \$obj: Obj(\$edit_obj));
    \}
    \$info = "Property set successfully.";
\}
      </Core:Property>
      <Core:Property property="merry:lib:editor_update">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */
object  obj;
mapping history;

if (\$update_obj) \{
    \$edit_obj = \$update_obj;
\}
if (\$update_prop) \{
    \$edit_prop = \$update_prop;
\}
\$udat."tool:warning" = nil;
\$udat."tool:info" = nil;
\$udat."tool:edit_obj" = \$edit_obj;

if (obj = find_object(\$edit_obj)) \{
    history = \$udat."tool:edit_history";
    if (!history) \{
        history = ([ ]);
    \}
    history[\$edit_obj] = obj;
    \$udat."tool:edit_history" = history;
\}

if (\$edit_new \&\& strlen(\$edit_new) \> 0) \{
    \$edit_prop = \$edit_new;
\}
\$udat."tool:edit_prop" = \$edit_prop;
      </Core:Property>
      <Core:Property property="merry:lib:execute">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

/*
 * Parameters:
 *   \$exec_system = sam \| merry
 *   \$exec_input = ...text...
 */

if (!\$exec_input \|\| !strlen(\$exec_input)) \{
    \$exec_error = "Need \<B\>some\</B\> input to execute.";
    return nil;
\}

switch (\$exec_system) \{
case "sam":
    \$exec_error = catch(\$exec_output = UnSAM(ParseXML(\$exec_input)));
    break;
case "merry":
    this."merry:lib:exec_scratch" = ascii_to_mixed("X[M] " + \$exec_input);
    \$exec_error = catch(\$exec_output = ::exec_scratch());
    this."merry:lib:exec_scratch" = nil;
    break;
default:
    \$exec_error = "Internal error: Unknown system, don't know how to execute input.";
    return nil;
\}
\$exec_output = mixed_to_ascii(\$exec_output, TRUE);
      </Core:Property>
      <Core:Property property="merry:lib:format_merry_cerror">
         X[M] /*
 * Copyright Skotos Tech Inc 2003.
 */

constant merry_lpc_offset = 5;

/*
 * Input:
 *   \$error:    The runtime error.
 *   \$list:     2d array of filenames, linenumbers and compile errors.
 *   \$contents: The contents of the Merry code that we tried to compile.
 */

int i,  sz;
string  warning, *lines, contents;
mapping seen;

contents = \$contents;
if (sscanf(contents, "X[M]%s", contents)) \{
    contents = strip(contents);
\} else if (sscanf(contents, "X[S]%s", contents)) \{
    contents = strip(contents);
\}

lines = explode("\\n" + contents + "\\n", "\\n");
seen = ([ ]);
warning =
    \$error + "\\n" +
    "\<TABLE border=0 cellpadding=0 cellspacing=0\>";
sz = sizeof(\$list);
for (i = 0; i \< sz; i++) \{
    int j;

    for (j = \$list[i][1] - 2; j \<= \$list[i][1]; j++) \{
        int line;

        line = j - merry_lpc_offset;

        if (line \< 1 \|\| line \> sizeof(lines)) \{
            continue;
        \}
        if (seen[line]) \{
            continue;
        \}
        seen[line] = TRUE;
        warning +=
            "\<TR\>" +
            "\<TD align=right\>\<TT\>\<FONT color=black\>" + line + "\</FONT\>\</TT\>\</TD\>" +
            "\<TD\>\&nbsp;\</TD\>" +
            "\<TD class=error\>\<PRE\>" + replace_html(lines[line - 1]) +
            "\</PRE\>\</TD\>" +
            "\</TR\>";
    \}
    warning +=
        "\<TR\>" +
        "\<TD colspan=2\>\&nbsp;\</TD\>" +
        "\<TD\>\<I\>\<FONT color=black\>" + \$list[i][2] + "\</FONT\>\</I\>\</TD\>" +
        "\</TR\>";
\}
warning +=
    "\</TABLE\>";
return warning;
      </Core:Property>
      <Core:Property property="merry:lib:ide_form">
         X[M] /*
 * Copyright Skotos Tech Inc 2003.
 */

if (!\$obj \|\| !strlen(\$obj)) \{
    return "You need to provide the name of a WOE object.";
\}

if (!find_object(\$obj)) \{
    return "No WOE object by that name exists.";
\}
      </Core:Property>
      <Core:Property property="merry:lib:property_editor">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

if (\$update_obj) \{
    \$edit_obj = \$update_obj;
\} else \{
    \$edit_obj = \$udat."tool:edit_obj";
\}

if (\$update_prop) \{
    \$edit_prop = \$update_prop;
\} else \{
    \$edit_prop = \$udat."tool:edit_prop";
\}

if (!Obj(\$edit_obj)) \{
    \$edit_obj = nil;
    \$edit_prop = nil;
\}

if (\$edit_obj \&\& \$edit_prop) \{
    if (\$edit_contents \&\& \$edit_contents_valid == "1") \{
        \$contents = \$edit_contents;
        \$contents_type = \$edit_type;
    \} else \{
        mixed contents;

        contents = Get(Obj(\$edit_obj), \$edit_prop);
        \$contents = mixed_to_ascii(contents, TRUE);
        switch (query_colour(contents)) \{
        case  1:
        case 17:
            \$contents_type = "sam";
            if (sscanf(\$contents, "X[S] %s", \$contents)) \{
                \$contents = "X[S]\\n" + \$contents;
            \}
            break;
        default:
            switch (typeof(contents)) \{
            case T_NIL:
                \$contents_type = "nil";
                break;
            case T_INT:
                \$contents_type = "int";
                break;
            case T_FLOAT:
                \$contents_type = "float";
                break;
            case T_STRING:
                \$contents_type = "string";
                break;
            case T_OBJECT:
                /*
                 * Can't use function_object("query_source", contents) for
                 * this, alas.
                 */
                if (ur_name(contents) == "/usr/SkotOS/data/merry#-1") \{
                    /*
                     * Strip whitespace from ends of lines.
                     */
                    int    i, sz;
                    string *lines;

                    if (sscanf(\$contents, "X[M] %s", \$contents)) \{
                        \$contents = "X[M]\\n" + \$contents;
                    \}
                    \$contents_type = "merry";
                    lines = explode(\$contents, "\\n");
                    sz = sizeof(lines);
                    for (i = 0; i \< sz; i++) \{
                        lines[i] = strip_right(lines[i]);
                    \}
                    \$contents = implode(lines, "\\n");
                \} else \{
                    \$contents_type = "object";
                \}
                break;
            case T_ARRAY:
                \$contents_type = "array";
                break;
            case T_MAPPING:
                \$contents_type = "mapping";
                break;
            \}
        \}
    \}
    return this."html:editor_textarea";
\}

return "";
      </Core:Property>
      <Core:Property property="merry:lib:property_pulldown">
         X[M] /**/
/*
 * Copyright Skotos Tech Inc 2003, 2004.
 */

int     i, sz;
string  *list, info, warning, output, notfound;
object  *obs;
mapping history, lastprop, recent;
mixed   edit_prop, edit_obj;

info = \$create_info;
warning = \$create_warning;

if (\$update_obj) \{
    edit_obj = \$update_obj;
\} else \{
    edit_obj = \$udat."tool:edit_obj";
\}
if (\$update_prop) \{
    edit_prop = \$update_prop;
\} else \{
    edit_prop = \$udat."tool:edit_prop";
\}

list = nil;
if (typeof(edit_obj) == T_STRING \&\& strlen(edit_obj) \> 0) \{
    edit_obj = strip(edit_obj);
    notfound = edit_obj;
    edit_obj = find_object(edit_obj);
    if (!edit_obj) \{
        int len;

        len = strlen(notfound);
        if (len \> 2 \&\& notfound[len - 2] == ':' \&\& notfound[len - 1] == ':') \{
            edit_obj = Get(\$\{SkotOS:Merry\}, "script-space:" + notfound[..len - 3] + ":handler");
        \}
    \}
    if (edit_obj) \{
        catch \{
            mapping map;

            map = edit_obj."*";
            list = map ? map_indices(map) : (\{ \});
        \} : \{
            list = (\{ \});
        \}
        notfound = nil;
    \} else \{
        warning = warning ? warning : "Object does not exist.";
    \}
\} else \{
    edit_obj = nil;
\}

output = "";
if (warning) \{
    output +=
        "\<TR\>\<TD colspan=6\>\<FONT color=red\>" + warning +
        "\</FONT\>\</TD\>\</TR\>";
\}
if (info) \{
    output += "\<TR\>\<TD colspan=6\>\<I\>" + info + "\</I\>\</TD\>\</TR\>";
\}

/*
 * A form to load a new object and list its properties:
 */
output +=
    "\<TR\>" +
    " \<ZFORM zid=\\"\$(zid)\\" action=\\"list\\"\>\\n" +
    "  \<ACTION\>\\n" +
    "    \$[ ::editor_update() ]\\n" +
    "    \<ZSESSION zid=\$(zid) edit_contents=\\"\\" edit_contents_valid=\\"0\\"\>\\n" +
    "      \<REDIRECT propob=\\"Tool:Lib:Popup\\" prop=\\"html:propedit\\" zid=\\"\$(zid)\\"/\>\\n" +
    "    \</ZSESSION\>\\n" +
    "  \</ACTION\>\\n" +
    "    \<TH align=left\>Object:\</TH\>" +
    "    \<TD\>\<INPUT onfocus=\\"select();\\" style=\\"font-size: smallest\\" type=text size=30 maxlen=80 name=\\"edit_obj\\" value=\\"" +
    (edit_obj ? replace_html(name(edit_obj)) :
     notfound ? replace_html(notfound) : "") + "\\"/\>\</TD\>" +
    "    \<TD\>\<INPUT type=submit value=\\"List\\"/\>\</TD\>\\n" +
    " \</ZFORM\>\\n";

history = \$udat."tool:edit_history";

if (history \&\& map_sizeof(history)) \{
    sz = map_sizeof(history);
    obs = map_values(history);

    /*
     * Resync object-names with what they really are, in case of objects having been
     * renamed since they got added to the history mapping.
     */
    history = ([ ]);
    for (i = 0; i \< sz; i++) \{
        history[name(obs[i])] = obs[i];
    \}
    sz = map_sizeof(history);
    obs = map_values(history);

    if (typeof(edit_obj) != T_OBJECT) \{
        edit_obj = obs[0];
    \}
\}

recent   = Map(\$udat."tool:recent");
lastprop = Map(\$udat."tool:lastprop");

if (edit_obj) \{
    recent[edit_obj] = time();
    if (edit_prop) \{
        lastprop[edit_obj] = edit_prop;
    \} else \{
        edit_prop = lastprop[edit_obj];
        \$update_prop = edit_prop;
    \}
\}

\$udat."tool:recent" = recent;
\$udat."tool:lastprop" = lastprop;

if (history \&\& map_sizeof(history)) \{
    output +=
        "\<ZFORM zid=\$(zid) action=list\>\\n" +
        "  \<ACTION\>\\n" +
        "    \$[ ::editor_update() ]\\n" +
        "    \<ZSESSION zid=\$(zid) edit_contents=\\"\\" edit_contents_valid=\\"0\\"\>\\n" +
        "      \<REDIRECT propob=\\"Tool:Lib:Popup\\" prop=propedit zid=\$(zid)/\>\\n" +
        "    \</ZSESSION\>\\n" +
        "  \</ACTION\>\\n" +
        "    \<TH align=left\>History:\</TH\>\\n" +
        "    \<TD\>\<SELECT name=update_obj onchange=\\"submit();\\"\>";
    for (i = 0; i \< sz; i++) \{
        output +=
            "\<OPTION value=\\"" + replace_html(name(obs[i])) + "\\"" +
            (obs[i] == edit_obj ? " selected=1" : "") + "\>" +
            replace_html(name(obs[i])) + "\</OPTION\>";
    \}
    output +=
        "    \</SELECT\>\</TD\>\\n" +
        "    \<TD\>\<INPUT type=submit value=List/\>\</TD\>\\n" +
        "\</ZFORM\>\\n";
\}

output += "  \</TR\>";

if (list) \{
    output +=
        "\<TR\>\\n" +
        "\<ZFORM zid=\$(zid) action=create\>\\n" +
        "  \<ACTION\>\\n" +
        "    \$[ ::editor_update() ]\\n" +
        "    \<ZSESSION zid=\$(zid) edit_contents=\\"\\" edit_contents_valid=\\"0\\"\>\\n" +
        "      \<REDIRECT propob=\\"Tool:Lib:Popup\\" prop=propedit zid=\$(zid)/\>\\n" +
        "    \</ZSESSION\>\\n" +
        "  \</ACTION\>\\n" +
        "  \<INPUT type=hidden name=update_obj value=\\"" +
        replace_html(name(edit_obj)) + "\\"/\>\\n" +
        "    \<TH align=left\>Property:\</TH\>\\n" +
        "    \<TD\>\<INPUT onfocus=\\"select();\\" type=text name=update_prop size=30 maxlen=80 value=\\"" + (edit_prop ? replace_html(edit_prop) : "") + "\\"/\>\</TD\>\\n" +
        "    \<TD\>\<INPUT type=submit value=Edit/\>\</TD\>\\n" +
        "\</ZFORM\>\\n";

    if (sizeof(list) \> 0) \{
        int i, sz;

        sz = sizeof(list);
        output +=
            "\<ZFORM zid=\$(zid) action=load\>\\n" +
            "  \<ACTION\>\\n" +
            "    \$[ ::editor_update() ]\\n" +
            "    \<ZSESSION zid=\$(zid) edit_contents=\\"\\" edit_contents_valid=\\"0\\"\>\\n" +
            "      \<REDIRECT propob=\\"Tool:Lib:Popup\\" prop=propedit zid=\$(zid)/\>\\n" +
            "    \</ZSESSION\>\\n" +
            "  \</ACTION\>\\n" +
            "  \<INPUT type=hidden name=update_obj value=\\"" +
            replace_html(name(edit_obj)) + "\\"/\>\\n" +
            "    \<TH align=left\>Existing:\</TH\>" +
            "    \<TD\>\<SELECT name=update_prop onchange=\\"submit();\\"\>";
        for (i = 0; i \< sz; i++) \{
            output +=
                "\<OPTION value=\\"" + replace_html(list[i]) + "\\"" +
                (list[i] == edit_prop ? " selected=1" : "") + "\>" +
                replace_html(list[i]) + "\</OPTION\>";
        \}
        output +=
            "    \</SELECT\>\</TD\>" +
            "    \<TD\>\<INPUT type=submit value=Edit/\>\</TD\>\\n" +
            "\</ZFORM\>\\n";
    \}
    output +=
        "\</TR\>" +
        "\<TR\>\<TD colspan=6 align=center nowrap\>\\n" +
        "  \<TABLE border=0 cellpadding=0 cellspacing=0\>\<TR\>\<TD\>" +
        "  \<ZFORM obj=\\"" + replace_html(name(edit_obj)) + "\\"\>" +
        "    \<ACTION\>\<REDIRECT base=\\"/Dev/View.sam\\" obj=\$(obj)/\>\</ACTION\>" +
        "    \<INPUT type=submit value=\\"  View in WOE  \\"/\>" +
        "  \</ZFORM\>\</TD\>\<TD\>" +
        "  \<ZFORM obj=\\"" + replace_html(name(edit_obj)) + "\\"\>" +
        "    \<ACTION\>\<REDIRECT base=\\"/Dev/Form.sam\\" obj=\$(obj)/\>\</ACTION\>" +
        "    \<INPUT type=submit value=\\"  Edit in WOE  \\"/\>" +
        "  \</ZFORM\>\</TD\>\<TD\>" +
        "  \<ZFORM obj=\\"" + replace_html(name(edit_obj)) + "\\"\>\\n" +
        "    \<ACTION\>\\n" +
        "      \<REDIRECT base=\\"/Dev/XML.sam\\" obj=\$(obj)/\>\\n" +
        "    \</ACTION\>\\n" +
        "    \<INPUT type=submit value=\\"  Edit in XML  \\"/\>\\n" +
        "  \</ZFORM\>\</TD\>\<TD\>\\n" +
        "  \<ZFORM obj=\\"" + replace_html(name(edit_obj)) + "\\"\>\\n" +
        "    \<ACTION\>\\n" +
        "      \<REDIRECT base=\\"/Dev/Kar.sam\\" obj=\$(obj)/\>\\n" +
        "    \</ACTION\>\\n" +
        "    \<INPUT type=submit value=\\"  Edit in KarMode  \\"/\>\\n" +
        "  \</ZFORM\>\</TD\>\</TR\>\</TABLE\>\\n" +
        "\</TD\>\</TR\>\\n";
\} else if (notfound) \{
    output +=
        "\<TR uname=\$(UDat.name)\>" +
        "  \<ZFORM zid=\$(zid) uname=\$(UDat.name) woename=\\"" + replace_html(notfound) + "\\"\>\\n" +
        "    \<ACTION\>\\n" +
        "      \$[if (\$woetype \&\& strlen(\$woetype)) \{\\n" +
        "            string err;\\n" +
        "            if (err = catch(Call( \$\{Lib:objects\}, \\"create_of_type\\", \$uname: \$uname, \$type: \$woetype,\\n" +
        "                                  \$name: \$woename))) \{\\n" +
        "                \$warning = \\"Error while creating object: \\" + err;\\n" +
        "            \} else \{\\n" +
        "                \$info = \\"Successfully created \\" + \$woename + \\" of type \\\\\\"\\" + \$woetype + \\"\\\\\\".\\";\\n" +
        "            \}\\n" +
        "        \} else \{\\n" +
        "            \$warning = \\"Select one of the object types.\\";\\n" +
        "        \}\\n" +
        "       ]\\n" +
        "      \<ZSESSION zid=\$(zid) edit_contents=\\"\\" edit_contents_valid=\\"0\\"\>\\n" +
        "        \<REDIRECT propob=\$(this) prop=propedit zid=\$(zid) create_warning=\$(warning) create_info=\$(info)\\n" +
        "                  update_obj=\$(woename)/\>\\n" +
        "      \</ZSESSION\>\\n" +
        "    \</ACTION\>\\n" +
        "    \<TD colspan=6\>\\n" +
        "      \$[\$woetypes = Call(\$\{Lib:objects\}, \\"get_types\\", \$uname: \$uname);]\\n" +
        "      Create \\"" + replace_html(notfound) + "\\" as an object of the type:\\n" +
        "      \<select name=woetype\>\\n" +
        "        \<option value=\\"\\"\>-- Select object type --\</option\>\\n" +
        "        \<for var=woetype val=\$(woetypes)\>\\n" +
        "          \<option value=\$(woetype)\>\$(woetype)\</option\>\\n" +
        "        \</for\>\\n" +
        "      \</select\>\\n" +
        "      \<input type=submit value=\\" Create! \\"/\>\\n" +
        "    \</TD\>\\n" +
        "  \</ZFORM\>\\n" +
        "\</TR\>";
\}

return output;
      </Core:Property>
      <Core:Property property="merry:lib:transfer_checkobj">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

/*
 * Check if \$transfer_obj contains a valid woe name.
 */
if (!\$transfer_obj) \{
    \$warning = "Please enter a WOE name.";
    return nil;
\}

\$transfer_obj = strip(\$transfer_obj);
if (!strlen(\$transfer_obj)) \{
    \$warning = "Please enter a WOE name.";
    return nil;
\}

if (!find_object(\$transfer_obj)) \{
    \$warning = "There is no WOE object with such a name.";
    return nil;
\}

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:transfer_checkto">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

if (!\$transfer_to) \{
    \$warning = "Please select one of the servers.";
    return nil;
\}

switch (\$transfer_to) \{
case "lovecraft.skotos.net":
    if (!\$udat."skotos:flags:lcabn") \{
        \$warning = "You do not have WOE access on " + \$transfer_to;
        return nil;
    \}
    break;
case "marrach.skotos.net":
    if (!\$udat."skotos:flags:marrach") \{
        \$warning = "You do not have WOE access on " + \$transfer_to;
        return nil;
    \}
    break;
case "mv.skotos.net":
    if (!\$udat."skotos:flags:mortalis") \{
        \$warning = "You do not have WOE access on " + \$transfer_to;
        return nil;
    \}
    break;
case "skotos-seven.skotos.net":
    if (!\$udat."skotos:flags:skotos7") \{
        \$warning = "You do not have WOE access on " + \$transfer_to;
        return nil;
    \}
    break;
case "stages.skotos.net":
    if (!\$udat."skotos:flags:stages") \{
        \$warning = "You do not have WOE access on " + \$transfer_to;
        return nil;
    \}
    break;
default:
    break;
\}

return nil;
      </Core:Property>
      <Core:Property property="merry:lib:transfer_decode">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

switch (\$method) \{
case "quote":
    return replace_strings(\$str,
                           "%3E", "\>",
                           "%3C", "\<",
                           "%0D", "\\r",
                           "%0A", "\\n",
                           "%22", "\\"",
                           "%5C", "\\\\",
                           "%25", "%");
case "url":
default:
    return url_decode(\$str);
\}
      </Core:Property>
      <Core:Property property="merry:lib:transfer_encode">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

switch (\$method) \{
case "quote":
    return replace_strings(\$str,
                           "%",  "%25",
                           "\\\\", "%5C",
                           "\\"", "%22",
                           "\\n", "%0A",
                           "\\r", "%0D",
                           "\<",  "%3C",
                           "\>",  "%3E");
case "url":
default:
    return url_encode(\$str);
\}
      </Core:Property>
      <Core:Property property="merry:lib:transfer_generatexml">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

/*
 * Assume that \$xml contains an array of XML chunks.  Turn these into HTML-
 * escaped text and concatenate them, then assign it to \$transfer_xml.
 */

int i, sz, orig;
string *xml, *md5;

xml = \$xml;
sz  = sizeof(xml);

for (i = 0; i \< sz; i++) \{
    orig += strlen(xml[i]);
    xml[i] = ::transfer_encode(\$str: xml[i], \$method: \$transfer_type);
\}
\$transfer_xml = implode(xml, "");
\$transfer_md5 = to_hex(hash_md5(\$transfer_obj + "#" +
                                \$transfer_to + "#" +
                                hash_md5(\$transfer_xml)));
\$transfer_size = strlen(\$transfer_xml);
\$transfer_orig = orig;
      </Core:Property>
      <Core:Property property="merry:lib:transfer_verifymd5">
         X[M] /*
 * Copyright Skotos Tech Inc 2003
 */

\$transfer_verified = to_hex(hash_md5(\$transfer_obj + "#" +
                                     \$transfer_to + "#" +
                                     hash_md5(\$transfer_xml)));
\$transfer_xml_d = ::transfer_decode(\$str: \$transfer_xml, \$method: \$transfer_type);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1063688344, "nino", "E", 1063688354, "nino", "E", 1063688501, "nino", "E", 1063688699, "nino", "E", 1063688897, "nino", "E", 1063689031, "nino", "E", 1063689155, "nino", "E", 1063689318, "nino", "E", 1063716660, "nino", "E", 1063717586, "nino", "E", 1063717619, "nino", "E", 1063717915, "nino", "E", 1063718211, "nino", "E", 1063718277, "nino", "E", 1063718520, "nino", "E", 1063718702, "nino", "E", 1063718781, "nino", "E", 1063718888, "nino", "E", 1063718969, "nino", "E", 1063719189, "nino", "E", 1063719224, "nino", "E", 1063719506, "nino", "E", 1063724818, "nino", "E", 1063725314, "nino", "E", 1063725788, "nino", "E", 1063736086, "nino", "E", 1063737310, "nino", "E", 1063737329, "nino", "E", 1063737649, "nino", "E", 1063737713, "nino", "E", 1063737733, "nino", "E", 1063737916, "nino", "E", 1063737954, "nino", "E", 1063738221, "nino", "E", 1063738278, "nino", "E", 1063738420, "nino", "E", 1063738656, "nino", "E", 1063738783, "nino", "E", 1063739010, "nino", "E", 1063739101, "nino", "E", 1063739228, "nino", "E", 1063739412, "nino", "E", 1063739661, "nino", "E", 1063739702, "nino", "E", 1063739889, "nino", "E", 1063740237, "nino", "E", 1063740874, "nino", "E", 1063740978, "nino", "E", 1063744595, "nino", "E", 1063745009, "nino", "E", 1063745144, "nino", "E", 1063745192, "nino", "E", 1063745281, "nino", "E", 1063745526, "nino", "E", 1063745575, "nino", "E", 1063745674, "nino", "E", 1063746199, "nino", "E", 1063746320, "nino", "E", 1063746405, "nino", "E", 1063746661, "nino", "E", 1063746732, "nino", "E", 1063746826, "nino", "E", 1063751111, "nino", "E", 1063752855, "nino", "E", 1063754479, "nino", "E", 1063754548, "nino", "E", 1063754614, "nino", "E", 1063766685, "nino", "E", 1063766909, "nino", "E", 1063766984, "nino", "E", 1063767816, "nino", "E", 1063767979, "nino", "E", 1063809365, "nino", "E", 1063809552, "nino", "E", 1063909910, "kargh", "E", 1063910033, "kargh", "E", 1063910090, "kargh", "E", 1063923668, "nino", "E", 1063923785, "nino", "E", 1063923965, "nino", "E", 1063924865, "nino", "E", 1063983623, "nino", "E", 1063983715, "nino", "E", 1063984462, "nino", "E", 1063990470, "nino", "E", 1063990534, "nino", "E", 1063990745, "nino", "E", 1063990858, "nino", "E", 1063990944, "nino", "E", 1063991278, "nino", "E", 1064003128, "nino", "X", 1064016598, "nino", "E", 1064062312, "nino", "E", 1064062468, "nino", "E", 1064062767, "nino", "E", 1064089954, "nino", "X", 1064340638, "nino", "X", 1064507107, "nino", "X", 1064507597, "nino", "E", 1064507923, "nino", "E", 1064508369, "nino", "E", 1064508494, "nino", "E", 1064508725, "nino", "E", 1064527069, "nino", "E", 1064527145, "nino", "E", 1064527209, "nino", "E", 1064527353, "nino", "E", 1064527427, "nino", "E", 1064528972, "nino", "X", 1064535006, "nino", "X", 1064866969, "nino", "E", 1064936378, "nino", "P", 1064937077, "nino", "P", 1064937309, "nino", "P", 1064937483, "nino", "P", 1064937593, "nino", "P", 1064938741, "nino", "P", 1064938788, "nino", "P", 1064938808, "nino", "P", 1064941273, "nino", "P", 1064944704, "nino", "P", 1064944717, "nino", "P", 1064944855, "nino", "P", 1064945237, "nino", "P", 1064950223, "nino", "P", 1064950453, "nino", "P", 1064950554, "nino", "P", 1064953298, "nino", "P", 1064953338, "nino", "P", 1064953429, "nino", "P", 1064953507, "nino", "P", 1064953542, "nino", "P", 1064954639, "nino", "P", 1064954668, "nino", "P", 1064954865, "nino", "P", 1064954987, "nino", "P", 1064955021, "nino", "P", 1064956078, "nino", "P", 1064956106, "nino", "P", 1064956225, "nino", "P", 1064956339, "nino", "P", 1064956373, "nino", "P", 1064956423, "nino", "P", 1064957093, "nino", "P", 1064957829, "nino", "P", 1064959000, "nino", "P", 1064959192, "nino", "P", 1064959235, "nino", "P", 1064979143, "nino", "P", 1064979210, "nino", "P", 1064979747, "nino", "P", 1064979886, "nino", "P", 1064979981, "nino", "P", 1064980194, "nino", "P", 1064980298, "nino", "P", 1064980431, "nino", "P", 1064980474, "nino", "P", 1064980556, "nino", "P", 1064980603, "nino", "P", 1064980868, "nino", "P", 1064980975, "nino", "P", 1064981045, "nino", "P", 1064981208, "nino", "P", 1064981448, "nino", "P", 1065025314, "nino", "P", 1065025371, "nino", "P", 1065025473, "nino", "P", 1065025771, "nino", "P", 1065025867, "nino", "P", 1065025978, "nino", "P", 1065026534, "nino", "P", 1065026569, "nino", "P", 1065026635, "nino", "P", 1065026829, "nino", "P", 1065049209, "nino", "P", 1065105802, "nino", "P", 1065105885, "nino", "P", 1065106032, "nino", "P", 1065106222, "nino", "P", 1065109076, "nino", "P", 1065109139, "nino", "P", 1065109217, "nino", "P", 1065109258, "nino", "P", 1065109500, "nino", "P", 1065109540, "nino", "P", 1065109619, "nino", "P", 1065110006, "nino", "P", 1065110046, "nino", "P", 1065110094, "nino", "P", 1065110416, "nino", "P", 1065113031, "nino", "P", 1065113381, "nino", "P", 1065114075, "nino", "P", 1065114242, "nino", "P", 1065114301, "nino", "P", 1065114381, "nino", "P", 1065114448, "nino", "P", 1065114483, "nino", "P", 1065114537, "nino", "P", 1065114548, "nino", "P", 1065114680, "nino", "P", 1065121844, "nino", "P", 1065122203, "nino", "P", 1065122259, "nino", "P", 1065122312, "nino", "P", 1065122631, "nino", "P", 1065123979, "nino", "P", 1065124181, "nino", "P", 1065124258, "nino", "P", 1065124614, "nino", "P", 1065124648, "nino", "P", 1065124683, "nino", "P", 1065248985, "nino", "P", 1065249195, "nino", "P", 1065249384, "nino", "P", 1065289258, "nino", "P", 1065289600, "nino", "P", 1065289726, "nino", "P", 1065289840, "nino", "P", 1065289930, "nino", "P", 1065290038, "nino", "P", 1065290189, "nino", "P", 1065291520, "nino", "P", 1065291707, "nino", "E", 1065292530, "nino", "P", 1065292979, "nino", "P", 1065293837, "nino", "P", 1065294095, "nino", "P", 1065297906, "nino", "P", 1065298371, "nino", "P", 1065298427, "nino", "P", 1065298496, "nino", "P", 1065298530, "nino", "P", 1065298879, "nino", "P", 1065300255, "nino", "P", 1065300960, "nino", "P", 1065301066, "nino", "P", 1065301320, "nino", "P", 1065301439, "nino", "P", 1065301503, "nino", "P", 1065301523, "nino", "P", 1065301580, "nino", "P", 1065301594, "nino", "P", 1065301603, "nino", "P", 1065301618, "nino", "P", 1065301725, "nino", "P", 1065301735, "nino", "P", 1065301755, "nino", "P", 1065302087, "nino", "P", 1065302130, "nino", "P", 1065302197, "nino", "P", 1065302244, "nino", "P", 1065302307, "nino", "P", 1065303490, "nino", "P", 1065303530, "nino", "P", 1065303741, "nino", "P", 1065318178, "nino", "P", 1065318536, "nino", "P", 1065318620, "nino", "P", 1065320381, "nino", "P", 1065320550, "nino", "P", 1065320608, "nino", "P", 1065320701, "nino", "P", 1065320794, "nino", "P", 1065320847, "nino", "P", 1065320870, "nino", "P", 1065320981, "nino", "P", 1065321032, "nino", "P", 1065321092, "nino", "P", 1065321139, "nino", "P", 1065321469, "nino", "P", 1065321602, "nino", "P", 1065321673, "nino", "P", 1065321717, "nino", "P", 1065321742, "nino", "P", 1065321781, "nino", "P", 1065322258, "nino", "P", 1065322372, "nino", "P", 1065322451, "nino", "P", 1065323009, "nino", "P", 1065323342, "nino", "P", 1065323734, "nino", "P", 1065330750, "nino", "P", 1065330883, "nino", "P", 1065332822, "nino", "P", 1065374979, "nino", "P", 1065375129, "nino", "P", 1065375200, "nino", "P", 1065375246, "nino", "P", 1065375307, "nino", "P", 1065396024, "nino", "P", 1065396099, "nino", "P", 1065396142, "nino", "P", 1065396170, "nino", "P", 1067458096, "nino", "P", 1069539220, "nino", "P", 1078194342, "nino", "P", 1078194545, "nino", "P", 1078194670, "nino", "X", 1079633002, "nino", "P", 1082656451, "nino", "P", 1082661234, "nino", "P", 1082661304, "nino", "P", 1082661374, "nino", "P", 1082661401, "nino", "P", 1082661477, "nino", "P", 1082661529, "nino", "P", 1082661557, "nino", "P", 1082661834, "nino", "P", 1082662405, "nino", "P", 1082664776, "nino", "P", 1082664892, "nino", "P", 1082664931, "nino", "P", 1082664955, "nino", "P", 1082665292, "nino", "P", 1082665377, "nino", "P", 1082665429, "nino", "P", 1082666324, "nino", "P", 1082666392, "nino", "P", 1082666580, "nino", "P", 1082666659, "nino", "P", 1082666899, "nino", "P", 1082666928, "nino", "P", 1082667070, "nino", "P", 1082667095, "nino", "P", 1082668006, "nino", "P", 1082668358, "nino", "P", 1082668399, "nino", "P", 1082668448, "nino", "P", 1082668500, "nino", "P", 1082673423, "nino", "P", 1082673645, "nino", "P", 1082684309, "nino", "P", 1082684347, "nino", "P", 1082684704, "nino", "P", 1082684767, "nino", "P", 1082686263, "nino", "P", 1082686840, "nino", "P", 1082928147, "nino", "P", 1083258472, "nino", "P", 1083258650, "nino", "P", 1083598028, "nino", "P", 1083598048, "nino", "P", 1083598106, "nino", "P", 1083857968, "nino", "P", 1083858129, "nino", "X", 1083858212, "nino", "P", 1083858349, "nino", "P", 1083858494, "nino", "P", 1083858669, "nino", "P", 1083858761, "nino", "P", 1083859286, "nino", "P", 1083860144, "nino", "P", 1083860381, "nino", "P", 1083860539, "nino", "P", 1083861019, "nino", "P", 1083861137, "nino", "X", 1083862396, "nino", "P", 1083862422, "nino", "P", 1083862868, "nino", "P", 1083863076, "nino", "P", 1083863103, "nino", "P", 1083863158, "nino", "P", 1083863227, "nino", "P", 1083863937, "nino", "P", 1083864088, "nino", "P", 1083873154, "nino", "P", 1083873411, "nino", "P", 1083873442, "nino", "P", 1083873555, "nino", "P", 1083873580, "nino", "P", 1083873795, "nino", "P", 1083873820, "nino", "P", 1083873855, "nino", "P", 1083874065, "nino", "P", 1083874098, "nino", "P", 1083875485, "nino", "P", 1083875608, "nino", "P", 1083875679, "nino", "P", 1083875746, "nino", "P", 1083875794, "nino", "P", 1083875835, "nino", "P", 1083875866, "nino", "P", 1083875913, "nino", "P", 1083875975, "nino", "P", 1083876107, "nino", "P", 1084028988, "nino", "P", 1084029181, "nino", "P", 1084029259, "nino", "P", 1084029329, "nino", "P", 1084029422, "nino", "P", 1084126459, "nino", "P", 1084126572, "nino", "P", 1084126589, "nino", "P", 1084126724, "nino", "P", 1084126739, "nino", "P", 1084126983, "nino", "P", 1084127900, "nino", "P", 1084203373, "nino", "P", 1084632381, "nino", "P", 1084632414, "nino", "P", 1084632497, "nino", "P", 1084632581, "nino", "P", 1084632807, "nino", "P", 1084633027, "nino", "P", 1084748917, "nino", "P", 1084748992, "nino", "P", 1084748998, "nino", "P", 1085159763, "nino", "P", 1085159854, "nino", "P", 1085160017, "nino", "P", 1085160816, "nino", "P", 1085160866, "nino", "P", 1085160974, "nino", "P", 1085161037, "nino", "P", 1085161736, "nino", "P", 1085161992, "nino", "P", 1085162080, "nino", "P", 1086194017, "nino", "P", 1086194170, "nino", "P", 1086194305, "nino", "X", 1091479875, "nino", "P", 1091479970, "nino", "X", 1091480123, "nino", "X", 1091480259, "nino", "P", 1091480303, "nino", "P", 1091481982, "nino", "P", 1091482071, "nino", "P", 1091482111, "nino", "P", 1092771706, "nino", "P", 1092771955, "nino", "P", 1094176108, "nino", "P", 1094176212, "nino", "P", 1094183416, "nino", "P", 1094183436, "nino", "P", 1096928096, "nino", "P", 1096928187, "nino", "P", 1096928256, "nino", "P", 1096928485, "nino", "P", 1096928525, "nino", "P", 1098908388, "nino", "P", 1098908455, "nino", "P", 1098908639, "nino", "P", 1098908781, "nino", "P", 1098909190, "nino", "P", 1098909550, "nino", "P", 1098909590, "nino", "P", 1098909675, "nino", "P", 1098909743, "nino", "P", 1098909796, "nino", "P", 1098915869, "nino", "P", 1098915932, "nino", "P", 1098915957, "nino", "P", 1098928170, "nino", "P", 1098928233, "nino", "P", 1098928318, "nino", "P", 1098928447, "nino", "P", 1098928572, "nino", "P", 1098933733, "nino", "P", 1098933772, "nino", "P", 1098935185, "nino", "P", 1098936605, "nino", "P", 1098939145, "nino", "P", 1098979605, "nino", "P", 1098979845, "nino", "P", 1098980484, "nino", "P", 1098980653, "nino", "P", 1098980782, "nino", "P", 1098980868, "nino", "P", 1098981025, "nino", "P", 1098981179, "nino", "P", 1098981412, "nino", "P", 1098982270, "nino", "P", 1098982427, "nino", "P", 1098982773, "nino", "P", 1098982932, "nino", "P", 1098985160, "nino", "P", 1098985245, "nino", "P", 1098985686, "nino", "P", 1098985964, "nino", "P", 1098987031, "nino", "P", 1098987184, "nino", "P", 1098989573, "nino", "P", 1099002615, "nino", "P", 1099002772, "nino", "P", 1099002987, "nino", "P", 1100105602, "nino", "P", 1100572493, "nino", "P", 1106845136, "nino", "P", 1106845322, "nino", "P", 1106845392, "nino", "P", 1106845495, "nino", "P", 1106845573, "nino", "P", 1106849081, "nino", "P", 1106850041, "nino", "P", 1106850109, "nino", "P", 1106861890, "nino", "P", 1106867623, "nino", "P", 1106867987, "nino", "X", 1107015968, "nino", "P", 1107016317, "nino", "X", 1112384053, "nino", "P", 1112389785, "nino", "P", 1112393776, "nino", "P", 1112393960, "nino", "P", 1112394195, "nino", "P", 1112395275, "nino", "P", 1112395380, "nino", "P", 1112395748, "nino", "P", 1112395875, "nino", "P", 1112395944, "nino", "P", 1112396017, "nino", "P", 1112396952, "nino", "P", 1112397650, "nino", "P", 1112397795, "nino", "P", 1112397908, "nino", "P", 1112398092, "nino", "P", 1112398842, "nino", "P", 1112399006, "nino", "P", 1112399034, "nino", "P", 1112399163, "nino", "P", 1112401557, "nino", "P", 1113430776, "nino", "P", 1113594377, "nino", "P", 1113606134, "nino", "P", 1113606246, "nino", "P", 1113606367, "nino", "P", 1113606854, "nino", "P", 1134002012, "nino", "P", 1134002245, "nino", "X", 1149537022, "zwoc", "P", 1149537082, "zwoc", "P", 1149537112, "zwoc", "P" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
