<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:contains-deep-instance">
         X[M] /*
  Legacy call
 */

return Call (\$\{Lib:inv\}, "contains-deep-instance");
      </Core:Property>
      <Core:Property property="merry:lib:filter-instance">
         X[M] /*
  D= Filter array such that it only contains children of a given ur-object.

  Arguments
    \$objects: object *
      Array of objects
    \$parent: object
      Parent object
    \$deep: boolean (int)
      If set, find any parent not just the immediate one.

  Returns
    object *
      Objects that have the appropriate parent.
 */

object obj, * result;
int i;

if (! \$objects)
\{
  Error("Argument \$objects invalid.");
\}
if (! \$parent)
\{
  Error("Parent argument \$parent invalid.");
\}

result = (\{ \});

for (i = 0; i \< sizeof(\$objects); i++)
\{
  obj = \$objects [i];

  if (\$deep)
  \{
    if (! Call (\$\{Lib:ur\}, "has-parent", \$what: obj))
      /* \$parent passed implicitly */
    \{
      continue;
    \}
  \}
  else
  \{
    if (
      (! obj."base:urparent") \|\|
      (obj."base:urparent" != \$parent)
    )
    \{
      continue;
    \}
  \}

  result += (\{ obj \});
\}

return result;
      </Core:Property>
      <Core:Property property="merry:lib:has-parent">
         X[M] object curr;

/*
  Does target have \$parent as an urparent somewhere in the chain?

  \$what: object
    Object to check
  \$parent: object
    Potential urparent
 */

if (! \$what)
\{
  Error(this."base:objectname" + ": Argument \$what invalid.");
\}
if (! \$parent)
\{
  Error(this."base:objectname" + ": Argument \$parent invalid.");
\}

curr = \$what;
while (curr."base:urparent" != nil)
\{
  curr = curr."base:urparent";
  if (curr == \$parent)
    return TRUE;
\}

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1078759350, "xanom", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1040037468" state="Open" user="xanom">
           Utilities dealing with parents and inheritance.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
