<object clone="/obj/properties" owner="zwoc">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Lib:NIP:lib:presents
 Email:         kalle@marrach.skotos.net
 Revision:      8.25
 Generated:     Sun Sep 25 01:46:04 2011 on Jonkichi
 Last revision: Sat Sep 10 20:18:29 2005 by zwoc (X)



(Do not modify #list# -- it is automatically constructed.)


------------------------------------------------------------------------------------------------------
 lib:core:add_present (M) This script is used to add an object to the presents mapping
                          "nip:trait:present:objects". Each object has an array of words that will
                          'trigger' the offering of the particular object.
 lib:core:sub_present (M) This script is used to remove an object from the presents mapping
                          "nip:trait:present:objects".
 lib:handler:ask      (M) This script is part of the core of the ask \<npc\> for \<item\> functionality.
 lib:handler:ask-for  (M) This script is part of the core of the ask \<npc\> for \<item\> functionality.
------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="dependency:needs">
         (\{ \<Lib:NIP:lib:asking\> \})
      </Core:Property>
      <Core:Property property="done:message">
         "The 'presents' handler has been added to this CNPC. This means you can now attach things that the NPC will 'hand out' to people. For instance, 'scrolls' for courier CNPC's and such."
      </Core:Property>
      <Core:Property property="init:merry">
         (\{ "lib:handler:ask-for", "lib:handler:ask", "lib:core:add_present", "lib:core:sub_present" \})
      </Core:Property>
      <Core:Property property="init:properties">
         ([ "nip:trait:present:objects":([  ]) ])
      </Core:Property>
      <Core:Property property="log:creator">
         "Kalle Alm"
      </Core:Property>
      <Core:Property property="merry:lib:core:add_present">
         X[M] /*

  D=This script is used to add an object to the presents mapping "nip:trait:present:objects". Each object has an array of words that will 'trigger' the offering of the particular object.

  Expected arguments:
    \$object: object reference to whatever should be offered

  Optional arguments:
    \$names:  string array of references. If none is specified, the "details:default:snames" property is used.

*/

if( !\$object  ) \{
  error("Argument \$object is missing in call to add_present.");
\}

if (NRefDetail(\$object) == nil) \{
  error("The object " + name(\$object) + " does not have a prime detail!");
\}

if( !\$names )
  /* use the snames from the object in question */
  \$names = Get( \$object, "details:"+NRefDetail(\$object)+":snames" );

if( this."nip:trait:present:objects" )
  this."nip:trait:present:objects"[\$object] = \$names;
else
  this."nip:trait:present:objects" = ([ \$object : \$names ]);
      </Core:Property>
      <Core:Property property="merry:lib:core:sub_present">
         X[M] /*

  D=This script is used to remove an object from the presents mapping "nip:trait:present:objects".

  Expected arguments:
    \$object: object to remove

  See lib:core:add_present for further information.

*/

if( this."nip:trait:present:objects" ) this."nip:trait:present:objects" -= (\{ \$object \});
      </Core:Property>
      <Core:Property property="merry:lib:handler:ask">
         X[M] /*

  D=This script is part of the core of the ask \<npc\> for \<item\> functionality.

  This script is called when no item is specified. A message stating which items the NPC can hand out will be displayed.

*/

mapping objects;
string list, and;
object *ind;
int i;

objects = this."nip:trait:present:objects";

/* Do we have anything to offer? */
if( !objects \|\| !map_sizeof( objects ))
  /* Nope. */
  return TRUE;

ind = map_indices( this."nip:trait:present:objects" );
list = "";
and = "";
for( i = 0; i \< sizeof( ind ); i++ )\{
  list += and + Describe( ind[i] );
  and = i+2 \< sizeof( ind ) ? ", " : " or ";
\}

EmitTo( \$actor, Describe( this, nil, nil, STYLE_DEFINITE ) + " can give you " + list + "." );
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:handler:ask-for">
         X[M] /*

  D=This script is part of the core of the ask \<npc\> for \<item\> functionality.

*/

constant objects = this."nip:trait:present:objects";

string word, adverb;
object *ind, *matches;
int i;

/* Do we have anything to offer? */
if( !objects \|\| !map_sizeof( objects ))
  /* Nope. */
  return TRUE;

/* Pick the LAST word from \$(for:words), as someone could be funny,
   and type 'ask cook for a deliciously prepared cookie' but keep the
   second last word in case we need to go into adverb details. */

word = \$(for:words)[ sizeof( \$(for:words) )-1 ];

if( sizeof( \$(for:words) ) \> 1 )
  adverb = \$(for:words)[ sizeof( \$(for:words) )-2 ];
else
  adverb = nil;

/* Step through the objects and see if we find any matches for 'word' */

ind = map_indices( objects );
matches = (\{ \});

for( i = 0; i \< sizeof( ind ); i++ )\{

  if( arr_to_set( objects[ind[i]] )[word] )\{
    /* Found a match. */

    /* Check if \$actor has just asked us for something. */
    \$spam = this."npc:spam:presents";
    if( \$spam \&\& \$spam[\$actor] \&\& \$spam[\$actor] + 30 \> time() ) \{
      EmitTo( \$actor, "You just asked "+Describe( this )+" for something. Please ask again later." );
      return FALSE;
    \} else
      matches += (\{ ind[i] \});
  \}

\}

if( sizeof( matches )) \{
  if( adverb \&\& sizeof( matches ) \> 1 ) \{
    for( i = 0; i \< sizeof( matches ); i++ )
      if( !arr_to_set( Get( matches[i], "details:"+NRefDetail(matches[i])+":adjectives" ))[adverb] )
        matches[i] = nil;

    matches -= (\{ nil \});
  \}

  if( sizeof( matches ) \> 1 )
    matches = (\{ matches[random( sizeof( matches ))] \});

  if( sizeof( matches )) \{

    object item;

    if( !random( 60 ) \&\& \$spam ) \{
      \$l = map_indices( \$spam );
      for( \$i = 0; \$i \< sizeof( \$l ); \$i++ )
        if( \$spam[\$l[\$i]] + 30 \< time() ) this."npc:spam:presents" -= (\{ \$l[\$i] \});
    \}
    this."npc:spam:presents" = \$spam ? \$spam + ([ \$actor : time() ]) : ([ \$actor : time() ]);

    if (!this."nip:trait:presents:extended" \|\| ::presents_extension_allow(\$what: matches[0])) \{
      item = Spawn( matches[0] );
      EmitIn( this."base:environment", Describe( this ) + " gives " + Describe( \$actor ) + " " + Describe( item ) + ".", \$actor );
      EmitTo( \$actor, Describe( this ) + " gives you " + Describe( item ) + "." );
      item."base:environment" = \$actor;
    \}
    return FALSE;
  \}
\}

/* Found nothing. */
EmitTo( \$actor, Describe( this ) + " doesn't have that. Try 'ask "+Describe( this ) + "'." );
      </Core:Property>
      <Core:Property property="property:map">
         ([ "nip:trait:present:objects":6 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1054575812, "zwoc", "X", 1055461534, "zwoc", "E", 1055461731, "zwoc", "E", 1055461761, "zwoc", "E", 1055462458, "zwoc", "E", 1055462478, "zwoc", "E", 1055462664, "zwoc", "E", 1055462676, "zwoc", "E", 1055462755, "zwoc", "E", 1055462963, "zwoc", "E", 1055462975, "zwoc", "E", 1055463329, "zwoc", "E", 1055522373, "zwoc", "E", 1055522384, "zwoc", "E", 1055522414, "zwoc", "E", 1055522429, "zwoc", "E", 1055522836, "zwoc", "E", 1055546050, "zwoc", "X", 1067298943, "zwoc", "P", 1091469137, "zwoc", "P", 1091469241, "zwoc", "P", 1091469255, "zwoc", "P", 1091899263, "zwoc", "P", 1093304693, "zwoc", "P", 1099753751, "zwoc", "P", 1126397801, "zwoc", "P", 1126397848, "zwoc", "P", 1126397890, "zwoc", "P", 1126397909, "zwoc", "X" \})
      </Core:Property>
      <Core:Property property="{email}">
         "kalle@marrach.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">8</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1126397909
      </Core:Property>
      <Core:Property property="{sub_rev}">25</Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
