<object clone="/obj/properties" owner="Generic">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Lib:NIP:lib:trading
 Email:         kalle@marrach.skotos.net
 Revision:      1.29
 Generated:     Sun Sep 25 01:46:12 2011 on Jonkichi
 Last revision: Thu Jun 17 21:09:58 2010 by tonyd (E)



(Do not modify #list# -- it is automatically constructed.)


----------------------------------------------------------------------------------------------------------------------
 lib:core_clean_currency       (M) Clean a float currency value (\$value) and return string result.
 lib:core_trading_deduct       (M) Deduct money from \$actor, based on a specific CDO (cash data object).
 lib:core_trading_query_assets (M) Query an object on their assets, based on a specific CDO (cash data object).
 lib:handler-post:ask          (M) Extended ask response, which checks for a 'item list' object.
 lib:handler:ask-for           (M) Replacement for the "presents" lib 'ask-for' handler, this script will take into
                                   account cost of item. The ability to hand out "free" things is lost, however,
                                   and a customized merge of this and the presents v. is required in order to
                                   implement such.
 react:read-what               (M) Read a price menu.
 react:take                    (M) Accept and pay for an object.
----------------------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="dependency:needs">
         (\{ \<Lib:NIP:lib:presents\> \})
      </Core:Property>
      <Core:Property property="done:message">
         "The 'trading' library has been successfully implemented into your NPC. You will need to configure a number of settings in order to enable this feature:\\n\\n nip:trait:trading:object -- Set to point to the cash data object. Read about cash data objects on TWiki (builder's) on the NIP System Reference."
      </Core:Property>
      <Core:Property property="init:merry">
         (\{ "react:take", "lib:core_clean_currency", "lib:core_trading_deduct", "lib:core_trading_query_assets", "lib:handler:ask-for" \})
      </Core:Property>
      <Core:Property property="log:creator">
         "Kalle Alm"
      </Core:Property>
      <Core:Property property="merry:lib:core_clean_currency">
         X[M] /*

  D=Clean a float currency value (\$value) and return string result.

  Required arguments:
    \$value (float or int): Amount of cash.

  Supported arguments:
    \$hide_decimals (bool): If set, and the .XX is 00, it will be hidden.

  Return value:
    String result.

*/

int sz;
string money;

money = format_float(typeof( \$value ) == T_FLOAT ? \$value : Flt(\$value)/100.0, 2);
sz = strlen(money);

if (money[..1] == "0.") \{
  money = money[1..];
\}

if (\$hide_decimals \&\& money[strlen(money)-3..] == ".00") \{
  money = money == ".00" ? "0" : money[..strlen(money)-4];
\}

return money;
      </Core:Property>
      <Core:Property property="merry:lib:core_trading_deduct">
         X[M] /*

  D=Deduct money from \$actor, based on a specific CDO (cash data object).

  Required arguments:
    \$CDO   (object): The CDO reference.
    \$query (int):    The amount of money requested.
    \$item  (object): The item being sold.
    \$actor (object): The person for which money should be deducted.

  Return values:
    TRUE if the purchase went OK. FALSE if not.
    (core_trading_deduct will emit a message to \$actor if things go bad)

*/

constant prefix = Str(\$option."cash:prefix");
constant suffix = Str(\$option."cash:suffix");

string message, npc;

npc = Describe(this);

/*
 * Firstly, query the purchase to ensure the actor has
 * cash to pay for it.
 */

if( !::core_trading_query_assets() )
\{
  /*
   * Not enough cash.
   */
  message = \$option."cash:announce-shortage";
  if( !message )
    message = \$CDO."cash:announce-shortage";
  if( !message )
    message = "You do not have enough \$(name) for \$(item).";
  message = replace_strings( message, "\$(name)", \$option."cash:name", "\$(item)", Describe(\$item) );

  EmitTo( \$actor, message );
  return FALSE;
\}

\{

  /*
   * Enough cash. Firstly, find the most accurate amount of
   * money with as little change back as possible.
   */

  int   physical, sz, i;
  int rest, sum, prest, f;
  int *range, *worth;
  object *snatched, *change, *objects;
  mapping currency, cobject;
  string money;

  physical = \$option."cash:physical";
  change   = (\{ \});
  snatched = (\{ \});

  if( \$cash_intrinsic )
  \{
   /*
    * Well, that's easy. No change, and the ability to
    * split freely. Credit cards rock! :)
    */
   Set(\$actor, \$cash_intrinsic, Int(Get(\$actor, \$cash_intrinsic))-\$query);
   \$using                      = nil;
   \$option                     = \$CDO;
   sum                         = \$query;
  \} else if( !physical )
  \{
    /*
     * Well, that's easy. No change, and the ability to
     * split freely. Credit cards rock! :)
     */
    \$value_hits."cash:balance" -= \$query;
    \$using                      = \$value_hits;
    sum                         = \$query;

  \} else \{
    /*
     * Physical payment, including bills and coins and
     * returned change and such.
     * ---
     * The \$value_hits property will, in the case of
     * physical, be a mapping with the values;
     * ([ \<worth\> : (\{ \<physical object(s)\>, ... \}) ])
     */
    cobject  = \$option."cash:object";
    currency = reverse_mapping( cobject );
    range    = \$option."cash:range";
    worth    = map_indices( \$value_hits ); /* \<-- needed? */
    sz       = sizeof( range );
    sum      = 0;
    rest     = \$query;

    for( i = sz-1; i \> -1;  i-- )
      if( \$value_hits[ range[i] ] )
        while( rest \> 0 \&\& sizeof( \$value_hits[ range[i] ] ))
        \{
          sum                     += range[i];
          rest                    -= range[i];
          snatched                += (\{ \$value_hits[ range[i] ][0] \});
          \$value_hits[ range[i] ] = \$value_hits[ range[i] ][1..];
        \}

    /*
     * Now, the actor is probably about to hand out unnecessary
     * change for the purchase. So we'll step through the
     * offered (snatched) array and remove excess additions.
     */
    sz = sizeof( snatched );
    for( i = sz-1; i \> -1; i-- )
    \{
      f = cobject[ snatched[i]."core:ur:parent" ];
      if( rest + f \< 1 )
      \{
        sum         -= f;
        rest        += f;
        snatched[i] = nil;
      \}
      if( rest == 0 )
        i = -1;
    \}
    snatched -= (\{ nil \});

    if( rest \> 0 \|\| !sizeof( snatched ))
    \{
      /*
       * Not enough cash.
       * (In reality, we've already checked whether actor
       * has cash -- and they do. Something went awry
       * with paying/etc. So we say "no cash" and let them
       * assist or similar, so this obvious bug can be
       * dealt with.
       */
      message = \$option."cash:announce-shortage";
      if( !message )
        message = \$CDO."cash:announce-shortage";
      if( !message )
        message = "You do not have enough \$(name) for \$(item).";
      message = replace_strings( message, "\$(name)", \$option."cash:name", "\$(item)", Describe(\$item) );

      EmitTo( \$actor, message );
      return FALSE;
    \}

    /*
     * The NPC has unlimited amount of money, which
     * makes paying back fairly simple. Step from
     * biggest-worth to lowest-worth and keep adding
     * until we have an exact match of the to-be returned
     * in change.
     */

    rest  = -rest;
    prest = rest;
    sz    = sizeof( range );

    for( i = 0; i \< sz; i++ )
      while( range[i] \<= rest )
      \{
        rest -= range[i];
        change += (\{ Spawn( currency[ range[i] ] ) \});
      \}

    if( rest \>= 1 )
    \{
      EmitTo( \$actor, "[OOC: You have been given TOO LITTLE change back. This is NOT an IC occurence, but rather a miscalculation! Assist about this immediately, and include this message! You're missing: " + Str(rest) + "; the NPC in question is: "+dump_value(this)+"; property \\"change:fault\\".]" );
      this."change:fault" = dump_value(\$actor)+" lost "+Str(rest)+" "+ctime(time())+".";
    \}

    \$using = snatched;
  \}

  message = \$option."cash:announce-pay";
  if( !message )
    message = "You pay \$(npc) \$(prefix)\$(paid)\$(suffix).";

  money = ::core_clean_currency(\$value: sum);

  if(\$using) \{
    message = replace_strings( message, "\$(npc)", npc, "\$(prefix)", prefix, "\$(suffix)", suffix, "\$(paid)", money, "\$(using)", Describe(\$using, nil, \$actor) );
  \} else \{
    message = replace_strings( message, "\$(npc)", npc, "\$(prefix)", prefix, "\$(suffix)", suffix, "\$(paid)", money, "\$(using)", "your money pouch" );
  \}
  EmitTo( \$actor, message );

  /*
   * Slay the money used to pay for the item,
   * if any.
   */
  sz = sizeof( snatched );
  for( i = 0; i \< sz; i++ ) \{
    snatched[i].pending_slayage = TRUE;
    Slay( snatched[i] );
  \}

  if( sizeof(change) )
  \{
    /*
     * We're giving the actor back some cash in change.
     * Emit appropriately, according to the settings in
     * the CDO.
     */
    message = \$CDO."cash:announce-change";
    if( !message )
      message = \$option."cash:announce-change";
    if( !message )
      message = "\$(npc) gives you back \$(prefix)\$(change)\$(suffix) in change.";

    money = ::core_clean_currency(\$value: prest);

    message = replace_strings( message, "\$(npc)", npc, "\$(prefix)", prefix, "\$(suffix)", suffix, "\$(change)", money );
    EmitTo( \$actor, message );

    /*
     * Physically put the change in the actor's inventory.
     */
    sz = sizeof( change );
    for( i = 0; i \< sz; i++ )
      change[i]."base:environment" = \$actor;
  \}

\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:core_trading_query_assets">
         X[M] /*

  D=Query an object on their assets, based on a specific CDO (cash data object).

  Required arguments:
    \$CDO   (object): The CDO reference.
    \$query (int):    The amount of money requested. In the case of US currency, 1 dollar = 100 (cents).
    \$actor (object): The person who's assets are to be examined.

  Return values:
    TRUE if the requested amount of money is found. FALSE if not.

  Note:
    This function is called by the "deduct" function to prepare for the
    actual purchase. It examines the actor and finds out the most default
    valid payment alternative and sets the data.

*/

/*
 * Base sanity checks.
 */
if( !\$CDO )
  /*
   * No Cash Data Object.
   * Revert to "You can't afford..."
   */
  return FALSE;

if( !\$query )
  /*
   * No money request?
   * Anyone can afford nil bucks!
   * Revert to "Afford."
   */
  return TRUE;

\{
  /*
   * Find our options in the CDO, and step through the list
   * left-\>right until we find a method of payment which
   * 1) the actor has available, and 2) the actor can afford
   * the full payment using.
   * Support for divided payment is unallowed.
   */

  object *cash_options, *inv;
  int i, j, sz, isz, physical;
  int val;
  mixed v;

  /*
   * Not doing deep-inventory; if the actor has his cred card
   * or cash in a pocket or similar, chances are he doesn't want
   * to use it.
   */
  inv = \$actor."base:inventory";
  isz = sizeof( inv );

  cash_options = \$CDO."cash:options";
  sz = sizeof( cash_options );
  \$valid = (\{ \});

  for( i = 0; i \< sz; i++ ) \{
    \$option = cash_options[i];
    physical = \$option."cash:physical";
    val = 0;
    \$value_hits = ([ ]);

    \$cash_object = (physical ? \$option."cash:object" : ([ \$option."cash:object" : TRUE ]));

    for( j = 0; j \< isz; j++ ) \{
      if(!inv[j].pending_slayage \&\& ( v = \$cash_object[ inv[j]."core:ur:parent" ] ) != nil )
        if( physical ) \{
          if( \$value_hits[ v ] )
            \$value_hits[ v ] += (\{ inv[j] \});
          else
            \$value_hits[ v ] = (\{ inv[j] \});

          val += Int( v );
        \} else \{
          /*
           * Non-physical payment; we only allow one "check"
           * here -- that is a weakness that may have to be
           * addressed eventually.
           */
          val = Int( inv[j]."cash:balance" );
          \$value_hits = inv[j];
          j = isz;
        \}

    \}

    if( val )
    \{
      /*
       * We found worth in the current payment option --
       * did we find enough to return a "yes"?
       */
      \$valid += (\{ \$option \});
      if( val \>= \$query )
        /*
         * We got it. Return a confirmed.
         */
        return TRUE;

    \}
     else
    if( !i )
      \$valid += (\{ \$option \});
  \}

  /*
   * They don't seem to be carrying any cash so far
   * Check if there is an intrinsic property in their bodies allowing them to pay
   */
  if(\$CDO."cash:intrinsic") \{
   \$cash_intrinsic = \$CDO."cash:intrinsic";
   if(Int(Get(\$actor, \$CDO."cash:intrinsic")) \>= \$query) return TRUE;
  \}

  /*
   * We've gone through every payment alternative and
   * found nothing. Report this.
   */
  \$option = cash_options[0];

  return FALSE;
\}
      </Core:Property>
      <Core:Property property="merry:lib:handler-post:ask">
         X[M] /*

  D=Extended ask response, which checks for a 'item list' object.

  If the property "nip:trait:trading:list" is set to an object, that object will be handed out to people by request, containing a price list.
  Additionally, the property "nip:trait:trading:detail" may be set, if the detail which should be written upon is not the prime detail of the "nip:trait:trading:list" object.
  The property "nip:trait:trading:head" can be set to some text that is appended before the price list.
  The property "nip:trait:trading:foot" can be set to some text appended after the price list.

*/

string desc;

if( !this."nip:trait:trading:list" )
  /*
   * No trading list object. Ciao.
   */
  return TRUE;

desc = Describe( this."nip:trait:trading:list" );

EmitTo( \$actor, TAG( "[" + capitalize( this."base:pronoun" ) + " can also give you " + desc + ".]", "imp" ));
      </Core:Property>
      <Core:Property property="merry:lib:handler:ask-for">
         X[M] /*

  D=Replacement for the "presents" lib 'ask-for' handler, this script will take into account cost of item. The ability to hand out "free" things is lost, however, and a customized merge of this and the presents v. is required in order to implement such.
  Contact me if you are in need of this. Currently, I see no requirement for it which is why I am not putting the feature in right away. kalle@marrach.skotos.net

  This script will look for a few values in the object being offered. This object will _need_ to have these values set, otherwise the NPC will not be able to sell them:

    nip:item:cost  (int) - the cost of this item.

  If the property "nip:trait:trading:list" is set to an object, that object will be handed out to people by request, containing a price list.
  Additionally, the property "nip:trait:trading:detail" may be set, if the detail which should be written upon is not the prime detail of the "nip:trait:trading:list" object.
  The property "nip:trait:trading:head" can be set to some text that is appended before the price list.
  The property "nip:trait:trading:foot" can be set to some text appended after the price list.

*/

mixed objects;
string word, adjective, message;
object *ind, *matches, CDO;
int i, sz;
int cost;

objects = this."nip:trait:present:objects";
CDO     = this."nip:trait:trading:object";

/* Grab global properties from CDO. */
\$hide_decimals = CDO."cash:hide-decimals";

if( !CDO )
\{
  /*
   * We don't have a Cash Data Object!
   * Give the actor a lame "out of stock" message
   * and, if they're SH enabled, a hint as to why.
   */
  EmitTo( \$actor, "Unfortunately, "+Describe(this)+" is currently out of stock on everything! Come back later." );
  if( \$actor."udat:host" )
    EmitTo( \$actor, "[\<StoryHost\> HINT]: This nipper doesn't have a cash data object. The property for this object is 'nip:trait:trading:object' and should point to an object set up accordingly. See Builder's TWiki for further information on this subject." );
  return FALSE;
\}

/* Do we have anything to sell? */
if( !objects \|\|
    !map_sizeof( objects ))
  /* Nope. */
  return TRUE;

/* Pick the LAST word from \$(for:words), as someone could be funny,
   and type 'ask cook for a deliciously prepared cookie' but keep the
   second last word in case we need to go into adjective details. */

word = \$(for:words)[ sizeof( \$(for:words) )-1 ];

if( sizeof( \$(for:words) ) \> 1 )
  adjective = \$(for:words)[ sizeof( \$(for:words) )-2 ];
else
  adjective = nil;

/* Step through the objects and see if we find any matches for 'word' */

ind = map_indices( objects );
matches = (\{ \});
sz = sizeof( ind );

for( i = 0; i \< sz; i++ )
\{
  if( arr_to_set( objects[ind[i]] )[word] )\{
    /* Found a match. */

    /*
     * We are not doing a "spam check", since the \$actor
     * is paying for each item anyway.
     */
    matches += (\{ ind[i] \});
  \}
\}

if( sizeof( matches ))
\{
  if( adjective \&\& sizeof( matches ) \> 1 )
  \{
    for( i = 0; i \< sizeof( matches ); i++ )
      if( !arr_to_set( Get( matches[i], "details:"+NRefDetail(matches[i])+":adjectives" ))[adjective] )
        matches[i] = nil;

    matches -= (\{ nil \});
  \}

  if( sizeof( matches ) \> 1 )
    matches = (\{ matches[random( sizeof( matches ))] \});

  if( sizeof( matches ))
  \{
    /*
     * We have found a matching item for the \$actor.
     * Let's check if it's got valid cost settings.
     */
    \$item = Spawn( matches[0] );

    if( typeof( \$item."nip:item:cost" ) != T_INT )
    \{
      /*
       * Nope. Let's say it's "out of stock", and additionally,
       * if \$actor is a storyhost, give him advise on why.
       */
      EmitTo( \$actor, "Unfortunately, "+Describe(\$item)+" is currently out of stock." );
      if( \$actor."udat:host" )
        EmitTo( \$actor, "[\<StoryHost\> HINT]: This is because the item does not have a cost setting.\\nThe property for this setting is 'nip:item:cost'. However, set 'export:nip:item:cost' to ensure that all UrChildren get the property as well." );
      Slay( \$item );
      return FALSE;
    \}

    cost = \$item."nip:item:cost";

    if( !cost )
    \{
      /*
       * This item is free.
       */
      \$spam = this."npc:spam:presents";
      if( \$spam \&\&
          \$spam[\$actor] \&\&
          \$spam[\$actor] + 30 \> time() ) \{
        EmitTo( \$actor, "You just asked "+Describe( this )+" for something. Please ask again later." );
        Slay( \$item );
        return FALSE;
      \}
      this."npc:spam:presents" = \$spam ? \$spam + ([ \$actor : time() ]) : ([ \$actor : time() ]);

      EmitIn( this."base:environment", Describe( this ) + " gives " + Describe( \$actor ) + " " + Describe( \$item ) + ".", \$actor );
      EmitTo( \$actor, Describe( this ) + " gives you " + Describe( \$item ) + "." );
      \$item."base:environment" = \$actor;
      return FALSE;
    \}

    /*
     * There is a 'cost' value. Good! Let's see if
     * \$actor has the proper amount of cash.
     */
    if( ::core_trading_query_assets(\$CDO: CDO, \$query: cost))
    \{
      /*
       * The actor has enough cash to pay for this item.
       * Grand! Let's offer it to him and set a temp-hook
       * in the object we sell for a react. We hold it for 60
       * seconds before we slay it and consider the trade aborted.
       * Additionally, we announce the price to actor.
       */
      \$item."merry:inherit:react:take" = FindMerry( this, "react", "take" );
      \$item."base:environment" = this;
      \$item."nip:item:cdo" = CDO;

      Act( this, "offer", \$who: \$actor, \$what: (\{ \$item \}) );

      message = CDO."cash:announce-cost";
      if( !message )
        message = "This will cost you \$(prefix)\$(cost)\$(suffix).";

      message = replace_strings( message, "\$(prefix)", Str(\$option."cash:prefix"), "\$(suffix)", Str(\$option."cash:suffix"), "\$(cost)", ::core_clean_currency(\$value: cost) );
      EmitTo( \$actor, message );

      \$delay(60, FALSE, "78bb");
      if( \$item \&\&
          \$item."base:environment" == this )
        Slay(\$item);
    \} else \{
      /*
       * Not enough cash.
       */
      message = \$option."cash:announce-shortage";
      if( !message )
        message = CDO."cash:announce-shortage";
      if( !message )
        message = "You do not have enough \$(name) for \$(item).";
      message = replace_strings( message, "\$(name)", \$option."cash:name", "\$(item)", Describe(\$item) );

      EmitTo( \$actor, message );
      Slay(\$item);
    \}

    return FALSE;
  \}
\}

/*
 * Found nothing so far. See if we have a price menu.
 * Maybe that's what's being requested.
 */
if( this."nip:trait:trading:list" )
\{
  /*
   * An object is set, at least.
   */
  object o;
  string prime;

  o = this."nip:trait:trading:list";
  prime = NRefDetail( o );

  if(( !adjective \|\|
       Get( o, "details:" + prime + ":adjective:" + adjective )) \&\&
      Get( o, "details:" + prime + ":sname:" + word ))
  \{
    /*
     * Seems they asked for a menu!
     * Create one.
     */
    string detail, prefix, suffix;
    object *list;

    \$option = CDO."cash:options"[0];
    prefix  = \$option."cash:prefix";
    suffix  = \$option."cash:suffix";
    o       = Spawn( o );
    detail  = this."nip:trait:trading:detail";
    if( !detail )
      detail = prime;

    /*
     * Let's write the head (if any).
     */
    o."nip:item:head" = this."nip:trait:trading:head";

    /*
     * Print menu.
     */
    list = map_indices( objects );
    sz   = sizeof( list );

    \$content = (\{ (\{ "item", "price" \}) \});

    for( i = 0; i \< sz; i++ )
      \$content += (\{ (\{ Describe( list[i] ), (prefix ? prefix : "") + ::core_clean_currency(\$value: list[i]."nip:item:cost") + (suffix ? " " + suffix : "") \}) \});

    o."nip:item:list" = ascii::table(\$ignoreseparator: "top bottom left right");

    /*
     * Write the foot, if any.
     */
    o."nip:item:foot" = this."nip:trait:trading:foot";

    /*
     * Set the inherit replacement for read.
     */
    Set( o, "merry:inherit:react:read-what", \$\{Lib:NIP:lib:trading\} );

    /*
     * Move into trade NPC's environment and offer to actor.
     */
    o."base:environment" = this;
    Act( this, "offer", \$who: \$actor, \$what: (\{ o \}) );
    \$delay(60, FALSE, "4309");
    if( o \&\&
        o."base:environment" == this )
      Slay( o );
    return FALSE;
  \}
\}

/* Found nothing. */
EmitTo( \$actor, Describe( this ) + " doesn't have that. Try 'ask "+Describe( this ) + "'." );
      </Core:Property>
      <Core:Property property="merry:react:read-what">
         X[M] /*

  D=Read a price menu.

*/

if( this."nip:item:head" )
  EmitTo( \$actor, this."nip:item:head" );

if( this."nip:item:list" )
  EmitTo( \$actor, PRE( this."nip:item:list" ));

if( this."nip:item:foot" )
  EmitTo( \$actor, this."nip:item:foot" );
      </Core:Property>
      <Core:Property property="merry:react:take">
         X[M] /*

  D=Accept and pay for an object.

*/

object CDO;

CDO = this."nip:item:cdo";

/* Grab global properties from CDO. */
\$hide_decimals = CDO."cash:hide-decimals";

if( !CDO )
\{
  EmitTo( \$actor, "Oops! No CDO. This is a bug. :(" );
  return FALSE;
\}

if( Call( this."base:environment", "core_trading_deduct", \$CDO: CDO, \$query: this."nip:item:cost", \$item: this ))
\{
  this."merry:inherit:react:take" = nil;
  this."nip:item:cdo" = nil;
  return TRUE;
\}
      </Core:Property>
      <Core:Property property="property:map">
         ([ "nip:trait:trading:detail":3, "nip:trait:trading:foot":3, "nip:trait:trading:head":3, "nip:trait:trading:list":4, "nip:trait:trading:object":4 ])
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1076086705, "zwoc", "P", 1076086942, "zwoc", "P", 1076087317, "zwoc", "P", 1076087735, "zwoc", "P", 1076087770, "zwoc", "P", 1076098913, "zwoc", "P", 1076099214, "zwoc", "P", 1076099821, "zwoc", "P", 1076103050, "zwoc", "P", 1076103082, "zwoc", "P", 1076103282, "zwoc", "P", 1076103331, "zwoc", "P", 1076103364, "zwoc", "P", 1076103524, "zwoc", "P", 1076103591, "zwoc", "P", 1076104502, "zwoc", "P", 1076105054, "zwoc", "P", 1076106004, "zwoc", "P", 1076106283, "zwoc", "P", 1076106440, "zwoc", "P", 1076106471, "zwoc", "P", 1076109456, "zwoc", "P", 1076109481, "zwoc", "P", 1076217274, "zwoc", "P", 1076217394, "zwoc", "P", 1076217474, "zwoc", "P", 1076218280, "zwoc", "P", 1076219139, "zwoc", "P", 1076219469, "zwoc", "P", 1076282676, "zwoc", "P", 1076282956, "zwoc", "P", 1076283101, "zwoc", "P", 1076283822, "zwoc", "P", 1076283949, "zwoc", "P", 1076284172, "zwoc", "P", 1076284232, "zwoc", "P", 1076284299, "zwoc", "P", 1076284313, "zwoc", "P", 1076284683, "zwoc", "P", 1076284783, "zwoc", "P", 1076284936, "zwoc", "P", 1076285196, "zwoc", "P", 1076285352, "zwoc", "P", 1076285561, "zwoc", "P", 1076285738, "zwoc", "P", 1076285964, "zwoc", "P", 1076286001, "zwoc", "P", 1076286045, "zwoc", "P", 1076286129, "zwoc", "P", 1076286164, "zwoc", "P", 1076286179, "zwoc", "P", 1076286217, "zwoc", "P", 1076286273, "zwoc", "P", 1076286313, "zwoc", "P", 1076287709, "zwoc", "P", 1076288875, "zwoc", "P", 1076289630, "zwoc", "P", 1076289670, "zwoc", "P", 1076289709, "zwoc", "P", 1076289844, "zwoc", "P", 1076289851, "zwoc", "P", 1076289890, "zwoc", "P", 1076290154, "zwoc", "P", 1076290751, "zwoc", "P", 1076290991, "zwoc", "P", 1076290997, "zwoc", "P", 1076292503, "zwoc", "P", 1076347820, "zwoc", "P", 1091459080, "zwoc", "P", 1091459132, "zwoc", "P", 1091461916, "zwoc", "P", 1091461924, "zwoc", "P", 1091462888, "zwoc", "P", 1091462895, "zwoc", "P", 1091463108, "zwoc", "P", 1091466701, "zwoc", "P", 1091468500, "zwoc", "P", 1091468762, "zwoc", "P", 1091468821, "zwoc", "P", 1091469529, "zwoc", "P", 1091469604, "zwoc", "P", 1091471460, "zwoc", "P", 1091888917, "zwoc", "P", 1091889991, "zwoc", "P", 1091890188, "zwoc", "P", 1091891058, "zwoc", "P", 1091891133, "zwoc", "P", 1091891621, "zwoc", "P", 1091892535, "zwoc", "P", 1091892822, "zwoc", "P", 1091892829, "zwoc", "P", 1091893704, "zwoc", "P", 1091894825, "zwoc", "P", 1091894870, "zwoc", "P", 1091895295, "zwoc", "P", 1091895600, "zwoc", "P", 1091895772, "zwoc", "P", 1091895948, "zwoc", "P", 1091896086, "zwoc", "P", 1091896244, "zwoc", "P", 1091899173, "zwoc", "P", 1091899314, "zwoc", "P", 1093306053, "zwoc", "P", 1095560293, "zwoc", "P", 1095560563, "zwoc", "P", 1116300123, "zwoc", "P", 1121822139, "zwoc", "P", 1121822213, "zwoc", "P", 1121822286, "zwoc", "P", 1121822331, "zwoc", "P", 1121822496, "zwoc", "P", 1121822569, "zwoc", "P", 1121822728, "zwoc", "P", 1121822814, "zwoc", "P", 1121822844, "zwoc", "P", 1121823450, "zwoc", "P", 1121823675, "zwoc", "P", 1121823698, "zwoc", "P", 1121823843, "zwoc", "P", 1121823964, "zwoc", "P", 1121823993, "zwoc", "P", 1121824092, "zwoc", "X", 1161830346, "tonyd", "E", 1276821572, "tonyd", "E", 1276823218, "tonyd", "E", 1276823370, "tonyd", "E", 1276823398, "tonyd", "E" \})
      </Core:Property>
      <Core:Property property="sys:sync:idpsource">
         "marrach"
      </Core:Property>
      <Core:Property property="sys:sync:igdipro">
         "propose"
      </Core:Property>
      <Core:Property property="sys:sync:proposing-revision">
         1276823398
      </Core:Property>
      <Core:Property property="{email}">
         "kalle@marrach.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1276823398
      </Core:Property>
      <Core:Property property="{sub_rev}">29</Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
