<object clone="/usr/SkotOS/obj/meracha" owner="fyth">
  <SkotOS:MerAcHa action_id="shop_buy">
    <Core:PCProperties>
      <Core:Property property="merry:global:action">
         X[M] /* shop action - gives syntax and current info*/
\$loc=\$actor."base:environment";
if (\$evoke) sscanf(\$evoke,"%s %s",\$drop,\$q);
if ((\$q)\&\&(\$q[0]\>48)\&\&(\$q[0]\<58))\{ \$q=Int(\$q); \}
else \{ \$q=1; \}
if ((\$evoke)\&\&(\$evoke[1]\>48)\&\&(\$evoke[1]\<58))\{
  /* get evoke # from on actor's price array */
  \$evoke=replace_strings(\$evoke,"\\"","");
  \$evoke=Int(\$evoke);
  \$pricearray = \$actor."price:array";
  if (sizeof(\$pricearray)\<\$evoke+1)\{
    EmitTo(\$actor,"You can't buy an item that doesn't exist");
    return FALSE;
  \}
  \$buyitem = \$pricearray[\$evoke];
  /* check item's home is here */
  if (\$buyitem.item_home!=\$loc."base:objectname")\{
    \$itemhome=\$buyitem.item_home;
    \$itemhome=find_object(\$itemhome);
    EmitTo(\$actor,"That item is not here, you should look for it at "+Describe(\$itemhome));
    return FALSE;
  \}
  /* special case for buying a new spawn */
  \$buyprice=\$buyitem."sell:price";
  if (!\$buyprice)\{
    \$buyprice=\$actor."price:price";
    \$buyprice*=\$q;
    /* CHECK ACTOR HAS SUFFICIENT MONEY */
    \$checkcoin=Call(nil /* defunct */,"checkcoin",\$check_targ: \$actor);
    if (\$buyprice\>\$checkcoin)\{
      EmitTo(\$actor,"You don't have enough money to make that purchase.");
      return FALSE;
    \}
    for (\$i=0;\$i\<\$q;\$i++)\{
      \$newitem=Spawn(\$buyitem);
      \$newitem.quality = \$actor."price:quality";
      \$newitem.condition = \$actor."price:quality";
      \$newitem."base:environment" = \$actor;
    \}
    if (\$q\>1)\{
      EmitTo(\$actor,"You have purchased "+Describe(\$buyitem)+" (stack of "+\$q+") for "+\$buyprice+" suns.");
    \}
    else\{
      EmitTo(\$actor,"You have purchased "+Describe(\$buyitem)+" for "+\$buyprice+" suns.");
    \}
    Call(nil /* defunct */,"remcoin",\$rem_coin: \$buyprice, \$rem_targ: \$actor);
    return FALSE;
  \}
  /* CHECK ACTOR HAS SUFFICIENT MONEY */
  \$buyprice*=\$q;
  \$checkcoin=Call(nil /* defunct */,"checkcoin",\$check_targ: \$actor);
  if (\$buyprice\>\$checkcoin)\{
    EmitTo(\$actor,"You don't have enough money to make that purchase.");
    return FALSE;
  \}
  /* check item is still for sale */
  \$seller=\$buyitem."sell:seller";
  if (!\$seller)\{
    EmitTo(\$actor,"You can no longer buy that item, it has been sold");
    return FALSE;
  \}
  /* check there are enough available in stack */
  if (\$buyitem."sell:stack")\{
    \$stack=\$buyitem."sell:stack";
  \}
  else\{ \$stack=1; \}
  if (\$q\>\$stack)\{
    EmitTo(\$actor,"There are not "+\$q+" available for sell");
    return FALSE;
  \}
  \$qcount=0;
  \$seller = \$buyitem."sell:seller";
  if (\$q==\$stack)\{
    /* buy it all */
    \$buyitem."sell:run" = \$buyitem."sell:seller";
    \$buyitem."sell:seller" = nil;
    /* excise it from the sell list */
    \$prevob=\$buyitem."sell:prev";
    \$nextob=\$buyitem."sell:next";
    if (\$prevob) \{ \$prevob."sell:next" = \$nextob; \}
    else \{ \$seller."sell:head" = \$nextob; \}
    if (\$nextob) \{ \$nextob."sell:prev" = \$prevob; \}
    \$buyitem."sell:prev" = nil;
    \$buyitem."sell:next" = nil;
    /* excise it from the price list */
    \$priceheadname=\$buyitem."price:head";
    \$prevob=\$buyitem."price:prev";
    \$nextob=\$buyitem."price:next";
    if (\$prevob) \{ \$prevob."price:next" = \$nextob; \}
    else \{ Set(\$loc,\$priceheadname,\$nextob); \}
    if (\$nextob) \{ \$nextob."price:prev" = \$prevob; \}
    \$buyitem."price:prev" = nil;
    \$buyitem."price:next" = nil;
    \$buyitem."base:environment" = \$actor;
    \$buyitem."sell:run" = nil;
    \$qcount=1;
  \}
  if (\$q-\$qcount\>0)\{
    \$qcount=\$q-\$qcount;
    Call(nil /* defunct */,"buyq",\$buyq_item: \$buyitem, \$buyq_num: \$qcount);
    \$buyitem."sell:stack" -= \$qcount;
    EmitTo(\$actor,"Sold "+\$qcount);
  \}
  /* finish buying it (and pay the \$seller) */
  \$qtxt="";
  if (\$q\>1) \$qtxt=" (stack of "+\$q+")";
  EmitTo(\$actor,"You have purchased "+Describe(\$buyitem,nil,\$actor)+\$qtxt+" for "+\$buyprice+" suns.");
  EmitTo(\$seller,"*** You have sold "+Describe(\$buyitem,nil,\$actor)+\$qtxt+" for "+\$buyprice+" suns. ***");
  Call(nil /* defunct */,"remcoin",\$rem_coin: \$buyprice, \$rem_targ: \$actor);
  Call(nil /* defunct */,"addcoin",\$add_coin: \$buyprice, \$add_targ: \$seller);
  return FALSE;
\}
if ((\$dob)\&\&(\$dob[0]))\{
  \$dobo=\$dob[0];
  \$dobodet=NRefDetail(\$dobo);
  \$dobo=NRefOb(\$dobo);
  \$dobodet="details:"+\$dobodet+":snames";
  \$dobo=Get(\$dobo,\$dobodet);
  \$dobo=\$dobo[0];
  /* get \$item_type by finding \$dobo in \$item_array */
  if (!\$loc."merry:lib:item_array")\{
    EmitTo(\$actor,"You can't buy items here, there is no market");
    return FALSE;
  \}
  \$itemr=Call(\$loc,"item_array");
  if ((\$itemr)\&\&(\$itemr[0]))\{
    \$i=0;
    \$found=FALSE;
    while ((\$i\<sizeof(\$itemr))\&\&(!\$found))\{
      \$item_type=\$itemr[\$i];
      \$item_name=\$item_type."details:default:snames"[0];
      if (\$item_name==\$dobo) \$found=TRUE;
      \$i++;
    \}
    if ((!\$found)\&\&(\$loc."merry:lib:spec_array"))\{
      /* check special item array */
      \$itemr=Call(\$loc,"spec_array");
      if ((\$itemr)\&\&(\$itemr[0]))\{
        \$i=0;
        \$found=FALSE;
        while ((\$i\<sizeof(\$itemr))\&\&(!\$found))\{
          \$item_type=\$itemr[\$i];
          \$item_name=\$item_type."details:default:snames"[0];
          if (\$item_name==\$dobo) \$found=TRUE;
          \$i++;
        \}
      \}
    \}
    if (!\$found)\{
      EmitTo(\$actor,"You can't buy that here, perhaps you should try a different shop");
      return FALSE;
    \}
  \}
  else\{
    EmitTo(\$actor,"You can't buy that here, perhaps you should try a different shop");
    return FALSE;
  \}
  /* \$priceheadname = \$itemtype */
  if (\$adverb)\{
    switch(\$adverb)\{
      case "poorly": \$item_q="poor"; break;
      case "commonly": \$item_q="common"; break;
      case "normally": \$item_q="normal"; break;
      case "expertly": \$item_q="expert"; break;
      case "superbly": \$item_q="superb"; break;
      case "masterfully": \$item_q="master"; break;
      case "perfectly": \$item_q="perfect";
    \}
  \}
  if (!\$item_q)\{
    EmitTo(\$actor,"Qualities available:  [poor/common/normal/superb/expert/master/perfect]");
    return FALSE;
  \}
  \$item_q=Call(nil /* defunct */,"qnum",\$qnum_str: \$item_q);
  sscanf(\$item_type."base:objectname","OrphanCrown:Items:%s",\$priceheadname);
  \$priceheadname="price:head:"+\$priceheadname;
  /* go down the pricelist (upto 5 deep) */
  /* push these onto the user "price:array" */
  EmitTo(\$actor,"Syntax to buy: buy ['listnum [quantity]] ( \<-- remember the quote mark! )");
  \$pricehead=Get(\$loc,\$priceheadname);
  \$i=0;
  if (\$pricehead)\{
    \$pricearray=(\{\$pricehead\});
    \$list=\$pricehead;
    while ((\$list)\&\&(\$i\<5))\{
      if (\$list.quality\>=\$item_q)\{
        \$pricearray+=(\{\$list\});
        \$qname=Call(nil /* defunct */,"qname",\$qname_num: \$list.quality);
        \$i++;
        if ((\$list."sell:stack")\&\&(\$list."sell:stack"\>1))\{
          EmitTo(\$actor,"---\> "+\$i+" : "+Describe(\$list)+" ("+\$qname+") : "+\$list."sell:price"+" suns each ("+\$list."sell:stack"+" available)");
        \}
        else\{
          EmitTo(\$actor,"---\> "+\$i+" : "+Describe(\$list)+" ("+\$qname+") : "+\$list."sell:price"+" suns");
        \}
      \}
      \$list=\$list."price:next";
    \}
  \}
  if (\$i\<1)\{
    /* if pricelist empty, set user buy array to a marker */
    \$pricearray=(\{\$item_type,\$item_type\});
    \$actor."price:quality" = \$item_q;
    /* CALCULATE BASE ITEM PRICING HERE */
    \$actor."price:price" = \$item_q;
    \$qname=Call(nil /* defunct */,"qname",\$qname_num: \$item_q);
    EmitTo(\$actor,"---\> 1 : (Direct Sell) "+Describe(\$item_type)+" ("+\$qname+") : "+\$actor."price:price"+" suns");
  \}
  \$actor."price:array" = \$pricearray;
  return FALSE;
\}
EmitTo(\$actor,"Syntax: buy [item] [quality]");
if (!\$loc."merry:lib:item_array")\{
  EmitTo(\$actor,"You can't buy items here, there is no market");
  return FALSE;
\}
\$outputstr="At "+Describe(\$loc)+" you may buy:\\n";
\$itemr=Call(\$loc,"item_array");
for (\$i=0;\$i\<sizeof(\$itemr);\$i++)\{
  \$itemtxt=\$itemr[\$i]."details:default:snames"[0];
  \$outputstr+=" "+\$itemtxt;
  if (\$i+1\<sizeof(\$itemr)) \$outputstr+=",";
\}
if (\$loc."merry:lib:spec_array")\{
  \$itemr=Call(\$loc,"spec_array");
  for (\$i=0;\$i\<sizeof(\$itemr);\$i++)\{
    \$itemtxt=\$itemr[\$i]."details:default:snames"[0];
    sscanf(\$item[\$i]."base:objectname","OrphanCrown:Items:%s",\$priceheadname);
    \$priceheadname="price:head"+\$priceheadname;
    if (Get(\$loc,\$priceheadname))\{
      \$outputstr+=", ";
      \$outputstr+=""+\$itemtxt;
    \}
  \}
\}
EmitTo(\$actor,""+\$outputstr);
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1186174365, "-", "SYNC" \})
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
