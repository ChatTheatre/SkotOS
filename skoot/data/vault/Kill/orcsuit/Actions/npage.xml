<object clone="/usr/SkotOS/obj/meracha" owner="orcsuit">
  <SkotOS:MerAcHa action_id="npage">
    <Core:PCProperties>
      <Core:Property property="merry:global:action">
         X[M] /* Paging with new names */

object who;
string *names, name, message, append, fromto, theatre;
mapping pending;
int i;

if( (!\$evoke \|\| strlen( \$evoke ) \< 3 \|\| sscanf( \$evoke[1..strlen(\$evoke)-2], "%s;%s", name, message )  != 2) \&\& (!\$(dob:words) \|\| (\$(dob:words)[0] != "accept" \&\& \$(dob:words)[0] != "deny"\&\& \$(dob:words)[0] != "allow" \&\& \$(dob:words)[0] != "block" \&\& \$(dob:words)[0] != "unallow"\&\& \$(dob:words)[0] != "unblock")) )\{
  EmitTo( \$actor, "Paging with new names. Syntax is:\\nnpage \\"name; message\\"\\n\\nExample: npage \\"Orcsuit@LC; Your mother was a hamster and your father smelled of elderberries!\\"\\nAlso, use npage offline \\"person;message\\" to send offline pages." );
  return FALSE;
\}

\$msg = 1; /*This is so that messages are displayed when trying to find a body*/
if( \$(dob:words) \&\& \$(dob:words)[0] == "accept" )
\{
 if (\$evoke \&\& lower_case(\$evoke) != "all")
 \{
  /*get the pages from the person specified*/
  name = \$evoke;
  sscanf(name, "\\"%s\\"", name);
  who = bodies::get_body(\$name: name);
  if (!who) \{
   return FALSE;\}
  \$pages = \$actor."page:pending";
  if( \$pages \&\& map_sizeof( \$pages ) \&\& \$pages[who])
  \{
   EmitTo(\$actor, "[OOC Page] accepted from " + TAG( bodies::desc_body(\$bwhat: who, \$blooker: \$actor), "who" ) + ": \\""+\$pages[who]+"\\"");
   EmitTo(who, "[OOC Page] accepted by " + TAG( bodies::desc_body(\$bwhat: \$actor, \$blooker: who), "who" ) + ": \\""+\$pages[who]+"\\"");
   \$actor."page:pending"[who]=nil;
  \}
  else
  \{
   EmitTo(\$actor, "You have no pending pages from " + TAG( bodies::desc_body(\$bwhat: who, \$blooker: \$actor), "who" ));
  \}
 \}
 else
 \{
  /* Display all pending pages to the caller */
  \$pages = \$actor."page:pending";
  if( \$pages \&\& map_sizeof( \$pages ))
  \{
   EmitTo( \$actor, TAG( "All pending pages to you:\\n--------------------------------------------", "imp" ) );
   \$ind = map_indices( \$pages );
   for( i = 0; i \< sizeof( \$ind ); i++ )\{
    EmitTo( \$actor, TAG( "From " + bodies::desc_body(\$bwhat: \$ind[i], \$blooker: \$actor), "who" ) + ": "+\$pages[\$ind[i]] );
 EmitTo( \$ind[i], "[OOC Page] accepted by " + TAG( bodies::desc_body(\$bwhat: \$actor, \$blooker: \$ind[i]), "who" ) + ": \\""+\$pages[\$ind[i]]+"\\"" );
   \}
   \$actor."page:pending" = ([ ]);
  \}
  else
  \{
   EmitTo( \$actor, "No pending pages from anyone." );
  \}
 \}
 return FALSE;
\}

if( \$(dob:words) \&\& \$(dob:words)[0] == "deny" )
\{
 if (\$evoke \&\& lower_case(\$evoke) != "all")
 \{
  /*find and remove any pages by the person specified*/
  name = \$evoke;
  sscanf(name, "\\"%s\\"", name);
  who = bodies::get_body(\$name: name);
  if (!who) \{
   return FALSE;\}
  \$pages = \$actor."page:pending";
  if( \$pages \&\& map_sizeof( \$pages ) \&\& \$pages[who])
  \{
   EmitTo(\$actor, "[OOC Page] declined from " + TAG( bodies::desc_body(\$bwhat: who, \$blooker: \$actor), "who" ));
   EmitTo(who, "[OOC Page] declined by " + TAG( bodies::desc_body(\$bwhat: \$actor, \$blooker: who), "who" ));
   \$actor."page:pending"[who]=nil;
  \}
  else
  \{
   EmitTo(\$actor, "You have no pending pages from " + TAG( bodies::desc_body(\$bwhat: who, \$blooker: \$actor), "who" ));
  \}
 \}
 else
 \{
  EmitTo( \$actor, "Who's page do you wish to decline?");
 \}
 return FALSE;
\}
if( \$(dob:words) \&\& ( \$(dob:words)[0] == "allow" \|\| \$(dob:words)[0] == "block" \|\| \$(dob:words)[0] == "unallow" \|\| \$(dob:words)[0] == "unblock" ))
\{
 if ((sizeof(\$(dob:words)) \> 1 \&\& \$(dob:words)[1] == "all") \|\| (typeof(\$evoke) == T_STRING \&\& \$evoke == "all"))
 \{
  if (\$(dob:words)[0] == "allow")
  \{
   \$actor."page:allowall" = 1;
   EmitTo(\$actor, "You are now allowing pages from everyone.\\nUse 'npage unallow all' to return to discriminatory mode.");
   return FALSE;
  \}
  if (\$(dob:words)[0] == "unallow")
  \{
   \$actor."page:allowall" = nil;
   EmitTo(\$actor, "You are no longer allowing pages from everyone.");
   return FALSE;
  \}
 \}
 if (typeof(\$evoke) == T_STRING)
 \{
  sscanf(\$evoke, "\\"%s\\"", name);
  if( sscanf(name, "%s@%s", name, theatre)) \{
   \$only = 1;
  \}else \{
   theatre = \$actor."theatre:id";
  \}
  who = bodies::get_body(\$name: name, \$theatre: theatre);
  if (who)
  \{
   if (typeof(\$actor."page:blocking") != T_MAPPING) \{
    \$actor."page:blocking" = ([ ]); \}
   if (typeof(\$actor."page:allow") != T_MAPPING) \{
    \$actor."page:allow" = ([ ]); \}
   if (\$(dob:words)[0] == "allow")
   \{
    \$actor."page:allow"[who] = 1;
 \$actor."page:blocking"[who] = nil;
    message = "now accept";
   \}
   if (\$(dob:words)[0] == "unallow")
   \{
    \$actor."page:allow"[who] = nil;
    message = "are no longer accepting";
   \}
   if (\$(dob:words)[0] == "block")
   \{
    \$actor."page:blocking"[who] = 1;
 \$actor."page:allow"[who] = nil;
    message = "now block";
   \}
   if (\$(dob:words)[0] == "unblock")
   \{
    \$actor."page:blocking"[who] = nil;
    message = "are no longer blocking";
   \}
   EmitTo(\$actor, "You "+message+" pages from "+Describe(who)+".");
  \}
 \}
 else
 \{
  EmitTo(\$actor, "Who do you wish to "+\$(dob:words)[0]+" pages from?\\nExample: npage "+\$(dob:words)[0]+" 'Orcsuit@LC'");
 \}
 return FALSE;
\}

if( sscanf(name, "%s@%s", name, theatre)) \{
 \$only = 1;
\}else \{
 theatre = \$actor."theatre:id";
\}
if( !\$(dob:words) \|\| \$(dob:words)[0] != "offline" ) \{
 \$poss=1; \}

who = bodies::get_body(\$name: name, \$theatre: theatre, \$only: \$only);
if (!who) \{
 return FALSE;\}
if (who."page:blocking" \&\& who."page:blocking"[\$actor]) \{
 EmitTo(\$actor, name + " has chosen to block pages from you.");
 return FALSE;
\}
message = strip(message);

if(who."udat:possessed")
\{
 if (who."page:allowall" \|\| (who."page:allow" \&\& who."page:allow"[\$actor]))
 \{
  EmitTo(who, "[OOC Page] from " + bodies::desc_body(\$bwhat: \$actor, \$blooker: who) + ": \\"" + message+"\\"");
  EmitTo(\$actor, "[OOC Page] to " + bodies::desc_body(\$bwhat: who, \$blooker: \$actor) + ": \\"" + message+"\\"");
 \}
 else
 \{
  if (typeof(who."page:pending") == T_MAPPING)
  \{
   if (who."page:pending"[\$actor]) \{
    EmitTo(\$actor, "You are already trying to page " + Describe(who) + ".  This page must be accepted or declined before you can send another.");
    return FALSE;
   \}
   who."page:pending" += ([ \$actor : "\\"" + message + "\\"" ]);
  \}
  else
  \{
   who."page:pending" = ([ \$actor : "\\"" + message + "\\"" ]);
  \}
  EmitTo(\$actor, Describe(who) + " has been notified of your page request.  You will be notified when the page is accepted or declined");
  EmitTo(who, Describe(\$actor) + " is trying to npage you.\\nIf you would like to receive the page, type 'npage accept \\"" + bodies::desc_body(\$bwhat: \$actor, \$blooker: who, \$bonly: 1)+"\\"'.\\nIf you would like to refuse the page, type 'page deny \\""+bodies::desc_body(\$bwhat: \$actor, \$blooker: who, \$bonly: 1)+"\\"'.");
 \}
 return FALSE;
\}

pending = who."page:pending";

if( !pending ) \{
 pending = ([ \$actor : "\\"" + message + "\\"" ]); \}
else
\{
 if( pending[\$actor] )
 \{
  append = pending[\$actor];
  append = append[0..strlen(append)-2];
  append += "\\n\\n" + message + "\\"";
  pending[\$actor] = append;
  EmitTo( \$actor, "Your page has been appended to the previous page you had waiting for consent with "+name+". This means when they accept it, they will receive it all as one page." );
 \}
 else
 \{
  pending += ([ \$actor : "\\"" + message + "\\"" ]);
 \}
\}

who."page:pending" = pending;

EmitTo( \$actor, "The page is in "+Describe(who)+"'s pending pages. "+capitalize( who."trait:nominative" )+" will be notified of this upon connect." );
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1064204793, "orcsuit", "E", 1064206136, "orcsuit", "E", 1064207363, "orcsuit", "E", 1064216252, "orcsuit", "E", 1064216337, "orcsuit", "E", 1064216399, "orcsuit", "E", 1064217543, "orcsuit", "E", 1064217910, "orcsuit", "E", 1064220466, "orcsuit", "E", 1064221776, "orcsuit", "E", 1064263342, "orcsuit", "E", 1064263581, "orcsuit", "E", 1064263671, "orcsuit", "E", 1064383439, "orcsuit", "E", 1064385628, "orcsuit", "E", 1064445261, "orcsuit", "E" \})
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
