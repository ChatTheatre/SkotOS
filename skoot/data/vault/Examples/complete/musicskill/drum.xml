<object clone="/base/obj/thing" owner="christophera">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="0.4"/>
    <Base:Container flexible="false" transparent-container="true" public-container="true" tight="true" capacity="0" maxweight="0" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="lying" combinable="false" discrete="false" by_weight="false" tight="true" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="instrument"/>
            <Base:SName sname="drum"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="drums"/>
            <Base:PName pname="instruments"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="frame"/>
          <Base:Adjective adjective="medium-sized"/>
          <Base:Adjective adjective="musical"/>
          <Base:Adjective adjective="percussion"/>
          <Base:Adjective adjective="wood-framed"/>
          <Base:Adjective adjective="wooden-framed"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             frame drum
          </Base:Description>
          <Base:Description type="examine">
             This is a frame drum, about two feet in diameter and two inches deep. The drum's frame is made of a dark wood which is covered with a thin leather skin glued to the edges of the frame.
          </Base:Description>
          <Base:Description type="glance">
             A frame drum.
          </Base:Description>
          <Base:Description type="look">
             A medium-sized frame drum covered by a thin skin.
          </Base:Description>
          <Base:Description type="pbrief">
             frame drums
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="drumhead" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="head"/>
            <Base:SName sname="drumhead"/>
            <Base:SName sname="leather"/>
            <Base:SName sname="skin"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="drumheads"/>
            <Base:PName pname="heads"/>
            <Base:PName pname="leathers"/>
            <Base:PName pname="skins"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="circular"/>
          <Base:Adjective adjective="drum"/>
          <Base:Adjective adjective="leather"/>
          <Base:Adjective adjective="paper-thin"/>
          <Base:Adjective adjective="tanned"/>
          <Base:Adjective adjective="thin"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             frame drum's drumhead
          </Base:Description>
          <Base:Description type="examine">
             The drumhead of the frame drum is made from an almost paper-thin skin of leather, stretched tightly across the end of the drum's wooden frame and glued in place.
          </Base:Description>
          <Base:Description type="look">
             The smooth tan drumhead of a drum.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="frame" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="frame"/>
            <Base:SName sname="body"/>
            <Base:SName sname="ring"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bodies"/>
            <Base:PName pname="frames"/>
            <Base:PName pname="rings"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="circular"/>
          <Base:Adjective adjective="dark"/>
          <Base:Adjective adjective="drum"/>
          <Base:Adjective adjective="wood"/>
          <Base:Adjective adjective="wooden"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             drum frame
          </Base:Description>
          <Base:Description type="examine">
             The body of a drum is a flat ring made of a dark wood, about a eight inches in diameter and three inches deep.
          </Base:Description>
          <Base:Description type="look">
             The circular wooden frame of a small drum.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:doum">
         X[M] /* lib:doum          */
/* by ChristopherA   */

/* called by verbs beat, hit, strike */

   string * noskilladverbs;

/* EmitTo( \$actor, dump_value( args ) ) ; */

/* Test to see if drum is being held... */

    if ( (Get(this,"base:environment")) != \$actor ) \{
        /* It is not being held */
        EmitTo(\$actor.env, "You must be holding " + Describe(this, \$actor) + " to " + \$verb + " it.\\n" );
        return FALSE;
        \}

/* It is properly being held, so continue... */

    Set( this, "trait:played", TRUE);

/* Test to see if drummer has any skill... */

    if ( !\$actor."skill:music:handdrum" ) \{
        noskilladverbs = (\{ "inexpertly", "badly", "poorly", "crudely", "inadequately", "incompetently", "unsatisfactorily" \});
        \$adverb = noskilladverbs[ random (sizeof (noskilladverbs)) ];
        \$evoke = nil;
        return TRUE;
    \}

/* Yes, he has some skill, so continue... */

/* If skill is 3 or less, then kill any adverbs */

    if ( \$actor."skill:music:handdrum" \<= 3 ) \{
    \$adverb = nil;
    \}

/* now output the 'sound' */

   if ( \$using ) \{
        if ( \$adverb ) \{
            EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor) + ", which cries out with a deep \\"doum\\"  sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) + ", which cries out with a deep \\"doum\\"  sound.\\n", \$actor);
         \} else \{
            /* no \$adverb supplied by the user */
            EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor ) +  ", which cries out with a deep \\"doum\\"  sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) +  ", which cries out with a deep \\"doum\\"  sound.\\n", \$actor);
         \}
        return FALSE;
    \} else \{
        /* not with or using, thus must force a "with your right hand" */
        if ( \$adverb ) \{
            EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which cries out with a deep \\"doum\\"  sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which cries out with a deep \\"doum\\"  sound.\\n", \$actor );
        \} else \{
            /* no \$adverb supplied by the user */
            EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which cries out with a deep \\"doum\\"  sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which cries out with a deep \\"doum\\"  sound.\\n", \$actor);
        \}
        return FALSE;
    \}

/* Should never get here */

EmitTo(\$actor, "ERROR: should never get here.\\n" );
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:slap">
         X[M] /* lib:slap          */
/* by ChristopherA   */

/* called by verbs clap, slap, smack, swat */

   string * noskilladverbs;

/* EmitTo( \$actor, dump_value( args ) ) ; */

/* Test to see if drum is being held... */

    if ( (Get(this,"base:environment")) != \$actor ) \{
        /* It is not being held */
        EmitTo(\$actor.env, "You must be holding " + Describe(this, \$actor) + " to " + \$verb + " it.\\n" );
        return FALSE;
        \}

/* It is properly being held, so continue... */

    Set( this, "trait:played", TRUE);

/* Test to see if drummer has any skill... */

    if ( !\$actor."skill:music:handdrum" ) \{
        noskilladverbs = (\{ "inexpertly", "badly", "poorly", "crudely", "inadequately", "incompetently", "unsatisfactorily" \});
        \$adverb = noskilladverbs[ random (sizeof (noskilladverbs)) ];
        \$evoke = nil;
        return TRUE;
    \}

/* Yes, he has some skill, so continue... */

/* If skill is 3 or less, then kill any adverbs */

    if ( \$actor."skill:music:handdrum" \<= 3 ) \{
    \$adverb = nil;
    \}

/* now output the 'sound' */

    if ( \$using ) \{
        if ( \$adverb ) \{
            EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor) + ", which shouts out with a harsh \\"slap\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) + ", which shouts out with a harsh \\"slap\\" sound.\\n", \$actor);
         \} else \{
            /* no \$adverb supplied by the user */
            EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor ) +  ", which shouts out with a harsh \\"slap\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) +  ", which shouts out with a harsh \\"slap\\" sound.\\n", \$actor);
         \}
        return FALSE;
    \} else \{
        /* not with or using, thus must force a "with your right hand" */
        if ( \$adverb ) \{
            EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which shouts out with a harsh \\"slap\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which shouts out with a harsh \\"slap\\" sound.\\n", \$actor );
        \} else \{
            /* no \$adverb supplied by the user */
            EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which shouts out with a harsh \\"slap\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which shouts out with a harsh \\"slap\\" sound.\\n", \$actor);
        \}
        return FALSE;
    \}

/* Should never get here */

EmitTo(\$actor, "ERROR: should never get here.\\n" );
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:tek">
         X[M] /* lib:tek           */
/* by ChristopherA   */

/* called by verbs knock, pat, swat, tap */

   string * noskilladverbs;

/* EmitTo( \$actor, dump_value( args ) ) ; */

/* Test to see if drum is being held... */

    if ( (Get(this,"base:environment")) != \$actor ) \{
        /* It is not being held */
        EmitTo(\$actor.env, "You must be holding " + Describe(this, \$actor) + " to " + \$verb + " it.\\n" );
        return FALSE;
        \}

/* It is properly being held, so continue... */

    Set( this, "trait:played", TRUE);

/* Test to see if drummer has any skill... */

    if ( !\$actor."skill:music:handdrum" ) \{
        noskilladverbs = (\{ "inexpertly", "badly", "poorly", "crudely", "inadequately", "incompetently", "unsatisfactorily" \});
        \$adverb = noskilladverbs[ random (sizeof (noskilladverbs)) ];
        \$evoke = nil;
        return TRUE;
    \}

/* Yes, he has some skill, so continue... */

/* If skill is 3 or less, then kill any adverbs */

    if ( \$actor."skill:music:handdrum" \<= 3 ) \{
    \$adverb = nil;
    \}

/* now output the 'sound' */

    if ( \$using ) \{
        if ( \$adverb ) \{
            EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor) + ", which sings out with a bright \\"tek\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) + ", which sings out with a bright \\"tek\\" sound.\\n", \$actor);
         \} else \{
            /* no \$adverb supplied by the user */
            EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor ) +  ", which sings out with a bright \\"tek\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) +  ", which sings out with a bright \\"tek\\" sound.\\n", \$actor);
         \}
        return FALSE;
    \} else \{
        /* not with or using, thus must force a "with your right hand" */
        if ( \$adverb ) \{
            EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which sings out with a bright \\"tek\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which sings out with a bright \\"tek\\" sound.\\n", \$actor );
        \} else \{
            /* no \$adverb supplied by the user */
            EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which sings out with a bright \\"tek\\" sound.\\n" );
            EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which sings out with a bright \\"tek\\" sound.\\n", \$actor);
        \}
        return FALSE;
    \}

/* Should never get here */

EmitTo(\$actor, "ERROR: should never get here.\\n" );
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:beat-dob">
         X[M] /* react:beat-dob     */
/* by ChristopherA   */

/* Call the 'doum' sound */

::doum();
      </Core:Property>
      <Core:Property property="merry:react:clap-dob">
         X[M] /* react:clap-dob     */
/* by ChristopherA   */

/* Call the 'slap' sound */

::slap();
      </Core:Property>
      <Core:Property property="merry:react:hit-dob">
         X[M] /* react:hit-dob     */
/* by ChristopherA   */

/* Call the 'doum' sound */

::doum();
      </Core:Property>
      <Core:Property property="merry:react:knock-dob">
         X[M] /* react:knock-dob     */
/* by ChristopherA   */

/* Call the 'tek' sound */

::tek();
      </Core:Property>
      <Core:Property property="merry:react:pat-dob">
         X[M] /* react:pat-dob     */
/* by ChristopherA   */

/* Call the 'tek' sound */

::tek();
      </Core:Property>
      <Core:Property property="merry:react:play-dob">
         X[M] /* react:play-dob     */
/* by ChristopherA    */

/* SKILL TABLE                                                                                     */
/* 0 standard social, but adverb forced to "inexpertly"                                            */
/* 1 Novice, default is "simple rhythm" -- adverbs are nilled                                      */
/* 2 Apprentice, default is "basic rhythm" -- adverbs are nilled                                   */
/* 3 Senior Apprentice, default is "fundamental rhythm" -- adverbs are nilled                      */
/* 4 Fellowcraft, default is "standard rhythm" -- adverbs allowed                                  */
/* 5 Journeyman, default is "fancy rhythm" -- adverbs allowed                                      */
/* 6 Artisan, default is "elaborate rhythm" -- adverbs allowed, special evokes allowed             */
/* 7 Senior Artisan, default is "sophisticated rhythm" -- adverbs allowed, special evokes allowed  */
/* 8 Master, default is "masterful rhythm"-- adverbs allowed, special evokes allowed               */
/* 9 Master Adept, default is "adept rhythm" -- adverbs allowed, special evokes allowed            */
/* 10 Grand Master, default is "magnificent rhythm" -- adverbs allowed, special evokes allowed     */

   string * noskilladverbs;

/* EmitTo( \$actor, dump_value( args ) ) ; */

/* Test to see if drum is being held... */

    if ( (Get(this,"base:environment")) != \$actor ) \{
        /* It is not being held */
        EmitTo(\$actor."base:environment", "You must be holding " + Describe(this, \$actor) + " to " + \$verb + " it.\\n" );
        return FALSE;
        \}

/* It is properly being held, so continue... */

    Set( this, "trait:played", TRUE);

/* Test to see if drummer has any skill... */

    if ( !\$actor."skill:music:handdrum" ) \{
        noskilladverbs = (\{ "inexpertly", "badly", "poorly", "crudely", "inadequately", "incompetently", "unsatisfactorily" \});
        \$adverb = noskilladverbs[ random (sizeof (noskilladverbs)) ];
        \$evoke = nil;
        return TRUE;
    \}

/* Yes, he has some skill, so continue... */

/* Setup for each of the different skills, from 1 through 10 */

    switch (\$actor."skill:music:handdrum") \{
        case 1:
      \$adverb = nil;
      \$skilladverb = "a simple";
      break;
        case 2:
      \$adverb = nil;
      \$skilladverb = "a basic";
      break;
        case 3:
      \$adverb = nil;
      \$skilladverb = "a fundamental";
      break;
        case 4:
      \$skilladverb = "a standard";
      break;
        case 5:
      \$skilladverb = "a fancy";
      break;
        case 6:
       \$skilladverb = "an elaborate";
      break;
        case 7:
      \$skilladverb = "a sophisticated";
      break;
        case 8:
      \$skilladverb = "a masterful";
      break;
        case 9:
       \$skilladverb = "an adept";
      break;
        case 10:
      \$skilladverb = "a magnificent";
      break;
  default:
      \$skilladverb = "an amazing";
      break;

\}

/* If the player has Artison skill or higher, he may use evokes, i.e.   */
/* \> play slowly my drum using my hands "DOUM, DOUM,                    */
/*     tekka tek tek -- DOUM tekka tekka tek, tekka tekka tek, tekka"   */
/* You slowly play your small drum using your hands, with an elaborate  */
/* rhythm of "DOUM, DOUM, tekka tek tek -- DOUM tekka tekka tek, tekka  */
/* tekka tek, tekka".                                                   */

    if ( \$evoke \&\& ( (\$actor."skill:music:handdrum") \>= 6 ) ) \{
     if ( \$using ) \{
         if ( \$adverb ) \{
             EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor) + ", with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " " +  \$(using:preposition) + " " + Describe(\$using, \$actor) + ", with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n", \$actor);
          \} else \{
             /* no \$adverb supplied by the user */
             EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " + \$(using:preposition) + " " +  Describe(\$using, \$actor, \$actor ) +  ", with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " " + \$(using:preposition) + " " +  Describe(\$using, \$actor) +  ", with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n", \$actor);
          \}
         return FALSE;
     \} else \{
      /* not with or using, thus must force a "with your right hand" */
         if ( \$adverb ) \{
             EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n", \$actor );
         \} else \{
             /* no \$adverb supplied by the user */
             EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, with " + \$skilladverb + " rhythm of " + \$evoke + ".\\n", \$actor);
         \}
         return FALSE;
     \}
    \} else \{
        /* An \$evoke was not supplied by the user */
     if ( \$using ) \{
         if ( \$adverb ) \{
             EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " + \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor) + ", which sounds out with " + \$skilladverb + " rhythm.\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " " + \$(using:preposition) + " " + Describe(\$using, \$actor) + ", which sounds out with " + \$skilladverb + " rhythm.\\n", \$actor);
          \} else \{
             /* no \$adverb supplied by the user */
             EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " " + \$(using:preposition) + " " + Describe(\$using, \$actor, \$actor ) +  ", which sounds out with " + \$skilladverb + " rhythm.\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " " + \$(using:preposition) + " " + Describe(\$using, \$actor) +  ", which sounds out with " + \$skilladverb + " rhythm.\\n", \$actor);
          \}
         return FALSE;
     \} else \{
      /* not with or using, thus must force a "with your right hand" */
         if ( \$adverb ) \{
             EmitTo(\$actor, "You " + \$adverb + " " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which sounds out with " + \$skilladverb + " rhythm.\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + " " + \$adverb + " " + \$vob."verb:third"  + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which sounds out with " + \$skilladverb + " rhythm.\\n", \$actor );
         \} else \{
             /* no \$adverb supplied by the user */
             EmitTo(\$actor, "You " + \$verb + " " + Describe(\$this, \$actor, \$actor) + " with your right hand, which sounds out with " + \$skilladverb + " rhythm.\\n" );
             EmitIn(\$actor."base:environment", Describe(\$actor) + " " + \$vob."verb:third" + " " + Describe(\$this, \$actor) + " with " +  \$actor."base:possessive" + " right hand, which sounds out with " + \$skilladverb + " rhythm.\\n", \$actor);
         \}
         return FALSE;
     \}
    \}
/* Should never get here */

EmitTo(\$actor, "ERROR: should never get here.\\n" );
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:slam-dob">
         X[M] /* react:slam-dob     */
/* by ChristopherA   */

/* Call the 'slap' sound */

::slap();
      </Core:Property>
      <Core:Property property="merry:react:slap-dob">
         X[M] /* react:slap-dob     */
/* by ChristopherA   */

/* Call the 'slap' sound */

::slap();
      </Core:Property>
      <Core:Property property="merry:react:smack-dob">
         X[M] /* react:smack-dob     */
/* by ChristopherA   */

/* Call the 'slap' sound */

::slap();
      </Core:Property>
      <Core:Property property="merry:react:strike-dob">
         X[M] /* react:strike-dob     */
/* by ChristopherA   */

/* Call the 'doum' sound */

::doum();
      </Core:Property>
      <Core:Property property="merry:react:swat-dob">
         X[M] /* react:swat-dob     */
/* by ChristopherA   */

/* Call the 'tek' sound */

::tek();
      </Core:Property>
      <Core:Property property="merry:react:tap-dob">
         X[M] /* react:tap-dob     */
/* by ChristopherA   */

/* Call the 'tek' sound */

::tek();
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1067240499, "christophera", "X", 1067240687, "christophera", "E", 1067256191, "christophera", "E", 1067256209, "christophera", "E", 1067286306, "christophera", "K", 1067286411, "christophera", "E", 1067286430, "christophera", "E", 1067286506, "christophera", "K", 1067286580, "christophera", "K" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1" state="Comment" user="ChristopherA">
           A simple hand drum, which supports special sounds with some verbs, and special actions with the 'play' verb. See comments in +tool merry edit %Examples:complete:musicskill:drum react:play-dob
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
