<object clone="/base/obj/thing" owner="Generic">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(MGeneric:Thing)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="page"/>
            <Base:SName sname="thing"/>
            <Base:SName sname="object"/>
            <Base:SName sname="item"/>
            <Base:SName sname="everything"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="items"/>
            <Base:PName pname="objects"/>
            <Base:PName pname="pages"/>
            <Base:PName pname="stuff"/>
            <Base:PName pname="things"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="single"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.alteration:color:desc) |$(this.alteration:color:desc) |}page
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.alteration:color:desc) |A $(this.alteration:color:desc) |A } page.{? | $(this.trait:text) | It has been written upon.| It is blank.}
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.alteration:color:desc) |A $(this.alteration:color:desc) |A } page.{? | $(this.trait:text) | It has been written upon.| It is blank.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spine" prime="false" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions/>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:color">
         "white"
      </Core:Property>
      <Core:Property property="export:alteration:color:amount">
         0.0025
      </Core:Property>
      <Core:Property property="export:alteration:color:desc">
         "white"
      </Core:Property>
      <Core:Property property="export:alteration:dictionary">
         ([ "alter":(\{ "color" \}), "dye":(\{ "color" \}) ])
      </Core:Property>
      <Core:Property property="export:alteration:traits">
         ([ "color":"dyer" ])
      </Core:Property>
      <Core:Property property="export:construction:isconstructed">
         "true"
      </Core:Property>
      <Core:Property property="export:construction:isitem">
         1
      </Core:Property>
      <Core:Property property="export:construction:usedas">
         (\{ "construction:literature:ispage" \})
      </Core:Property>
      <Core:Property property="export:trait:superbrief">
         "loose page"
      </Core:Property>
      <Core:Property property="export:writable">
         "true"
      </Core:Property>
      <Core:Property property="merry:react:erase-what">
         X[M] /*
 * write things on the page
 */
string d1,d2;

/*make sure \$actor is holding*/
if(this."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding the page to erase it.");
 return FALSE;
\}

/*set text*/
this."trait:text" = nil;

d1=Describe(this,nil,\$actor);
d2=Describe(this,\$actor);

if(\$actor."base:environment")\{
 EmitTo(\$actor,"You erase " + d1 + ".");
 EmitIn(\$actor."base:environment",Describe(\$actor) + " erases " + d2 + ".",\$actor);
\}
      </Core:Property>
      <Core:Property property="merry:react:read-what">
         X[M] /*
 * write things on the page
 */
string d1,d2;

/*make sure \$actor is holding*/
if(this."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding the page to read it.");
 return FALSE;
\}

/*set text*/
d1=Describe(this,nil,\$actor);

if(\$actor."base:environment")\{
 if(this."trait:text")\{
  EmitTo(\$actor,"Written upon " + d1 + " is:\\n" + this."trait:text" + "\\n");
 \}
 else\{
  EmitTo(\$actor,d1 + " is blank.");
 \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:write-what">
         X[M] /*
 * write things on the page
 */
string d1,d2;

/*make sure \$actor is holding*/
if(this."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding the page to write upon it.");
 return FALSE;
\}

/*set text*/
if(!this."trait:text")\{
this."trait:text" = \$(raw-evoke);
\}
else\{
this."trait:text" += "\\n" + \$(raw-evoke);
\}

d1=Describe(this,nil,\$actor);
d2=Describe(this,\$actor);

if(\$actor."base:environment")\{
 EmitTo(\$actor,"You write \\"" + this."trait:text" + "\\" upon " + d1 + ".");
 EmitIn(\$actor."base:environment",Describe(\$actor) + " writes upon " + d2 + ".",\$actor);
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1068811305, "caltosdarr", "X", 1068811526, "caltosdarr", "X", 1068814567, "caltosdarr", "X", 1068814722, "caltosdarr", "X", 1068814871, "caltosdarr", "X", 1068814980, "caltosdarr", "X", 1068815873, "caltosdarr", "X", 1068815949, "caltosdarr", "X", 1068907172, "caltosdarr", "X" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="971734080" state="Comment" user="carlg">
           The UrPage.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
