<object clone="/base/obj/thing" owner="Generic">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="true"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="true" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="drink"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="drinks"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? equal | $(this.drink:liquid) | empty | empty |$(this.drink:liquid)} $(this.trait:superbrief)
          </Base:Description>
          <Base:Description type="examine">
             {? equal | $(this.drink:liquid) | empty | The $(this.trait:superbrief) is quite empty|The $(this.trait:superbrief) $(this.drink:fullness) $(this.drink:liquid).}
          </Base:Description>
          <Base:Description type="look">
             <describe-prop what="drink:liquid" cap="1"/> $(this.trait:superbrief).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="liquid" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="liquid"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.drink:liquid)
          </Base:Description>
          <Base:Description type="look">
             The $(this.drink:liquid) in the $(this.trait:superbrief) sloshes around as you inspect it.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:drink:msg:alreadyempty">
         X[S] Alas. You cannot \$(verb) from \$(this.drink:envdesc) \$(this.trait:superbrief) as it is empty.
      </Core:Property>
      <Core:Property property="export:drink:msg:alreadyfull">
         X[S] \{You gesture silently, and the bartender\|You make eye contact with the bartender, who\|A silent glance summons the bartender, who\} \{glances momentarily at\|stares quizzically at\|gazes uncertainly at\} \$(this.drink:envdesc) \$(this.trait:superbrief) as it is already full.
      </Core:Property>
      <Core:Property property="export:drink:msg:alreadyfull3">
         X[S] \<describe what="\$(actor)"/\> \{gestures silently, and the bartender\|makes eye contact with the bartender, who\|summons the bartender, who\} \{glances momentarily at\|stares quizzically at\|gazes uncertainly at\} \$(this.drink:envdesc3) \$(this.trait:superbrief).
      </Core:Property>
      <Core:Property property="export:drink:msg:default">
         X[S] You \{? \| \$(adverb) \|\$(adverb)\|\} \{\$(verb)\|take a \$(verb) of\|\$(verb) some of\} \$(this.drink:envdesc) \$(this.drink:liquid).\{? \| \$(this.drink:showtaste) \| \{? \| \$(this.drink:taste) \|\$(this.drink:taste)\}\}
      </Core:Property>
      <Core:Property property="export:drink:msg:default3">
         X[S] \<describe what="\$(actor)"/\> \{? \| \$(adverb) \|\$(adverb)\|\}\{ \$(vob.verb:third)\| \$(vob.verb:third) some of\} \$(this.drink:envdesc3) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:emptieddrink">
         X[S] \{? \| \$(this.drink:emptystr) \|With \$(this.drink:emptystr) you\|You\} \{finish\|finish off\|polish off\} \$(this.drink:envdesc) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:emptieddrink3">
         X[S] \{? \| \$(this.drink:emptystr) \|With \$(this.drink:emptystr)\|\} \<describe what="\$(actor)"/\> \{finishes\|finishes off\|polishes off\} \$(this.drink:envdesc3) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:emptiedout">
         X[S] You \{? \| \$(adverb) \|\$(adverb)\| \}\$(verb) \$(this.drink:envdesc) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:emptiedout3">
         X[S] \<describe what="\$(actor)"/\> \{? \| \$(adverb) \|\$(adverb) \|\}\$(vob.verb:third) \$(this.drink:envdesc3) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:filled">
         X[S] \{You gesture silently, and the bartender\|You make eye contact with the bartender, who\|A silent glance summons the bartender, who\} \{agreeably\|obediently\|deftly\} tops off \$(this.drink:envdesc) \$(this.trait:superbrief).
      </Core:Property>
      <Core:Property property="export:drink:msg:filled3">
         X[S] \<describe what="\$(actor)"/\> \{gestures silently, and the bartender\|makes eye contact with the bartender, who\|summons the bartender, who\} \{agreeably\|obediently\|deftly\} tops off \$(this.drink:envdesc3) \$(this.trait:superbrief).
      </Core:Property>
      <Core:Property property="export:drink:msg:fillednobar">
         X[S] Alas. You cannot \$(verb) \$(this.drink:envdesc) \$(this.trait:superbrief), there is no place here to do so.
      </Core:Property>
      <Core:Property property="export:drink:msg:justfinished">
         X[S] With a \{final\|satisfied\|faint\|brief\|sated\} \{swallow\|gulp\}, you \{? \| \$(adverb) \|\$(adverb)\|\} \{empty\|polish off\|finish the remainder of\} \$(this.drink:envdesc) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:justfinished3">
         X[S] With a \{final\|satisfied\|faint\|brief\|sated\} \{swallow\|gulp\} \<describe what="\$(actor)"/\> \{? \| \$(adverb) \|\$(adverb)\|\} \{empties\|polishes off\|finishes the remainder of\} \$(this.drink:envdesc3) \$(this.drink:liquid).
      </Core:Property>
      <Core:Property property="export:drink:msg:notfillable">
         X[S] Alas. The \$(this.trait:superbrief) cannot be \$(verb)ed.
      </Core:Property>
      <Core:Property property="export:drink:msg:notholding">
         X[S] You must be holding the \$(this.details:default:descriptions:brief) to do that.
      </Core:Property>
      <Core:Property property="export:drink:msg:notpotable">
         X[S] You cannot \$(verb) the \$(this.details:default:descriptions:brief).
      </Core:Property>
      <Core:Property property="export:drink:msg:smell">
         X[S] \{? \| \$(this.drink:smell) \|\$(this.drink:smell)\|\$(this.drink:envdesc) \$(this.trait:superbrief) smells like \{? equal \| \$(this.drink:liquid) \| empty \| the remains of \$(this.drink:liquid-default)\|\$(this.drink:liquid)\}.\}
      </Core:Property>
      <Core:Property property="export:drink:qty">5.0</Core:Property>
      <Core:Property property="export:drink:qty-max">
         5.0
      </Core:Property>
      <Core:Property property="export:potable:noslay">
         "1"
      </Core:Property>
      <Core:Property property="export:trait:trash">1</Core:Property>
      <Core:Property property="merry:lib:checkforfillarea">
         X[M] mixed *inv;
int ctr,found;


found=0;
inv=\$actor."base:environment"."base:inventory";
for(ctr=0;ctr\<sizeof(inv);ctr++)\{
 if(Get(inv[ctr],this."drink:fillable"))\{
  found=1;
  break;
 \}
\}

if(found==0)\{
 return FALSE;
\}
else\{
 return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:lib:descdrink">
         X[M] int envisperson;

envisperson = 0;

if(this."base:environment" == \$actor)\{
 this."drink:envdesc" = "your";
 this."drink:envdesc3" = \$actor."trait:possessive";
\}

if(this."base:environment" != \$actor)\{
 if(this."base:environment".volition == 1)\{
  this."drink:envdesc" = Describe(this."base:environment") + "\\'s";
  this."drink:envdesc3" = Describe(this."base:environment",\$actor) + "\\'s";
  envisperson=1;
 \}
 else \{
  this."drink:envdesc" = "the";
  this."drink:envdesc3" = "the";
 \}
\}



/*just finished drinking*/
if(this."drink:justfinished")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:justfinished"));

 if(envisperson==1)\{
  this."drink:envdesc3" = "your";
  EmitTo(this."base:environment",UnSAM(this."drink:msg:justfinished3"));
 EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:justfinished3"),\$actor,\$this."base:environment");
 \}
 else\{
  EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:justfinished3"),\$actor);
 \}
 return FALSE;
\}

/*empty the drink but not by drinking it*/
if(this."drink:emptiedout")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:emptiedout"));

 if(envisperson==1)\{
  this."drink:envdesc3" = "your";
  EmitTo(this."base:environment",UnSAM(this."drink:msg:emptiedout3"));
  EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:emptiedout3"),\$actor,\$this."base:environment");
 \}
 else \{
 EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:emptiedout3"),\$actor);
 \}
 return FALSE;
\}

/*emptied by quaffing etc*/
if(this."drink:emptieddrink")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:emptieddrink"));

 if(envisperson==1)\{
  this."drink:envdesc3" = "your";
  EmitTo(this."base:environment",UnSAM(this."drink:msg:emptieddrink3")); EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:emptieddrink3"),\$actor,\$this."base:environment");
 \}
 else\{
  EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:emptieddrink3"),\$actor);
 \}
 return FALSE;
\}

/*drink already empty*/
if(this."drink:isempty")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:alreadyempty"));
 return FALSE;
\}

/*using a spoon*/
if(this."drink:isspoonable" \&\& \$using)\{
 if(NRefOb(\$using[0])."tool:isspoon")\{
  EmitTo(\$actor,UnSAM(this."drink:msg:spooned"));

  if(envisperson==1)\{
   this."drink:envdesc3" = "your";
   EmitTo(this."base:environment",UnSAM(this."drink:msg:spooned3"));
  EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:spooned3"),\$actor,\$this."base:environment");
  \}
  else\{
     EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:spooned3"),\$actor);
  \}
  return FALSE;
 \}
\}

/*normal consume*/
EmitTo(\$actor,UnSAM(this."drink:msg:default"));

 if(envisperson==1)\{
  this."drink:envdesc3" = "your";
  EmitTo(this."base:environment",UnSAM(this."drink:msg:default3"));
EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:default3"),\$actor,\$this."base:environment");
 \}
 else\{
EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:default3"),\$actor);
 \}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:descfill">
         X[M] int envisperson;

envisperson = 0;

if(this."base:environment" == \$actor)\{
 this."drink:envdesc" = "your";
 this."drink:envdesc3" = \$actor."trait:possessive";
\}

if(this."base:environment" != \$actor)\{
 if(this."base:environment".volition == 1)\{
  this."drink:envdesc" = Describe(this."base:environment") + "\\'s";
  this."drink:envdesc3" = Describe(this."base:environment") + "\\'s";
  envisperson=1;
 \}
 else \{
  this."drink:envdesc" = "the";
  this."drink:envdesc3" = "the";
 \}
\}

if(this."drink:filled")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:filled"));
 EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:filled3"),\$actor,this."base:environment");
 if(envisperson==1)\{
  this."drink:envdesc3" = "your";
  EmitTo(\$this."base:environment",UnSAM(this."drink:msg:filled3"));
 \}
 return FALSE;
\}

if(this."drink:alreadyfull")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:alreadyfull"));
 EmitIn(\$actor."base:environment",UnSAM(this."drink:msg:alreadyfull3"),\$actor,this."base:environment");
 if(envisperson==1)\{
  this."drink:envdesc3" = "your";
  EmitTo(\$this."base:environment",UnSAM(this."drink:msg:alreadyfull3"));
 \}
 return FALSE;
\}

EmitTo(\$actor,UnSAM(this."drink:msg:fillednobar"));
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:descsmell">
         X[M] if(this."base:environment" == \$actor)\{
 this."drink:envdesc" = "your";
 this."drink:envdesc3" = \$actor."trait:possessive";
\}

if(this."base:environment" != \$actor)\{
 if(this."base:environment".volition == 1)\{
  this."drink:envdesc" = Describe(this."base:environment");
  this."drink:envdesc3" = Describe(this."base:environment") + "s";
 \}
 else \{
  this."drink:envdesc" = "the";
  this."drink:envdesc3" = "the";
 \}
\}

EmitTo(\$actor,UnSAM(this."drink:msg:smell"));

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:dodrink">
         X[M] if(!this."drink:isempty")\{
 /*reduce drink amount*/
 Call(this,"reducedrinkamount",\$amount: \$amount);

 /*show taste description?*/
 if(\$showtaste)\{
  this."drink:showtaste" = TRUE;
 \}

 if(this."drink:isempty")\{
  this."drink:justfinished" = TRUE;
 \}

 /*check poisons*/
 if(this."drink:poison")\{

 \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:dofill">
         X[M] this."drink:alreadyfull" = nil;
this."drink:filled" = nil;

if(Call(this,"checkforfillarea"))\{
 if((float)this."drink:qty" \< (float)this."drink:qty-max")\{
  Call(this,"fillsub");
  this."drink:filled" = TRUE;
 \}
 else\{
  this."drink:alreadyfull" = TRUE;
 \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:emptydrink">
         X[M] if(!this."drink:isempty")\{
  this."drink:isempty" = TRUE;
  this."drink:emptiedout" = TRUE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:emptysub">
         X[M] object obj;
obj=\$\{MGeneric:UrDrink\};

this."drink:fullness" = "is quite empty";
this."drink:qty" = 0.0;
this."drink:liquid" = "empty";

Set(this,"details:default:sname:" + this."drink:liquid",nil);
Set(this,"details:default:adjective:" + this."drink:liquid",nil);

this."details:liquid:hidden" = TRUE;

this."details:default:adjective:empty" = TRUE;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:fillsub">
         X[M] this."drink:fullness" = "is filled with";
this."drink:qty" = this."drink:qty-max";
this."drink:liquid" = this."drink:liquid-default";

Set(this,"details:default:sname:" + this."drink:liquid",this."drink:liquid" + "s");
Set(this,"details:default:adjective:" + this."drink:liquid",TRUE);

this."details:liquid:hidden" = FALSE;

this."details:default:adjective:empty" = nil;
this."drink:isempty" = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:finishdrink">
         X[M] if(!this."drink:isempty")\{
  this."drink:isempty" = TRUE;
  this."drink:emptieddrink" = TRUE;

  if((float)this."drink:qty" / (float)this."drink:qty-max" \> 0.25)\{
   this."drink:emptystr" = "a slight gulp";
  \}

  if((float)this."drink:qty" / (float)this."drink:qty-max" \> 0.5)\{
   this."drink:emptystr" = "a few gulps";
  \}

  if((float)this."drink:qty" / (float)this."drink:qty-max" \> 0.75)\{
   this."drink:emptystr" = "a mighty gulp";
  \}

 /*check poisons*/
 if(this."drink:poison")\{

 \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:isdrinkable">
         X[M] /*not potable*/
if(!this."base:potable")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:notpotable"));
 return FALSE;
\}

if(this."drink:holdtodrink")\{
 if(this."base:environment" != \$actor)\{
  EmitTo(\$actor,UnSAM(this."drink:msg:notholding"));
 \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:isedible">
         X[M] /*not potable*/
if(!this."base:edible")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:notpotable"));
 return FALSE;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:isfillable">
         X[M] if(!this."drink:fillable")\{
 EmitTo(\$actor,UnSAM(this."drink:msg:notfillable"));
 return FALSE;
\}

if(this."drink:holdtofill")\{
 if(this."base:environment" != \$actor)\{
  EmitTo(\$actor,UnSAM(this."drink:msg:notholding"));
 \}
\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:postdrink">
         X[M] if(this."drink:isempty")\{
 Call(this,"emptysub");
\}
this."drink:justfinished" = nil;
this."drink:emptiedout" = nil;
this."drink:emptieddrink" = nil;
this."drink:showtaste" = nil;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:reducedrinkamount">
         X[M] /*
\$amount - reduction amount
*/

if(!\$amount) \$amount=1.0;

if((float)this."drink:qty" \<= 0.0) return TRUE;

if((float)this."drink:qty" /(float) this."drink:qty-max" \>0.1)\{
 this."drink:fullness" = "contains the dregs of";
\}

if((float)this."drink:qty" /(float) this."drink:qty-max" \>0.2)\{
 this."drink:fullness" = "barely contains any";
\}

if((float)this."drink:qty" /(float) this."drink:qty-max" \>0.4)\{
 this."drink:fullness" = "is half filled with";
\}


if((float)this."drink:qty" /(float) this."drink:qty-max" \>0.75)\{
 this."drink:fullness" = "is nearly filled with";
\}

if((float)this."drink:qty" /(float) this."drink:qty-max" \>0.95)\{
 this."drink:fullness" = "is filled with";
\}





this."drink:qty" = (float)this."drink:qty" - (float)\$amount;

if((float)this."drink:qty" \<= 0.0)\{
 this."drink:isempty" = TRUE;
 this."drink:qty" = 0.0;
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-desc:drink">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:eat">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:empty-dob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:gulp-iob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:guzzle-iob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:quaff-iob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:refill-dob">
         X[M] return Call(this,"descfill");
      </Core:Property>
      <Core:Property property="merry:react-desc:sip-iob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:swill-iob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-desc:taste-dob">
         X[M] return Call(this,"descdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:drink">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:eat">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:empty-dob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:gulp-iob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:guzzle-iob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:quaff-iob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:sense/smell-dob">
         X[M] Call(this,"descsmell");
      </Core:Property>
      <Core:Property property="merry:react-post:sip-iob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:swill-iob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-post:taste-dob">
         X[M] Call(this,"postdrink");
      </Core:Property>
      <Core:Property property="merry:react-pre:drink">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:eat">
         X[M] return Call(this,"isedible");
      </Core:Property>
      <Core:Property property="merry:react-pre:empty-dob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:gulp-iob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:guzzle-iob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:quaff-iob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:refill-dob">
         X[M] return Call(this,"isfillable");
      </Core:Property>
      <Core:Property property="merry:react-pre:sip-iob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:swill-iob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react-pre:taste-dob">
         X[M] return Call(this,"isdrinkable");
      </Core:Property>
      <Core:Property property="merry:react:drink">
         X[M] return Call(this,"dodrink",\$amount: 1.0);
      </Core:Property>
      <Core:Property property="merry:react:eat">
         X[M] return Call(this,"dodrink",\$amount: 1.0);
      </Core:Property>
      <Core:Property property="merry:react:empty-dob">
         X[M] return Call(this,"emptydrink");
      </Core:Property>
      <Core:Property property="merry:react:gulp-iob">
         X[M] return Call(this,"finishdrink");
      </Core:Property>
      <Core:Property property="merry:react:guzzle-iob">
         X[M] return Call(this,"finishdrink");
      </Core:Property>
      <Core:Property property="merry:react:quaff-iob">
         X[M] return Call(this,"finishdrink");
      </Core:Property>
      <Core:Property property="merry:react:refill-dob">
         X[M] return Call(this,"dofill");
      </Core:Property>
      <Core:Property property="merry:react:sip-iob">
         X[M] return Call(this,"dodrink",\$amount: 0.25, \$showtaste: 1);
      </Core:Property>
      <Core:Property property="merry:react:swill-iob">
         X[M] return Call(this,"finishdrink");
      </Core:Property>
      <Core:Property property="merry:react:taste-dob">
         X[M] return Call(this,"dodrink",\$amount: 0.1, \$showtaste: TRUE);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1098936988, "zwoc", "S", 1101138581, "sorcha", "X", 1101138734, "sorcha", "K", 1101138883, "sorcha", "X", 1101138936, "sorcha", "K", 1101139146, "sorcha", "K", 1101139354, "sorcha", "K", 1101139518, "sorcha", "X", 1101139551, "sorcha", "K", 1101139858, "sorcha", "K", 1101140412, "sorcha", "E", 1101140635, "sorcha", "E", 1101142058, "sorcha", "X", 1101142193, "sorcha", "X", 1212455638, "tomdowd", "E", 1212455670, "tomdowd", "E", 1212455799, "tomdowd", "E", 1212455928, "tomdowd", "E", 1212456530, "tomdowd", "E", 1212456895, "tomdowd", "E", 1212456945, "tomdowd", "E", 1212457030, "tomdowd", "E", 1223658186, "airlia", "E", 1271824213, "blazingday", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="971734080" state="Comment" user="carlg">
           
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
