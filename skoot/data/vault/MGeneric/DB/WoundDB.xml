<object clone="/base/obj/thing" owner="Generic">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.3" density="1.1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:bruisesub">
         X[M] /*
cause a bruise by hitting, punching or kicking
\$action - contains kick, punch
\$objWound - thing being punched
*/

int strength;
string detail;
string *arr;
string *adv;
object data;
/*
 * do not allow bruising by newlies
 */
if(\$actor."udat:account"=="trial") return FALSE;

/*
 * do not allow dead people
 */
if(\$actor."death:dead") return FALSE;
if(\$objWound."death:dead") return FALSE;
strength = 1;

/*
 * don't cause damage if in jest
 */
adv=(\{ "abatedly", "abatingly", "abbreviatedly", "abeyantly", "abortedly", "abstainedly", "accidentally", "accustomably", "admonishingly", "adorably", "aesthetically", "affably", "affectionately", "aimlessly", "airily", "almost", "amateurishly", "ambiguously", "amenably", "amiably", "amicably", "amorously", "amusedly", "amusingly", "angelically", "apparently", "appealingly", "apprehensively", "approvingly", "arousingly", "ascetically", "assuringly", "awkwardly", "barely", "banteringly", "bashfully", "beamingly", "becalmingly", "beguilingly", "believably", "blindly", "bluffly", "blushingly", "blusteringly", "brotherly", "falteringly", "feebly", "gently", "half-heartedly", "harmlessly", "ineffectually", "ineffectively", "kiddingly", "kindheartedly", "kindly", "nervously", "outwardly", "pathetically", "pitifully", "playfully", "softly", "unaggressively", "uncertainly", "unconvincingly", "uncoordinatedly", "unenthusiastically", "unimpressively", "unintentionally", "unnoticeably", "unproductively", "unsuccessfully", "unthreateningly", "waifishly", "wantingly", "warningly", "weakly", "well-meaningly", "widely", "wimpily", "wimpishly", "wishfully", "wistfully", "worthlessly", "wryly" \});

if(\$adverb)\{
 if(member(\$adverb,adv))return FALSE;
\}

data = mggeneral::fetchdatadb(\$data: "WoundDB", \$obj: \$objWound);
if(!data)\{
 mggeneral::debugmessage(\$message: "ERROR NO DATADB FOR WoundDB");
 return FALSE;
\}
if((random(100) + 10*strength) \> data.brawlpercent[\$action])\{

 if(NRefDetail(\$target)!="default")\{
  if(data."allowedlocations:bruise")\{
   if(!data."allowedlocations:bruise"[NRefDetail(\$target)])\{
    return TRUE;
   \}
  \}
  detail = NRefDetail(\$target);
 \}

mgwound::woundsub(\$objWound: \$objWound, \$woundAmount: 0.1, \$woundLocation: detail, \$increment: 0.1, \$woundType: "bruise", \$woundDelivered: \$action);


\}
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:wound-bruise">
         X[M] /*
do emits and stuff after setState called for mainstate wound substate wound
*/
string bruiseDesc,actorDesc,bruiseLocation;
string *woundArr;
object *envArr;
int ctr;
string *tmpArr;
string tmpProp,duelSkill,generalSkill,detbrief,detlook;
float highest,amt;
object wrap;
string wd1,wd2,wd3;
int totalTime,subTime,tt,st;
float *tmpF;


if(\$actor."debug:1" \|\| \$actor."debug:2")EmitTo(\$actor,"ENTER MGeneric:DB:WoundDB lib:wound-bruise");

bruiseLocation = \$objAlter.bruiseLocation;
\$db = mggeneral::fetchdatadb(\$data: "WoundDB", \$obj: \$objAlter);


amt = (float)\$amount;

if(\$actor."debug:2")\{
 EmitTo(\$actor,"wb-----bruiseLocation is "+dump_value(bruiseLocation));
 EmitTo(\$actor,"wb-----amt is "+dump_value(amt));
 EmitTo(\$actor,"wb-----wound:bruiselocations is "+dump_value(\$objAlter."wound:bruiselocations"));
\}


if(\$objAlter."wound:bruiselocations")\{
 if(\$objAlter."wound:bruiselocations"[bruiseLocation])\{
  amt = \$objAlter."wound:bruiselocations"[bruiseLocation] + (float)\$amount;
 \}
\}



tmpF = map_indices(\$objAlter."state:wound:bruise"["desc"]);
for(ctr=0;ctr\<sizeof(tmpF);ctr++)\{
 if(amt\>=(float)tmpF[ctr])\{
  bruiseDesc = \$objAlter."state:wound:bruise"["desc"][tmpF[ctr]];
 \}
\}


if(!bruiseDesc) bruiseDesc="";
actorDesc = UnSAM(\$objAlter."details:default:descriptions:brief",\$this: \$objAlter);

wd1="";
wd2="";

tmpArr = Get(\$objAlter,"details:" + bruiseLocation + ":snames");

if(sizeof(tmpArr) \>0)\{
 wd1 =  " " + replace_strings(tmpArr[0],"foo193_","");
\}

tmpArr = Get(\$objAlter,"details:" + bruiseLocation + ":adjectives");
for(ctr=0;ctr\<sizeof(tmpArr);ctr++)\{
 if(tmpArr[ctr]=="left")wd2="left";
 if(tmpArr[ctr]=="right")wd2="right";
\}

wd3="";
if(\$objAlter."state:wound:bruise:adjectives")\{
 if(\$objAlter."state:wound:bruise:adjectives"[bruiseDesc])\{
  wd3 = \$objAlter."state:wound:bruise:adjectives"[bruiseDesc];
 \}
\}

if(!\$reentrant)\{


 EmitTo(\$objAlter,\$objAlter.msgAddition + " " +  capitalize(Describe(NewNRef(\$objAlter,bruiseLocation),nil,\$actor)) + " has been " + bruiseDesc + "!");

 EmitIn(\$objAlter."base:environment",\$objAlter.msgAddition + " " + capitalize(Describe(NewNRef(\$objAlter,bruiseLocation))) + " has been " + bruiseDesc + "!",\$objAlter);
\}

\$objAlter.msgAddition = nil;

if(\$objAlter."state:wound:total" \<= 3.9)\{
 if(\$objAlter."state:wound:total" \>= 3.0)\{
  if(!\$reentrant)\{
   EmitTo (\$objAlter,"\\n[WARNING: You are now gravely wounded, and should seek the services of a trained Healer immediately. YOU WILL DIE IF YOU SUSTAIN ONE MORE WOUND. If you die, everything you are carrying at the moment of death will remain on your corpse, which can be looted. Note that if you die in a location that Lith does not service you may not be revived promptly.]");
  \}
 \}

 /*make bruise detail*/
if(!\$objAlter."wound:bruiselocations") \$objAlter."wound:bruiselocations" = ([]);

if(!\$objAlter."wound:bruiselocations"[bruiseLocation])\{
 \$objAlter."wound:bruiselocations" += ([bruiseLocation:amt]);
\}
else\{
 \$objAlter."wound:bruiselocations"[bruiseLocation] = amt;
\}

Set(\$objAlter,"bruise:" + bruiseLocation + ":desc",bruiseDesc);

/*create specific detail*/
detbrief =  wd3 + " bruise on the " + wd2 + " " + wd1;
detlook = "A " + detbrief + ".";

mggeneral::makedetail(\$hide: 0, \$detail: bruiseLocation, \$trait: "bruise", \$objalter: \$objAlter, \$detbrief: detbrief, \$detlook: detlook, \$detexamine: detlook, \$snames: (\{"bruise"\}), \$adjectives: (\{wd1,wd2,wd3\}));


/*ok set the healing process in motion*/
/*bruise healing time equals bruise location severity * random time*/
if(!\$reentrant)\{
 Set(\$objAlter,"details:" + bruiseLocation + ":adjective:bruised",TRUE);
 \$ab=0;
 amt = (float)\$amount;
 \$amt = (int)(amt*10.0);
 \$location = bruiseLocation;
 \$bruisetime = \$db.bruisetime;

 if(\$objAlter."bruise:bruisetime"!=nil)\{
    if(typeof(\$objAlter."bruise:bruisetime")==T_INT)\{
       \$bruisetime = \$objAlter."bruise:bruisetime";
    \}
 \}

 if (Get(\$objAlter,"healing:bruise:" + \$location + ":subtime"))\{
  subTime = Get(\$objAlter,"healing:bruise:" + \$location + ":subtime");
  totalTime = Get(\$objAlter,"healing:bruise:" + \$location + ":totaltime");
  totalTime += subTime * \$amt;
  \$ab=1;
 \}
 else \{
  subTime = (1+ random(4)) * \$bruisetime;
  totalTime = subTime * \$amt;
  Set(\$objAlter,"healing:bruise:" + \$location + ":subtime",subTime);
 \}

 if(\$actor."debug:2")\{
  EmitTo(\$actor,"wb-----subtime is " + dump_value(subTime));
  EmitTo(\$actor,"wb-----totaltime is " + dump_value(totalTime));
 \}

 Set(\$objAlter,"healing:bruise:" + \$location + ":totaltime",totalTime);



   while((int)Get(\$objAlter,"healing:bruise:" + \$location + ":totaltime")\>0 \&\& \$ab==0)\{

    \$delay(Get(\$objAlter,"healing:bruise:" + \$location + ":subtime"), FALSE, "707f");

    if(!\$objAlter."wound:bruiselocations")\{
     mggeneral::debugmessage(\$message: "exit bruise no bruiselocations");
     return FALSE;
    \}

    if(!\$objAlter."wound:bruiselocations"[\$location])\{
     mggeneral::debugmessage(\$message: "exit bruise no location " + \$location);
     return FALSE;
    \}

    tt = Get(\$objAlter,"healing:bruise:" + \$location + ":totaltime");
    st = Get(\$objAlter,"healing:bruise:" + \$location + ":subtime");
    if(tt \>= st*2)\{
     \$tLoc = \$objAlter.bruiselocation;
     \$objAlter.bruiselocation = \$location;
     mgstate::setstate(\$objAlter: \$objAlter, \$mainState: "wound", \$subState: "bruise", \$amount: -0.1, \$recursive: 1);
     Call(\$objAlter,"wound-bruise",\$amount: -0.1, \$reentrant: 1);

     \$objAlter.bruiselocation = \$tLoc;
    \}
    Set(\$objAlter,"healing:bruise:" + \$location + ":totaltime",tt-st);
    if(\$actor."debug:2")EmitTo(\$actor,"wb-----total time left " + (tt-st));
   \}

  /*remove bruise completely*/
   if(Get(\$objAlter,"healing:bruise:" + \$location + ":totaltime") == 0)\{
    Set(\$objAlter,"healing:bruise:" + \$location + ":totaltime",nil);
    Set(\$objAlter,"healing:bruise:" + \$location + ":subtime",nil);
    \$objAlter."wound:bruiselocations"[\$location] = nil;
    Set(\$objAlter,"bruise:" + \$location + ":desc",nil);

    mggeneral::makedetail(\$hide: 1, \$detail: \$location, \$trait: "bruise", \$objalter: \$objAlter, \$detbrief: detbrief, \$detlook: "", \$detexamine: "", \$snames: (\{""\}), \$adjectives: (\{\}));

    mgstate::setstate(\$objAlter: \$objAlter, \$mainState: "wound", \$subState: "bruise", \$amount: -0.1, \$recursive: 1);
    Set(\$objAlter,"details:" + \$location + ":adjective:bruised",nil);
  \}
 \}
\}
else
\{
 EmitTo(\$objAlter,"You feel exceptionally weak and realise that you could die at any moment. It would be a good idea to find a nurse immediately.");
return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:lib:wound-wound">
         X[M] /*
do emits and stuff after setState called for mainstate wound substate wound
*/
string woundDesc,actorDesc,woundLocation;
string *woundArr;
object *envArr;
int ctr,sz;
string *tmpArr;
float *tmpF;
string tmpProp,duelSkill,generalSkill;
float highest,amt;
object wrap;
string wd1,wd2,locDesc,detbrief,detlook;
object *worn;
object datadb;
float deathLevel;

if(\$actor."debug:2" \|\| \$actor."debug:1")EmitTo(\$actor,"ENTER MGeneric:DB:WoundDB lib:wound-wound");


woundLocation = \$objAlter.woundLocation;
datadb = mggeneral::fetchdatadb(\$data: "WoundDB", \$obj: \$objAlter);

mggeneral::debugvalue(\$func: "ww", \$var: "datadb", \$val: datadb);
/*
 * clear any current treatment and healing
 */

deathLevel=4.0;
if(datadb.deathLevel) deathLevel=datadb.deathLevel;
if(\$objWound."death:deathLevel") deathLevel = \$objWound."death:deathLevel";

mghealing::cleartreatvars(\$objWound: \$objAlter, \$wouldLocation: woundLocation);
mghealing::clearhealvars(\$objWound: \$objAlter, \$wouldLocation: woundLocation);

/*
 * look for bandage at location and remove if found
 */
if(\$objAlter."base:clothing-worn")\{
 if(\$objAlter."base:clothing-worn"[woundLocation])\{
  worn = \$objAlter."base:clothing-worn"[woundLocation];
  sz = sizeof(worn);
  for(ctr=0;ctr\<sz;ctr++)\{
   if(worn[ctr]."healing:isbandage")\{
    Slay(worn[ctr]);
    break;
   \}
  \}

  if(FindMerry(datadb,"lib","emits_removeBandage"))\{
   Call(datadb,"emits_removeBandage",\$objAlter: \$objAlter, \$woundLocation: woundLocation, \$amount: \$amount, \$emitToEnvironment: sz);
  \}
 \}
\}

if(\$objAlter."wound:woundlocations")\{
 if(\$objAlter."wound:woundlocations"[woundLocation])\{
  amt = \$objAlter."wound:woundlocations"[woundLocation] + (float)\$amount;

 \}
 else \{
  amt=(float)\$amount;
 \}
\}
else \{
 amt = (float)\$amount;

\}

if(\$actor."debug:2")\{
 EmitTo(\$actor,"ww-----\$objAlter is " + dump_value(\$objAlter));
 EmitTo(\$actor,"ww-----woundlocation is " + dump_value(woundLocation));
 EmitTo(\$actor,"ww-----\$objAlter.wound:woundlocations is " + dump_value(\$objAlter."wound:woundlocations"));
 EmitTo(\$actor,"ww-----amt is " + dump_value(amt));
\}

woundDesc=mgstate::getstatedesc(\$objState: \$objAlter, \$state: "state:wound:wound", \$value: amt);


if(\$actor."debug:2")EmitTo(\$actor,"ww-----woundDesc is " + dump_value(woundDesc));

actorDesc = Describe(\$objAlter);

locDesc = mggeneral::getlocationdescription(\$detailname: woundLocation);

if(\$actor."debug:2")EmitTo(\$actor,"ww-----locDesc is " + dump_value(locDesc));

wd1="";
wd2="";
tmpArr = explode(locDesc," ");
if(sizeof(tmpArr)\>=2)\{
 wd2=tmpArr[0];
 wd1=tmpArr[1];
\}
else\{
 wd1=tmpArr[0];
\}


if(\$actor."debug:2")\{
 EmitTo(\$actor,"ww-----locDesc is " + dump_value(locDesc));
 EmitTo(\$actor,"ww-----wd1 is " + dump_value(wd1));
 EmitTo(\$actor,"ww-----wd2 is " + dump_value(wd2));
\}


if(\$objAlter.msgAddition == "A devastating hit!")\{

 if(FindMerry(datadb,"lib","emits_deadlyWound"))\{
   Call(datadb,"emits_deadlyWound",\$objAlter: \$objAlter, \$woundLocation: woundLocation, \$amount: \$amount);
  \}
\}
else\{
 if(\$amount\>=deathLevel)\{

  if(FindMerry(datadb,"lib","emits_fatalWound"))\{
   Call(datadb,"emits_fatalWound",\$objAlter: \$objAlter, \$woundLocation: woundLocation, \$amount: \$amount, \$woundDescription: woundDesc);
  \}
 \}
 else \{
  if(FindMerry(datadb,"lib","emits_nonFatalWound"))\{
   Call(datadb,"emits_nonFatalWound",\$objAlter: \$objAlter, \$locationDescription: locDesc, \$amount: \$amount, \$woundDescription: woundDesc);
  \}
 \}
\}

\$objAlter.msgAddition = nil;

if(\$actor."debug:2")\{
 EmitTo(\$actor,"ww-----\$objAlter.state:wound:total is " + dump_value(\$objAlter."state:wound:total"));
 EmitTo(\$actor,"ww-----\$objAlter.state:wound:wound:value is " + dump_value(\$objAlter."state:wound:wound:value"));

\}

if(\$objAlter."state:wound:total" \<= (deathLevel-0.1))\{

 if(\$objAlter."state:wound:wound:value" == (deathLevel-1.0))\{

  if(FindMerry(datadb,"lib","emits_deathwarning"))\{
   Call(datadb,"emits_deathwarning",\$objAlter: \$objAlter, \$woundLocation: woundLocation, \$amount: \$amount, \$woundDescription: woundDesc);
  \}
 \}

 if(\$actor."debug:2")EmitTo(\$actor,"ww--making wound detail");

 /*make wound detail*/
 if(!\$objAlter."wound:woundlocations") \$objAlter."wound:woundlocations" = ([]);

 if(\$objAlter."wound:woundlocations"[woundLocation])\{
  \$objAlter."wound:woundlocations"[woundLocation] += (float)\$amount;
 \}
 else\{
  \$objAlter."wound:woundlocations" += ([woundLocation:(float)\$amount]);
 \}

 if(\$actor."debug:2")EmitTo(\$actor,"ww-----\$objAlter.wound:woundlocations is " + dump_value(\$objAlter."wound:woundlocations"));

 /*make wound description*/
amt = (float)\$objAlter."wound:woundlocations"[woundLocation];

woundDesc=mgstate::getstatedesc(\$objState: \$objAlter, \$state: "state:wound:wound", \$value: amt);

/*create specific detail*/

detbrief = woundDesc + " "+ locDesc;
detlook = mggeneral::aan(\$word: detbrief) + ".";

Set(\$objAlter,"wound:" + woundLocation + ":desc",woundDesc);

mggeneral::makedetail(\$hide: 0, \$detail: woundLocation, \$trait: "wound", \$objalter: \$objAlter, \$detbrief: detbrief, \$detlook: detlook, \$detexamine: detlook, \$snames: (\{"wound"\}), \$adjectives: (\{wd1,wd2\}));


\}
else
\{
/*you are DEEED*/
 if(\$objWound."death:override")\{
  Call(\$objWound,\$objWound."death:override");
 \}
 else\{
  mgdeath::deathbodypre(\$objWound: \$objAlter);
 \}
\}
      </Core:Property>
      <Core:Property property="merry:lib:woundsub">
         X[M] /*
\$objWound - the object to be wounded
\$woundAmount - wound amount
\$woundLocation - location of wound
\$woundType - type of wound
\$woundDelivered - how was wound delivered punch or kick
\$increment - default is 1.0 used to affect addition hit values used in random increase for lucky hits
\$override - pass this flag if you do not want random amounts added to the damage total for lucky hits
*/

int rnd,res,mainLoc,subLoc,ctr;
float amt;

string *locationArr;
mapping loc;
mapping locationArrSub;
string *range;
object data;

if(\$actor."debug:1" \|\| \$actor."debug:2")EmitTo(\$actor,"ENTER MGeneric:DB:WoundDB lib:woundsub");

if(\$actor."death:dead")\{
 if(\$objWound."wound:silent"==nil)\{
  EmitTo(\$actor,"You cannot wound anybody because you are dead!");
 \}
 return FALSE;
\}

if(\$objWound."death:dead")\{
 if(\$objWound."wound:silent"==nil)\{
  EmitTo(\$actor,"You cannot wound "+ Describe(\$objWound) + " because they are dead!");
 \}
 return FALSE;
\}

data = mggeneral::fetchdatadb(\$data: "WoundDB", \$obj: \$objWound);
if(!data)\{
 mggeneral::debugmessage(\$message: "ERROR NO DATADB FOR WoundDB");
 return FALSE;
\}

if(!\$woundDelivered) \$woundDelivered = "wound";
if(!\$woundType) \$woundType = "wound";
if(!\$increment) \$increment = 1.0;

if(\$actor."debug:2")\{
 EmitTo(\$actor,"ws-----\$woundDelivered is " + dump_value(\$woundDelivered));
 EmitTo(\$actor,"ws-----\$woundType is " + dump_value(\$woundType));
 EmitTo(\$actor,"ws-----\$increment is " + dump_value(\$increment));
 EmitTo(\$actor,"ws-----\$objWound is " + dump_value(\$objWound));
\}

if(!\$objWound) return FALSE;
if(!\$objWound.ismgenericbody) return FALSE;

loc = Get(data,"allowedlocations:" + \$woundType);
if(!loc[\$woundlocation])\$woundLocation=nil;


if(!\$woundLocation)\{
 mainLoc = random(100);
 subLoc = random(100);
 locationArr = map_indices(data.locationpercentages[\$woundDelivered]);
 mggeneral::debugvalue(\$func: "ws", \$var: "locationArr", \$val: locationArr);
 for(ctr=0;ctr\<sizeof(locationArr);ctr++)\{
  range = explode(replace_strings(locationArr[ctr],"\\"",""),"-");
  if(mainLoc\>= (int)range[0] \&\& mainLoc \<=(int)range[1])\{
   \$woundLocation = data.locationpercentages[\$woundDelivered][locationArr[ctr]];
   break;
  \}
 \}
 if(!\$woundLocation) \$woundLocation="chest";

 mggeneral::debugvalue(\$func: "ws", \$var: "\$woundLocation", \$val: \$woundLocation);
 locationArrSub = Get(data,"locationpercentages:"+\$woundLocation);
 locationArr = map_indices(Get(data,"locationpercentages:"+\$woundLocation));

 for(ctr=0;ctr\<sizeof(locationArr);ctr++)\{
  range = explode(replace_strings(locationArr[ctr],"\\"",""),"-");
  if(subLoc\>= (int)range[0] \&\& subLoc \<=(int)range[1])\{
   \$woundLocation = locationArrSub[locationArr[ctr]];
   break;
  \}
 \}

\}

if(\$actor."debug:2") \{
 EmitTo(\$actor,"ws-----\$woundLocation is " + dump_value(\$woundLocation));
 EmitTo(\$actor,"ws-----\$woundAmount is " + dump_value(\$woundAmount));

\}


 Set(\$objWound,\$woundType + "location", \$woundLocation);
 amt = (float)\$woundAmount;


 if(\$override)\{
  \$objWound.msgAddition = "A solid hit!";

  res = mgstate::setstate(\$mainState: "wound", \$subState: \$woundType, \$amount: amt, \$objAlter: \$objWound);
  Set(\$objWound,\$woundType + "Location", nil);
  \$objWound.msgAddition = nil;
  return TRUE;
 \}

 rnd = random(500);
 if(rnd \>= 499)\{
  \$objWound.msgAddition = "A devastating hit!";
  amt += 3.0 * (float)\$increment;
  res = mgstate::setstate(\$mainState: "wound", \$subState: \$woundType, \$amount: amt, \$objAlter: \$objWound);
 \}
 else \{
  rnd = random(100);
  if (rnd \>= 98)\{
   \$objWound.msgAddition = "A critical hit!";
   amt += 2.0 * (float)\$increment;
   res = mgstate::setstate(\$mainState: "wound", \$subState: \$woundType, \$amount: amt, \$objAlter: \$objWound);
  \}
  else \{
   rnd = random(10);
   if (rnd \>= 9)\{
    \$objWound.msgAddition = "A lucky hit!";
    amt += 1.0 * (float)\$increment;
    res = mgstate::setstate(\$mainState: "wound", \$subState: \$woundType, \$amount: amt, \$objAlter: \$objWound);
   \}
   else \{
    \$objWound.msgAddition = "A solid hit!";
    res = mgstate::setstate(\$mainState: "wound", \$subState: \$woundType, \$amount: amt, \$objAlter: \$objWound);
   \}
  \}
 \}

Set(\$objWound,\$woundType + "Location", nil);

\$objWound.msgAddition = nil;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react:+wound-dob">
         X[M] string *evokes,*t;
object data;

       if(\$actor."udat:host"!=1) return FALSE;
       if(\$actor."debug:1" \|\| \$actor."debug:2")EmitTo(\$actor,"ENTER MGeneric:DB:WoundDB react:+wound-dob");

data = mggeneral::fetchdatadb(\$data: "WoundDB", \$obj: NRefOb(\$target));
if(!data)\{
 mggeneral::debugmessage(\$message: "ERROR NO DATADB FOR WoundDB");
 return FALSE;
\}

       if(\$actor."debug:2")\{
         EmitTo(\$actor,"+wd-----\$target is " + dump_value(NRefOb(\$target)));
         EmitTo(\$actor,"+wd-----\$evoke is " + dump_value(\$evoke));
       \}

       if(!\$target)\{
          EmitTo(\$actor,"Use +wound [target]\\" [amount] [location] i.e. +wound kuang \\"1.0 leftarm");
          return FALSE;
       \}


       if(\$evoke)\{
        evokes = explode(replace_strings(\$evoke,"\\"","")," ");
        if(!evokes \|\| evokes[0]=="?" \|\| evokes[0]=="help")\{
          EmitTo(\$actor,"Use +wound [target]\\" [amount] [location] i.e. +wound kuang \\"1.0 leftarm");
          return FALSE;
        \}

 /*       if(sscanf(evokes[0],"%*f")!=1)\{
   *      EmitTo(\$actor,"damage amount in +wound must be a float i.e. 1.0");
    *     return FALSE;
        \} */
  \$wound_amount = Flt(evokes[0]);

        if(sizeof(evokes)==1)\{
         mgwound::woundsub(\$objWound: NRefOb(\$target), \$woundAmount: \$wound_amount, \$override: 1);
        \}
        else\{
         if(data."allowedlocations:wound")\{
          if(!data."allowedlocations:wound"[evokes[1]])\{
           EmitTo(\$actor,"Location must be one of " + implode(map_indices(data."allowedlocations:wound"),", ") + ".");
           return FALSE;
          \}
         \}

         mgwound::woundsub(\$objWound: NRefOb(\$target), \$woundAmount: \$wound_amount, \$override: 1, \$woundLocation: evokes[1]);
         \}
       \}
       else\{
         mgwound::woundsub(\$objWound: NRefOb(\$target), \$woundAmount: 1.0, \$override: 1);
       \}
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1056568324, "zwoc", "E", 1056568347, "zwoc", "E", 1058607720, "caltosdarr", "X", 1058607962, "caltosdarr", "X", 1058961285, "caltosdarr", "X", 1058961523, "caltosdarr", "X", 1058961604, "caltosdarr", "X", 1058962055, "caltosdarr", "X", 1058963985, "caltosdarr", "X", 1063357290, "caltosdarr", "X", 1067740920, "caltosdarr", "X", 1067741189, "caltosdarr", "X", 1067947428, "caltosdarr", "P", 1067947439, "caltosdarr", "P", 1067947450, "caltosdarr", "P", 1067947458, "caltosdarr", "P", 1067947587, "caltosdarr", "P", 1068233946, "caltosdarr", "P", 1068233967, "caltosdarr", "P", 1068233982, "caltosdarr", "P", 1068234019, "caltosdarr", "P", 1068234116, "caltosdarr", "P", 1068234293, "caltosdarr", "P", 1068234357, "caltosdarr", "P", 1068234426, "caltosdarr", "P", 1068909310, "caltosdarr", "X", 1068910117, "caltosdarr", "X", 1068910159, "caltosdarr", "X", 1069277841, "caltosdarr", "P", 1069277982, "caltosdarr", "P", 1069278053, "caltosdarr", "P", 1069278068, "caltosdarr", "P", 1070028509, "caltosdarr", "X", 1070319168, "caltosdarr", "X", 1070916383, "caltosdarr", "P", 1070959352, "caltosdarr", "P", 1070959633, "caltosdarr", "P", 1070959675, "caltosdarr", "P", 1070963851, "caltosdarr", "P", 1070966300, "caltosdarr", "P", 1070966717, "caltosdarr", "P", 1070982012, "caltosdarr", "P", 1070982128, "caltosdarr", "P", 1070983124, "caltosdarr", "P", 1071060082, "caltosdarr", "P", 1071060294, "caltosdarr", "P", 1071146412, "caltosdarr", "P", 1071146462, "caltosdarr", "P", 1071692079, "caltosdarr", "P", 1071844776, "caltosdarr", "P", 1071845003, "caltosdarr", "P", 1071845092, "caltosdarr", "P", 1071845110, "caltosdarr", "P", 1073519420, "caltosdarr", "P", 1073519445, "caltosdarr", "P", 1073519453, "caltosdarr", "P", 1073519462, "caltosdarr", "P", 1073519469, "caltosdarr", "P", 1073519638, "caltosdarr", "P", 1073519649, "caltosdarr", "P", 1073521436, "caltosdarr", "P", 1073521473, "caltosdarr", "P", 1073521514, "caltosdarr", "P", 1073521552, "caltosdarr", "P", 1073521643, "caltosdarr", "P", 1073521748, "caltosdarr", "P", 1073589114, "caltosdarr", "P", 1073589253, "caltosdarr", "P", 1073589330, "caltosdarr", "P", 1073592911, "caltosdarr", "X", 1073593527, "caltosdarr", "P", 1074025268, "caltosdarr", "P", 1074180934, "caltosdarr", "P", 1074181045, "caltosdarr", "P", 1074181166, "caltosdarr", "P", 1078436420, "caltosdarr", "P", 1078567960, "caltosdarr", "P", 1078568213, "caltosdarr", "P", 1079138399, "caltosdarr", "P", 1079140001, "caltosdarr", "P", 1079140938, "caltosdarr", "P", 1079141281, "caltosdarr", "P", 1079141755, "caltosdarr", "P", 1079142451, "caltosdarr", "P", 1080086709, "caltosdarr", "P", 1080087247, "caltosdarr", "P", 1080131426, "caltosdarr", "X", 1080218169, "caltosdarr", "P", 1080218304, "caltosdarr", "P", 1080249653, "caltosdarr", "P", 1080249722, "caltosdarr", "P", 1080250344, "caltosdarr", "P", 1080250455, "caltosdarr", "P", 1080667602, "caltosdarr", "P", 1080671036, "caltosdarr", "P", 1082816143, "caltosdarr", "P", 1082816663, "caltosdarr", "P", 1082817308, "caltosdarr", "P", 1082817522, "caltosdarr", "P", 1082817585, "caltosdarr", "P", 1082817620, "caltosdarr", "P", 1083067164, "caltosdarr", "P", 1083067315, "caltosdarr", "P", 1083067468, "caltosdarr", "P", 1083067501, "caltosdarr", "P", 1083072048, "caltosdarr", "P", 1083074072, "caltosdarr", "P", 1084175101, "caltosdarr", "P", 1084175142, "caltosdarr", "P", 1086900177, "sorcha", "X", 1088457959, "caltosdarr", "P", 1092668404, "hollydragon", "E", 1092669106, "hollydragon", "E", 1092748830, "caltosdarr", "X", 1093440654, "caltosdarr", "X", 1098003571, "hollydragon", "E", 1098081971, "hollydragon", "E", 1113833201, "caltosdarr", "P", 1114534536, "caltosdarr", "P", 1114535017, "caltosdarr", "P", 1114689792, "caltosdarr", "P", 1137259016, "caltosdarr", "P", 1165422335, "tomdowd", "P", 1262811839, "tomdowd", "P", 1262825774, "tomdowd", "P", 1296870432, "tonyd", "P", 1296870441, "tonyd", "P", 1296870460, "tonyd", "P", 1296870476, "tonyd", "P", 1296870504, "tonyd", "P", 1296870533, "tonyd", "P", 1296870649, "tonyd", "P", 1296870720, "tonyd", "P", 1296870732, "tonyd", "P", 1296871011, "tonyd", "P", 1296965654, "tomdowd", "P", 1296966796, "tomdowd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="971734080" state="Comment" user="CarlG">
           Functions for wounding
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
