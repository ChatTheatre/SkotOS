<object clone="/base/obj/thing" owner="Generic">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="true"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        MGeneric:DB:State
 Maintainer:    StoryCoder Kuang
 Email:         kuang@marrach.skotos.net
 Revision:      1.24
 Generated:     Sun Sep 25 01:49:52 2011 on Jonkichi
 Last revision: Tue Oct 12 19:05:22 2004 by zwoc (S)



(Do not modify #list# -- it is automatically constructed.)


-----
-----

*/
      </Core:Property>
      <Core:Property property="merry:lib:checkmodifierskilllevels">
         X[M] /*
\$alterer
\$state
\$adverb
\$location
\$modification
*/

string *req;
int *levels;
int ctr;
int res;
mapping mods;


if(\$actor."debug:1" \|\| \$actor."debug:2")\{
 EmitTo(\$actor,"ENTER MGeneric:DB:State lib:checkmodifierskilllevels");
\}

if(\$actor."debug:2")\{
 EmitTo(\$actor,"cms-----\$alterer is " + dump_value(\$alterer));
 EmitTo(\$actor,"cms-----\$state is " + dump_value(\$state));
 EmitTo(\$actor,"cms-----\$adverb is " + dump_value(\$adverb));
 EmitTo(\$actor,"cms-----\$location is " + dump_value(\$location));
 EmitTo(\$actor,"cms-----\$modification is " + dump_value(\$modification));

\}

req = (\{\});
res = 0;

if(Get(\$state,\$modification + "Modifier:requiredSkills"))\{
 mods = Get(\$state,\$modification + "Modifier:requriedSkills");
 if(mods["all"])\{
  if(mods["all"][\$adverb])\{
   req = map_indices(mods["all"][\$adverb]);
   levels = map_values(mods["all"][\$adverb]);
  \}
 \}

 if(mods[\$location])\{
  if(mods[\$location][\$adverb])\{
   req = map_indices(mods[\$location][\$adverb]);
   levels = map_values(mods[\$location][\$adverb]);

  \}
 \}

 if(sizeof(req)\>0)\{
  for(ctr=0;ctr\<sizeof(req);ctr++)\{
   if(Get(\$alterer,req[ctr])==nil)\{
    res=1;
    break;
   \}
   if(Get(\$alterer,req[ctr])\<levels[ctr])\{
    res=2;
    break;
   \}
  \}
 \}

\}


/*
return
0 for pass
1 for no skills
2 for no skill levels
 */

return res;
      </Core:Property>
      <Core:Property property="merry:lib:checkmodifiertoollevels">
         X[M] /*
\$alterer
\$state
\$adverb
\$location
\$modification
*/

string *req;
int *levels;
int ctr,ctr2;
int res;
object *tools;
string *hasTools;
string *hasLevels;
string qt;
mapping mods;

if(\$actor."debug:1" \|\| \$actor."debug:2")\{
 EmitTo(\$actor,"ENTER MGeneric:DB:State lib:checkmodifiertoollevels");
\}

if(\$actor."debug:2")\{
 EmitTo(\$actor,"cdmt-----\$alterer is " + dump_value(\$alterer));
 EmitTo(\$actor,"cdmt-----\$state is " + dump_value(\$state));
 EmitTo(\$actor,"cdmt-----\$adverb is " + dump_value(\$adverb));
 EmitTo(\$actor,"cdmt-----\$location is " + dump_value(\$location));
 EmitTo(\$actor,"cdmt-----\$modification is " + dump_value(\$modification));
\}

req = (\{\});
levels = (\{\});
res = 0;

if(Get(\$state,\$modification + "Modifier:requiredTools"))\{
 mods = Get(\$state,\$modification + "Modifier:requiredTools");
 if(mods["all"])\{
  if(mods["all"][\$adverb])\{
   req = map_indices(mods["all"][\$adverb]);
   levels = map_values(mods["all"][\$adverb]);
  \}
 \}

 if(mods[\$location])\{
  if(mods[\$location][\$adverb])\{
   req = map_indices(mods[\$location][\$adverb]);
   levels = map_values(mods[\$location][\$adverb]);
  \}
 \}

 tools=(\{\});
 if(\$alterer."base:inventory")\{
  tools = \$alterer."base:inventory";
 \}

 if(\$actor."debug:2")\{
  EmitTo(\$actor,"cdmtl-----req is "+ dump_value(req));
  EmitTo(\$actor,"cdmtl-----levels is "+ dump_value(levels));
  EmitTo(\$actor,"cdmtl-----tools is "+ dump_value(tools));
 \}

 hasTools=(\{\});
 hasLevels=(\{\});

 if(sizeof(req)\>0)\{
  for(ctr=0;ctr\<sizeof(req);ctr++)\{
   for(ctr2=0;ctr2\<sizeof(tools);ctr2++)\{
    if(Get(tools[ctr2],req[ctr]) \&\& tools[ctr2]."tool:istool")\{
     if(!member(req[ctr],hasTools))hasTools+=(\{req[ctr]\});
     if(\$actor."debug:2") EmitTo(\$actor,"camtl-----found tool with " +req[ctr]);
     qt="design";
     if(tools[ctr2]."tool:qualitytrait")qt=tools[ctr2]."tool:qualitytrait";
     if(Get(tools[ctr2],"alteration:" + qt))\{
      if((int)Get(tools[ctr2],"alteration:" + qt)\>=(int)levels[ctr])\{
       if(!member(req[ctr],hasLevels))hasLevels +=(\{req[ctr]\});
       if(\$actor."debug:2") EmitTo(\$actor,"camtl-----found tool with level " + req[ctr]);
      \}
     \}
    \}
   \}
  \}
 \}

\}


/*
return
0 for pass
1 for no tools
2 for no tool levels
*/
if(sizeof(hasLevels) == sizeof(req)) return 0;
if(sizeof(hasTools) != sizeof(req)) return 1;
if(sizeof(hasLevels) != sizeof(req)) return 2;
return res;
      </Core:Property>
      <Core:Property property="merry:lib:checkskilllevels">
         X[M] /*
\$alterer
\$state
\$location
\$currentvalue
*/

string *req;
int *levels;
int ctr;
int res;
mapping mods;
float *vals;
float idx;


if(\$actor."debug:1" \|\| \$actor."debug:2")\{
 EmitTo(\$actor,"ENTER MGeneric:DB:State lib:checkskilllevels");
\}

if(\$actor."debug:2")\{
 EmitTo(\$actor,"csl-----\$alterer is " + dump_value(\$alterer));
 EmitTo(\$actor,"csl-----\$state is " + dump_value(\$state));
 EmitTo(\$actor,"csl-----\$location is " + dump_value(\$location));
 EmitTo(\$actor,"csl-----\$currentvalue is " + dump_value(\$currentvalue));
\}

req = (\{\});
res = 0;

if(\$state.requiredSkills)\{
 mods = \$state.requiredSkills;
 if(mods["all"])\{
  vals = map_indices(mods["all"]);
  for(ctr=0;ctr\<sizeof(vals);ctr++)\{
   if(\$currentvalue\>=vals[ctr])\{
    idx = vals[ctr];
   \}
  \}
  req = map_indices(mods["all"][idx]);
  levels = map_values(mods["all"][idx]);

 \}

 if(mods[\$location])\{
  vals = map_indices(mods[\$location]);
  for(ctr=0;ctr\<sizeof(vals);ctr++)\{
   if(\$currentvalue\>=vals[ctr])\{
    idx = vals[ctr];
   \}
  \}
  req = map_indices(mods[\$location][idx]);
  levels = map_values(mods[\$location][idx]);
 \}

 if(sizeof(req)\>0)\{
  for(ctr=0;ctr\<sizeof(req);ctr++)\{
   if(Get(\$alterer,req[ctr])==nil)\{
    res=1;
    break;
   \}
   if(Get(\$alterer,req[ctr])\<levels[ctr])\{
    res=2;
    break;
   \}
  \}
 \}

\}


/*
return
0 for pass
1 for no skills
2 for no skill levels
 */

return res;
      </Core:Property>
      <Core:Property property="merry:lib:checkstaterequestisvalid">
         X[M] /*
\$objalter
\$mainstate
\$substate
\$location

state:states = (["all":(\{"wound:bruise"\}),"chest":(\{"wound:wound"\}))

*/

string fullstate;
fullstate = \$mainstate + ":" + \$substate;

if(\$actor."debug:1" \|\| \$actor."debug:2") EmitTo(\$actor,"ENTER MGeneric:DB:State lib:checkstaterequestisvalid");

if(\$actor."debug:2")\{
 EmitTo(\$actor,"csriv-----\$mainstate is " + dump_value(\$mainstate));
 EmitTo(\$actor,"csriv-----\$substate is " + dump_value(\$substate));
 EmitTo(\$actor,"csriv-----\$location is " + dump_value(\$location));
\}

if(\$objalter."state:states")\{
 if(\$objalter."state:states"["all"])\{
  if(member(fullstate,\$objalter."state:states"["all"]))\{
   return TRUE;
  \}
 \}
 if(\$objalter."state:states"[\$location])\{
  if(member(fullstate,\$objalter."state:states"[\$location]))\{
   return TRUE;
  \}
 \}
\}


return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:checktoollevels">
         X[M] /*
\$alterer
\$state
\$adverb
\$location
\$modification
\$currentvalue
*/

string *req;
int *levels;
int ctr,ctr2;
int res;
object *tools;
string *hasTools;
string *hasLevels;
string qt;
mapping mods;
float *vals;
float idx;

if(\$actor."debug:1" \|\| \$actor."debug:2")\{
 EmitTo(\$actor,"ENTER MGeneric:DB:State lib:checktoollevels");
\}

if(\$actor."debug:2")\{
 EmitTo(\$actor,"ctl-----\$alterer is " + dump_value(\$alterer));
 EmitTo(\$actor,"ctl-----\$state is " + dump_value(\$state));
 EmitTo(\$actor,"ctl-----\$location is " + dump_value(\$location));
\}

req = (\{\});
levels = (\{\});
res = 0;

if(\$state.requiredTools)\{
 mods = \$state.requiredTools;
 if(mods["all"])\{
  vals = map_indices(mods["all"]);
  for(ctr=0;ctr\<sizeof(vals);ctr++)\{
   if(\$currentvalue\>=vals[ctr])\{
    idx = vals[ctr];
   \}
  \}
  req = map_indices(mods["all"][idx]);
  levels = map_values(mods["all"][idx]);

 \}

 if(mods[\$location])\{
  vals = map_indices(mods[\$location]);
  for(ctr=0;ctr\<sizeof(vals);ctr++)\{
   if(\$currentvalue\>=vals[ctr])\{
    idx = vals[ctr];
   \}
  \}
  req = map_indices(mods[\$location][idx]);
  levels = map_values(mods[\$location][idx]);
 \}


 tools=(\{\});
 if(\$alterer."base:inventory")\{
  tools = \$alterer."base:inventory";
 \}

 if(\$actor."debug:2")\{
  EmitTo(\$actor,"ctl-----req is "+ dump_value(req));
  EmitTo(\$actor,"ctl-----levels is "+ dump_value(levels));
  EmitTo(\$actor,"ctl-----tools is "+ dump_value(tools));
 \}

 hasTools=(\{\});
 hasLevels=(\{\});

 if(sizeof(req)\>0)\{
  for(ctr=0;ctr\<sizeof(req);ctr++)\{
   for(ctr2=0;ctr2\<sizeof(tools);ctr2++)\{
    if(Get(tools[ctr2],req[ctr]) \&\& tools[ctr2]."tool:istool")\{
     if(!member(req[ctr],hasTools))hasTools+=(\{req[ctr]\});
     if(\$actor."debug:2") EmitTo(\$actor,"camtl-----found tool with " +req[ctr]);
     qt="design";
     if(tools[ctr2]."tool:qualitytrait")qt=tools[ctr2]."tool:qualitytrait";
     if(Get(tools[ctr2],"alteration:" + qt))\{
      if((int)Get(tools[ctr2],"alteration:" + qt)\>=(int)levels[ctr])\{
       if(!member(req[ctr],hasLevels))hasLevels +=(\{req[ctr]\});
       if(\$actor."debug:2") EmitTo(\$actor,"camtl-----found tool with level " + req[ctr]);
      \}
     \}
    \}
   \}
  \}
 \}

\}


/*
return
0 for pass
1 for no tools
2 for no tool levels
*/
if(sizeof(hasLevels) == sizeof(req)) return 0;
if(sizeof(hasTools) != sizeof(req)) return 1;
if(sizeof(hasLevels) != sizeof(req)) return 2;
return res;
      </Core:Property>
      <Core:Property property="merry:lib:getcurrentstatevalueforlocation">
         X[M] /*
\$objalter
\$mainstate
\$substate
\$location
*/

if(\$actor."debug:1" \|\| \$actor."debug:2") EmitTo(\$actor,"ENTER MGeneric:DB:State lib:getcurrentstatevalueforlocation");

if(\$actor."debug:2")\{
 EmitTo(\$actor,"csv-----\$objalter is "+ dump_value(\$objalter));
 EmitTo(\$actor,"csv-----\$mainstate is "+ dump_value(\$mainstate));
 EmitTo(\$actor,"csv-----\$substate is "+ dump_value(\$substate));
 EmitTo(\$actor,"csv-----\$location is "+ dump_value(\$location));

\}

if(Get(\$objalter,"state:" + \$mainstate + ":" + \$substate + ":" + \$location + ":value"))\{
 return (float)Get(\$objalter,"state:" + \$mainstate + ":" + \$substate + ":" + \$location +  + ":value");
\}
else\{
 return 0.0;
\}
      </Core:Property>
      <Core:Property property="merry:lib:getduration">
         X[M] /*
\$state
\$amount
\$currentvalue
\$location
*/

mapping duration;
float *val;
int sz;

if(\$actor."debug:1" \|\| \$actor."debug:2") EmitTo(\$actor,"ENTER MGeneric:DB:State lib:getduration");

if(\$state)\{
 if(\$state.duration)\{
  if(\$state.duration["all"])\{
   duration = \$state.duration["all"];
   val = map_indices(\$state.duration);
   sz = sizeof(val);
   if(\$currentvalue \> (float)val[sz])\$currentvalue = (float)val[sz];
   return duration[\$currentvalue];
  \}
  if(\$state.duration[\$location])\{
   duration = \$state.duration[\$location];
   val = map_indices(\$state.duration);
   sz = sizeof(val);
   if(\$currentvalue \> (float)val[sz])\$currentvalue = (float)val[sz];
   return duration[\$currentvalue];
  \}
 \}
\}

return -1.0;
      </Core:Property>
      <Core:Property property="merry:lib:getmodifier">
         X[M] /*
\$objalter
\$state
\$location
\$adverb
\$modification
*/

float retval;
mapping mods;

if(\$actor."debug:1" \|\| \$actor."debug:2")EmitTo(\$actor,"ENTER MGeneric:DB:State lib:getModifier");

if(\$actor."debug:2")\{
 EmitTo(\$actor,"gm-----\$objalter is " + dump_value(\$objalter));
 EmitTo(\$actor,"gm-----\$listname is " + dump_value(\$listname));
 EmitTo(\$actor,"gm-----\$location is " + dump_value(\$location));
 EmitTo(\$actor,"gm-----\$adverb is " + dump_value(\$adverb));
 EmitTo(\$actor,"gm-----\$modification is " + dump_value(\$modification));
\}

retval = 0.0;

if(Get(\$state,\$modification + "Modifiers"))\{
 mods = Get(\$state,\$modification + "Modifiers");
 if(mods["all"])\{
  if(mods["all"][\$adverb])\{
   retval = mods["all"][\$adverb];
  \}
 \}

 if(mods[\$location])\{
  if(mods[\$location][\$adverb])\{
   retval = \$mods[\$location][\$adverb];
  \}
 \}
\}

return retval;
      </Core:Property>
      <Core:Property property="merry:lib:getreplacesvalueforlocation">
         X[M] /*
\$objalter
\$state
\$location
*/

float value;
float tmp;
int ctr;

value=0.0;

if(\$actor."debug:1" \|\| \$actor."debug:2") EmitTo(\$actor,"ENTER MGeneric:DB:State lib:getreplacesvalueforlocation");

if(\$state.replaces)\{
 for(ctr=0;ctr\<sizeof(\$state.replaces);ctr++)\{
  if(Get(\$objalter,\$state.replaces[ctr] + ":" + \$location + ":value"))\{
   tmp =Get(\$objalter,\$state.replaces[ctr] + ":" + \$location + ":value");
   if(tmp\>value) value = tmp;
  \}
 \}
\}

return value;
      </Core:Property>
      <Core:Property property="merry:lib:getspeed">
         X[M] /*
\$state
\$amount
\$currentvalue
\$location
*/

mapping speed;
float *val;
int sz;

if(\$actor."debug:1" \|\| \$actor."debug:2") EmitTo(\$actor,"ENTER MGeneric:DB:State lib:getspeed");

if(\$state)\{
 if(\$state.speed)\{
  if(\$state.speed["all"])\{
   speed = \$state.speed["all"];
   val = map_indices(\$state.speed);
   sz = sizeof(val);
   if(\$currentvalue \> (float)val[sz])\$currentvalue = (float)val[sz];
   return speed[\$currentvalue];
  \}
  if(\$state.speed[\$location])\{
   speed = \$state.speed[\$location];
   val = map_indices(\$state.speed);
   sz = sizeof(val);
   if(\$currentvalue \> (float)val[sz])\$currentvalue = (float)val[sz];
   return speed[\$currentvalue];
  \}
 \}
\}

return -1.0;
      </Core:Property>
      <Core:Property property="merry:lib:getstateobject">
         X[M] /*
\$objalter
\$mainstate
\$substate
\$location
*/

string objName;

if(\$actor."debug:1" \|\| \$actor."debug:2") EmitTo(\$actor,"ENTER MGeneric:DB:State lib:getstateobject");

if(\$actor."debug:2")\{
 EmitTo(\$actor,"gso-----\$objalter is " + dump_value(\$objalter));
 EmitTo(\$actor,"gso-----\$mainstate is " + dump_value(\$mainstate));
 EmitTo(\$actor,"gso-----\$substate is " + dump_value(\$substate));
 EmitTo(\$actor,"gso-----\$location is " + dump_value(\$location));
\}

objName ="";

if(Get(\$objalter,"state:" + \$mainstate + ":"+ \$substate + ":stateobj"))\{
 objName = Get(\$objalter,"state:" + \$mainstate + ":" + \$substate + ":stateobj");
\}

if(Get(\$objalter,"state:" + \$mainstate + ":" + \$substate + ":" + \$location + ":stateobj"))\{
 objName = Get(\$objalter,"state:" + \$mainstate + ":" + \$substate + ":" + \$location + ":stateobj");
\}

if(\$actor."debug:2") EmitTo(\$actor,"gso-----objName is " + dump_value(objName));
return Obj(objName);
      </Core:Property>
      <Core:Property property="merry:lib:setstate">
         X[M] /*
\$mainState - the main state to be set
\$subState - sub state of the main state to be used
\$amount - the amount to alter the state by
\$adverb - adverb user, may cause amount or duration modifier
\$name - or the description to set the directly to
\$objAlter - the object to have the state changed
\$duration - how long the state exists for (one level)
\$durationAmount - amount to alter state by on each duration loop
\$location - location affected by state change
\$alterer - thing doing the altering

states should

1) have levels
2) have opposites and similars
3) have durations (even if these are infinite)
4) create details
5) have initial start code
6) have update code
7) have finish code (state returning to zero)
8) be modified through adverbs
9) have substates
10) have hooks for user defineable actions
11) states should be locational
12) states may have requirements for changing level

return values
0 - success
1 - invalid state change request
2 - cannot find list name for state change request

3 - does not have required skill for adverb used as amount modifier
4 - does not have required skill level for adverb used as amount modifier
5 - does not have required tools for adverb used as amount modifier
6 - does not have required tool levels for adverb used as amount modifier

7 - does not have required skill for adverb used as duration modifier
8 - does not have required skill level for adverb used as duration modifier
9 - does not have required tools for adverb used as duration modifier
10 - does not have required tool levels for adverb used as duration modifier

11 - does not have required skill for adverb used as speed modifier
12 - does not have required skill level for adverb used as speed modifier
13 - does not have required tools for adverb used as speed modifier
14 - does not have required tool levels for adverb used as speed modifier

15 - modified amount is zero or less

16 - no skill to do main alteration
17 - no skill level to do main alteration

18 - no tools to do main alteration
19 - no tool levels to do main alteration


*/

object state;
float amountmodifier;
float durationmodifier;
float speedmodifier;

int res;
float value;
float duration;
float speed;

float modifiedAmount;
float modifiedDuration;
float modifiedSpeed;
float singlestep;
string type;

/*debug outputs*/
if(\$actor."debug:1" \|\| \$actor."debug:2")EmitTo(\$actor,"ENTER MGeneric:DB:State lib:setstate");

if(\$actor."debug:2")\{
 EmitTo(\$actor,"ss----- \$mainstate is " + dump_value(\$mainstate));
 EmitTo(\$actor,"ss----- \$substate is " + dump_value(\$substate));
 EmitTo(\$actor,"ss----- \$amount is " + dump_value(\$amount));
 EmitTo(\$actor,"ss----- \$name is " + dump_value(\$name));
 EmitTo(\$actor,"ss----- \$objalter is " + dump_value(\$objalter));
 EmitTo(\$actor,"ss----- \$duration is " + dump_value(\$duration));
 EmitTo(\$actor,"ss----- \$durationAmount is " + dump_value(\$durationAmount));
 EmitTo(\$actor,"ss----- \$location is " + dump_value(\$location));
\}

/*inits*/
state = nil;
amountmodifier=0.0;
durationmodifier=0.0;

/*check if object uses states*/
if(!mgstate2::checkstaterequestisvalid(\$objalter: \$objaltar, \$mainstate: \$mainstate, \$substate: \$substate, \$location: \$location))
\{
 if(\$actor."debug:2") EmitTo(\$actor,"ss-----invalid state change request");
 return 1;
\}

/*get state object to be used*/
state = mgstate2::getstateobject(\$objalter: \$objalter, \$mainstate: \$mainstate, \$substate: \$substate, \$location: \$location);

if(state==nil)\{
 return 2;
\}

singlestep = state.singlestep;
type = state.type;

if(\$adverb)\{
 if(strip(\$adverb)!="")\{
  /*get value for amount modification for adverb*/
  amountmodifier = mgstate2::getmodifier(\$objalter: \$objalter, \$state: state, \$location: \$location, \$adverb: \$adverb, \$modification: "amount");

  if(amountmodifier != 0.0)\{
   /*check required skill level for amount modification for adverb*/
   res = mgstate2::checkmodifierskilllevels(\$alterer: \$alterer, \$state: state, \$adverb: \$adverb, \$location: \$location, \$modification: "amount");
   if(res==1) return 3;
   if(res==2) return 4;

   /*check required tool levels for amount modification for adverb*/
   res = mgstate2::checkmodifiertoollevels(\$alterer: \$alterer, \$state: state, \$adverb: \$adverb, \$location: \$location, \$modification: "amount");
   if(res==1)return 5;
   if(res==2)return 6;
  \}


  /*get duration ammendment amount for adverb*/
  durationmodifier = mgstate2::getmodifier(\$alterer: \$alterer, \$state: state, \$location: \$location, \$modification: "duration");
  if(durationmodifier != 0.0)\{
   /*check required skill level for duration modification for adverb*/
   res = mgstate2::checkmodifierskilllevels(\$alterer: \$alterer, \$state: state, \$adverb: \$adverb, \$location: \$location, \$modification: "duration");
   if(res==1) return 7;
   if(res==2) return 8;

   /*check required tool levels for duration modification for adverb*/
   res = mgstate2::checkmodifiertoollevels(\$alterer: \$alterer, \$state: state, \$adverb: \$adverb, \$location: \$location, \$modification: "duration");
   if(res==1)return 9;
   if(res==2)return 10;
  \}


/*get speed ammendment amount for adverb*/
  speedmodifier = mgstate2::getmodifier(\$alterer: \$alterer, \$state: state, \$location: \$location, \$modification: "speed");
  if(durationmodifier != 0.0)\{
   /*check required skill level for speed modification for adverb*/
   res = mgstate2::checkmodifierskilllevels(\$alterer: \$alterer, \$state: state, \$adverb: \$adverb, \$location: \$location, \$modification: "speed");
   if(res==1) return 11;
   if(res==2) return 12;

   /*check required tool levels for speed modification for adverb*/
   res = mgstate2::checkmodifiertoollevels(\$alterer: \$alterer, \$state: state, \$adverb: \$adverb, \$location: \$location, \$modification: "speed");
   if(res==1)return 13;
   if(res==2)return 14;
  \}

 \}
\}



/*get current state value for location*/
value = mgstate2::getcurrentstatevalueforlocation(\$objalter: \$objalter, \$mainstate: \$mainstate, \$substate: \$substate, \$location: \$location);

/*check replaces for values*/
if(value==0.0)\{
 value = mgstate2::getreplacesvalueforlocation(\$objalter: \$objalter, \$state: state, \$location: \$location);
\}


/*get duration*/
if(\$duration)\{
 duration = \$duration;
\}
else\{
 duration = mgstate2::getDuration(\$state: state, \$amount: \$amount, \$currentvalue: value);
\}

/*get speed*/
if(\$speed)\{
 speed=\$speed;
\}
else\{
 speed = mgstate2::getSpeed(\$state: state, \$amount: \$amount, \$currentvalue: value);
\}

modifiedAmount = \$amount + amountmodifier;
modifiedDuration = duration + durationmodifier;
modifiedSpeed = speed + speedmodifier;


if(modifiedAmount \<= 0.0) return 15;

if(duration != -1.0)\{
 if(modifiedDuration \< 0.0) modifiedDuration =0.0;
\}
/*check skill and skill levels if required*/
res = mgstate2::checkskilllevels(\$state: state, \$alterer: \$alterer, \$currentvalue: (float)value);
if(res==1) return 16;
if(res==2) return 17;

/*check for items with specified properties if required*/
res = mgstate2::checktoollevels(\$state: state, \$alterer: \$alterer, \$currentvalue: value);
if(res==1) return 18;
if(res==2) return 19;

/*call state pre hook*/
/*hook of type state:hooks:wound-bruise:pre*/
if(FindMerry(\$objalter,"lib","state:hooks:" + \$mainstate + "-" + \$substate + ":pre"))\{
 Call(\$objalter,"state:hooks:" + \$mainstate + "-" + \$substate + ":pre");
\}

/*do pauses for speed*/
if(modifiedSpeed \>0.0)\{
 \$modifiedSpeed = modifiedSpeed;
 \$ticks = (int)(modifiedAmount / singlestep);
 for(\$ctr=0;\$ctr\<\$ticks;\$ctr++)\{
  \$delay(\$modifiedSpeed, FALSE, "0bf4");
  /*call updatestate this changes state value, generates descriptions and does
initial and post checks as well*/
  mgstate2::updatestate();
  Call(state,"updatestatehook");
 \}
\}
else\{
  /*call updatestate this changes state value, generates descriptions and does
initial and post checks as well*/
  mgstate2::updatestate();
  Call(state,"updatestatehook");
 \}

/*if state has duration enter duration loop*/
/*duration loop reduces state level and remakes detail and descriptions*/
/*call update hook*/

if(duration\>0.0)\{
  mgstate2::updatestate();
  Call(state,"updatestatehook");
\}



if(FindMerry(\$objalter,"lib","state:hooks:" + \$mainstate + "-" + \$substate + ":pre"))\{
 Call(\$objalter,"state:hooks:" + \$mainstate + "-" + \$substate + ":post");
\}

return 0;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1064744413, "caltosdarr", "X", 1064744424, "caltosdarr", "E", 1064744474, "caltosdarr", "X", 1064746489, "caltosdarr", "X", 1064762135, "caltosdarr", "X", 1064762790, "caltosdarr", "X", 1064763043, "caltosdarr", "X", 1064843563, "caltosdarr", "E", 1064843615, "caltosdarr", "X", 1064845411, "caltosdarr", "E", 1064845432, "caltosdarr", "E", 1097622322, "zwoc", "S", 1097622322, "zwoc", "S" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="{author}">
         "StoryCoder Kuang"
      </Core:Property>
      <Core:Property property="{email}">
         "kuang@marrach.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1097622322
      </Core:Property>
      <Core:Property property="{sub_rev}">24</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1064744424" state="Open" user="caltosdarr">
           New state DB allowing locational, durational and adverb modifiable states.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
