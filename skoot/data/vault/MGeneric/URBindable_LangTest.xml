<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(MGeneric:Thing)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="true" inside="false" near="true" over="false" behind="false" before="false" beside="true"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="bindable"/>
          <Base:Adjective adjective="plain"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $(this.trait:brief:override) |$(this.trait:brief:override)|$(this.data:state:wear){? not | $(this.data:state:wear) | $(this.data:state:condition) |, $(this.data:state:condition)} {? | $(this.alteration:color:desc) |{? | $(this.alteration:binding:desc) |$(this.alteration:color:desc) $(this.alteration:binding:desc) |$(this.alteration:color:desc) }|{? | $(this.alteration:binding:desc) |$(this.alteration:binding:desc) |unbound }}{? | $(this.alteration:variant) |$(this.alteration:variant) |}$(this.trait:superbrief)}
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:examine:override) |$(this.trait:examine:override)| <describe what="$(this)" cap="1" nonposs="1"/>.{? | $(this.alteration:embossing:desc) | It is embossed with $[mggeneral::aan($word: this."alteration:embossing:desc")].}{? | $(this.alteration:mastermark) | You notice the professional mark of $(this.alteration:mastermark).|}} {? | $(this.trait:cover:text) |<sbr/><describe what="$(this)" nonposs="1" cap="1"/> is titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"}
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:look:override) |$(this.trait:look:override)| <describe what="$(this)" cap="1" nonposs="1"/>.{? | $(this.alteration:embossing:desc) | You can see it has been embossed.|}} {? | $(this.trait:cover:text) |<sbr/><describe what="$(this)" nonposs="1" cap="1"/> is titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="cover" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="cover"/>
            <Base:SName sname="title"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="covers"/>
            <Base:PName pname="titles"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             <describe what="$(this)" nonposs="1"/> cover {? | $(this.trait:cover:text) |titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"}
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:cover:text) |<describe what="$(this)" nonposs="1"/> is titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"|The cover of <describe what="$(this)" nonposs="1"/> is blank.}
          </Base:Description>
          <Base:Description type="look">
             The cover of <describe what="$(this)" nonposs="1"/>. {? | $(this.trait:cover:text) |<sbr/><describe what="$(this)" nonposs="1" cap="1"/> is titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="spine" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="spine"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="spines"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="book"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the spine of <describe what="$(this)" nonposs="1"/> {? | $(this.trait:cover:text) |titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"}
          </Base:Description>
          <Base:Description type="look">
             The spine of <describe what="$(this)" nonposs="1"/>. {? | $(this.trait:cover:text) |<describe what="$(this)" nonposs="1" cap="1"/> is titled "$[UnSAM(ParseXML($this."trait:cover:text"))]"|The cover of <describe what="$(this)" nonposs="1"/> is blank.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:alteration:binding:amount">
         0.25
      </Core:Property>
      <Core:Property property="export:alteration:color:amount">
         0.1
      </Core:Property>
      <Core:Property property="export:alteration:traits">
         ([ "binding":"bookbinder", "color":"dyer", "embossing":"embosser" ])
      </Core:Property>
      <Core:Property property="export:construction:isbase">
         "true"
      </Core:Property>
      <Core:Property property="export:item:type">
         "literature"
      </Core:Property>
      <Core:Property property="export:trait:superbrief">
         "bindable object"
      </Core:Property>
      <Core:Property property="export:writable">
         "true"
      </Core:Property>
      <Core:Property property="merry:lib:erasepage">
         X[M] /*
 * erase writing from page
 */
string d1,d2;
string detail;


this = NRefOb(\$target);


if(\$this."trait:sealed")\{
 EmitTo(\$actor,"The book seems to resist being erased.");
 return FALSE;
 \};


/*make sure \$actor is holding*/
if(this."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding the book to erase text from it.");
 return FALSE;
\}

detail = NRefDetail(\$target);
mggeneral::debugvalue(\$func: "rww", \$var: "detail", \$val: detail);

if(detail=="default")\{
 EmitTo(\$actor,"You must specify a page to erase. i.e. erase my book's 1st page");
 return FALSE;
\}


if(detail=="cover")\{
 this."trait:page00" = nil;
\}
else\{
 Set(this,"trait:" + detail,nil);
\}

d1=Describe(\$target,nil,\$actor);
d2=Describe(\$target,\$actor);

if(\$actor."base:environment")\{
 EmitTo(\$actor,"You thourougly erase " +  d1 + ".");
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:readpage">
         X[M] /*
 * read the page
 */
string d1,d2,d3;
string detail;
string adv;
string txt;

this = NRefOb(\$target);

/*make sure \$actor is holding*/
if(this."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding the book to read from it.");
 return FALSE;
\}

detail = NRefDetail(\$target);
adv="";
if(\$adverb) adv = " " + \$adverb;

if(detail=="default")\{
 EmitTo(\$actor,"[TIP: You must specify a page to read. i.e. Read my book's 1st page]");
 return FALSE;
\}

txt="";

if(detail=="cover")\{
 if(this."trait:page00")\{
  txt = this."trait:page00";
 \}
\}
else\{
 if(Get(this, "trait:" + detail))\{
  txt = Get(this, "trait:" + detail);
 \}
\}

d1=Describe(NRefOb(\$target),nil,\$actor);
d2=Describe(NRefOb(\$target),\$actor);
d3=Describe(\$target,nil,\$actor);


if(\$actor."base:environment")\{
 EmitTo(\$actor,"You read " + d1 + adv + ".");

 if(txt!="")\{
  EmitTo(\$actor, UnSAM(ParseXML("Upon " + d3 + " is written:\\n" + txt)));
  EmitTo(\$actor, ParseXML(txt));
 \}
 else \{
  EmitTo(\$actor,d3 + " is blank.");
 \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:lib:writepage">
         X[M] /*
 * write things on the page
 * edited January 8, 2011 to allow write/read in other languages by GEIST - geist@marrach.skotos.net
 */
string d1,d2;
string detail;
object page;
string text, evoke;
mixed langlevel;

this = NRefOb(\$target);

if(\$this."trait:sealed")\{
 EmitTo(\$actor,"The book seems to resist being written in.");
 return FALSE;
 \};

/*make sure \$actor is holding*/
if(this."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding the book to write in it.");
 return FALSE;
\}

if(!\$(raw-evoke))\{
 EmitTo(\$actor,"You specify something to actually write in your book.");
 return FALSE;
\}

detail = NRefDetail(\$target);
mggeneral::debugvalue(\$func: "rww", \$var: "detail", \$val: detail);

if(detail=="default")\{
 EmitTo(\$actor,"You must specify a page upon which to write. i.e. write on my book's 1st page \\"What a wonderful book this is!\\"");
 return FALSE;
\}

/*Following adapted from Neoct:Writing:Actions:write */
/* This code lets you write in languages - Aziel, 13, June 2004 */
langlevel = ((\$r1 = \$actor."skotos:currentlang") ? \$r1 : 0);

if (langlevel \&\& langlevel != 0 \&\& langlevel != "0" \&\& strlen(\$(raw-evoke)) \> 0)
 \{
 evoke = INLANG(Get(\$\{Data:Languages:languages\}, "language:" + langlevel), Get(\$actor, "skill:lang" + langlevel),
          \$(raw-evoke));
 \}
 else
 \{
 evoke = \$(raw-evoke);
 \}

if(detail=="cover")
 \{
 if(!this."trait:page00")
  \{
  this."trait:page00" = evoke;
  \}
  else
  \{
  this."trait:page00" += "\\n" + evoke;
  \}
 \}
 else
 \{
 if(!Get(this,"trait:"+detail))
  \{
  Set(this,"trait:"+detail,evoke);
  \}
  else
  \{
  Set(this,"trait:"+detail,Get(this,"trait:"+detail) + "\\n" +evoke);
  \}
 \}

d1=Describe(\$target,nil,\$actor);
d2=Describe(\$target,\$actor);

if(\$actor."base:environment")\{
 EmitTo(\$actor,"You write \\"" + \$(raw-evoke) + "\\" upon " + d1 + ".");
\}

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:recite-dob">
         X[M] string d1,d2,d3;
string detail;
string adv;
string txt;

if(\$this."base:environment" != \$actor)\{
   EmitTo(\$actor,"You must beholding the book to recite from it.");
   return FALSE;
   \};

detail = NRefDetail(\$target);
adv="";
if(\$adverb) adv = " " + \$adverb;

if(detail=="default")\{
 EmitTo(\$actor,"[TIP: You must specify a page to read. i.e. Read my book's 1st page]");
 return FALSE;
\}

txt="";

if(detail=="cover")\{
 if(this."trait:page00")\{
  txt = this."trait:page00";
 \}
\}
else\{
 if(Get(this, "trait:" + detail))\{
  txt = Get(this, "trait:" + detail);
 \}
\}

d1=Describe(NRefOb(\$target),nil,\$actor);
d2=Describe(NRefOb(\$target),\$actor);
d3=Describe(\$target,nil,\$actor);


if(\$actor."base:environment")\{
 if(txt!="")\{
  EmitIn(\$actor."base:environment",Describe(\$actor) + " recites from " + d2 + ":\\n\\n" + txt);
 \}
 else \{
  EmitTo(\$actor,d3 + " is blank.");
 \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react-pre:recite-iob">
         X[M] string d1,d2,d3;
string detail;
string adv;
string txt;

if(\$this."base:environment" != \$actor)\{
   EmitTo(\$actor,"You must beholding the book to recite from it.");
   return FALSE;
   \};

detail = NRefDetail(\$target);
adv="";
if(\$adverb) adv = " " + \$adverb;

if(detail=="default")\{
 EmitTo(\$actor,"[TIP: You must specify a page to read. i.e. Read my book's 1st page]");
 return FALSE;
\}

txt="";

if(detail=="cover")\{
 if(this."trait:page00")\{
  txt = this."trait:page00";
 \}
\}
else\{
 if(Get(this, "trait:" + detail))\{
  txt = Get(this, "trait:" + detail);
 \}
\}

d1=Describe(\$target,nil,\$actor);
d2=Describe(\$target,\$actor);
d3=Describe(\$target,nil,\$actor);


if(\$actor."base:environment")\{
 if(txt!="")\{
  EmitIn(\$actor."base:environment",Describe(\$actor) + " recites from " + d2 + ":\\n\\n" + txt);
 \}
 else \{
  EmitTo(\$actor,d3 + " is blank.");
 \}
\}
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:copy-dob">
         X[M] if(sizeof(\$dob) \> 1)\{
 return TRUE;
 \};

if(!\$iob)\{
 return TRUE;
 \};

if(sizeof(\$iob) \> 1)\{
 return TRUE;
 \};

\$source = NRefOb(\$dob[0]);
\$target = NRefOb(\$iob[0]);

if(\$source."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding " + Describe(\$source) + " to do that.");
 return FALSE;
 \};

if(\$target."base:environment" != \$actor)\{
 EmitTo(\$actor,"You must be holding " + Describe(\$target) + " to do that.");
 return FALSE;
 \};

if(\$source."trait:page00")\{
 \$text = Get(\$source,"trait:page00");
 Set(\$target,"trait:page00",\$text);
 \};

if(\$source."trait:page01")\{
 \$text = Get(\$source,"trait:page01");
 Set(\$target,"trait:page01",\$text);
 \};

if(\$source."trait:page02")\{
 \$text = Get(\$source,"trait:page02");
 Set(\$target,"trait:page02",\$text);
 \};

if(\$source."trait:page03")\{
 \$text = Get(\$source,"trait:page03");
 Set(\$target,"trait:page03",\$text);
 \};

if(\$source."trait:page04")\{
 \$text = Get(\$source,"trait:page04");
 Set(\$target,"trait:page04",\$text);
 \};

if(\$source."trait:page05")\{
 \$text = Get(\$source,"trait:page05");
 Set(\$target,"trait:page05",\$text);
 \};

if(\$source."trait:page06")\{
 \$text = Get(\$source,"trait:page06");
 Set(\$target,"trait:page06",\$text);
 \};

if(\$source."trait:page07")\{
 \$text = Get(\$source,"trait:page07");
 Set(\$target,"trait:page07",\$text);
 \};

if(\$source."trait:page08")\{
 \$text = Get(\$source,"trait:page08");
 Set(\$target,"trait:page08",\$text);
 \};

if(\$source."trait:page09")\{
 \$text = Get(\$source,"trait:page09");
 Set(\$target,"trait:page09",\$text);
 \};

if(\$source."trait:page10")\{
 \$text = Get(\$source,"trait:page10");
 Set(\$target,"trait:page10",\$text);
 \};

if(\$source."trait:page11")\{
 \$text = Get(\$source,"trait:page11");
 Set(\$target,"trait:page11",\$text);
 \};

if(\$source."trait:page12")\{
 \$text = Get(\$source,"trait:page12");
 Set(\$target,"trait:page12",\$text);
 \};

if(\$source."trait:page13")\{
 \$text = Get(\$source,"trait:page13");
 Set(\$target,"trait:page13",\$text);
 \};

if(\$source."trait:page14")\{
 \$text = Get(\$source,"trait:page14");
 Set(\$target,"trait:page14",\$text);
 \};

if(\$source."trait:page15")\{
 \$text = Get(\$source,"trait:page15");
 Set(\$target,"trait:page15",\$text);
 \};

if(\$source."trait:page16")\{
 \$text = Get(\$source,"trait:page16");
 Set(\$target,"trait:page16",\$text);
 \};

if(\$source."trait:page17")\{
 \$text = Get(\$source,"trait:page17");
 Set(\$target,"trait:page17",\$text);
 \};

if(\$source."trait:page18")\{
 \$text = Get(\$source,"trait:page18");
 Set(\$target,"trait:page18",\$text);
 \};

if(\$source."trait:page19")\{
 \$text = Get(\$source,"trait:page19");
 Set(\$target,"trait:page19",\$text);
 \};

if(\$source."trait:page20")\{
 \$text = Get(\$source,"trait:page20");
 Set(\$target,"trait:page20",\$text);
 \};

if(\$source."trait:page21")\{
 \$text = Get(\$source,"trait:page21");
 Set(\$target,"trait:page21",\$text);
 \};

if(\$source."trait:page22")\{
 \$text = Get(\$source,"trait:page22");
 Set(\$target,"trait:page22",\$text);
 \};

if(\$source."trait:page23")\{
 \$text = Get(\$source,"trait:page23");
 Set(\$target,"trait:page23",\$text);
 \};

if(\$source."trait:page24")\{
 \$text = Get(\$source,"trait:page24");
 Set(\$target,"trait:page24",\$text);
 \};

if(\$source."trait:page25")\{
 \$text = Get(\$source,"trait:page25");
 Set(\$target,"trait:page25",\$text);
 \};

if(\$source."trait:page26")\{
 \$text = Get(\$source,"trait:page26");
 Set(\$target,"trait:page26",\$text);
 \};

if(\$source."trait:page27")\{
 \$text = Get(\$source,"trait:page27");
 Set(\$target,"trait:page27",\$text);
 \};

if(\$source."trait:page28")\{
 \$text = Get(\$source,"trait:page28");
 Set(\$target,"trait:page28",\$text);
 \};

if(\$source."trait:page29")\{
 \$text = Get(\$source,"trait:page29");
 Set(\$target,"trait:page29",\$text);
 \};

if(\$source."trait:page30")\{
 \$text = Get(\$source,"trait:page30");
 Set(\$target,"trait:page30",\$text);
 \};

if(\$source."trait:page31")\{
 \$text = Get(\$source,"trait:page31");
 Set(\$target,"trait:page31",\$text);
 \};

if(\$source."trait:page32")\{
 \$text = Get(\$source,"trait:page32");
 Set(\$target,"trait:page32",\$text);
 \};

EmitTo(\$actor,"You copy the contents of " + Describe(\$source, \$actor) + " into " + Describe(\$target,\$actor) +".");
EmitIn(\$actor."base:environment",Describe(\$actor) + " copies the contents of " + Describe(\$source,nil,\$actor) + " into " + Describe(\$target,nil,\$actor) +".");
      </Core:Property>
      <Core:Property property="merry:react:erase-what">
         X[M] Call(this,"erasepage");

return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:kiss-dob">
         X[M] if(\$this."trait:sealed")\{
 \$sealer = Get(\$this,"trait:sealed");
 if(\$sealer != \$actor)\{
  EmitTo(\$actor,"That book was sealed by someone else, you cannot unseal it.");
  return FALSE;
  \};
 EmitTo(\$actor,"You unseal the contents of the book, allowing further revision.");
 Set(\$this,"trait:sealed",nil);
 \}
else\{
 EmitTo(\$actor,"You seal the contents of the book, prohibiting further revision.");
 Set(\$this,"trait:sealed",\$actor);
 \};
      </Core:Property>
      <Core:Property property="merry:react:read-what">
         X[M] Call(this,"readpage");
return FALSE;
      </Core:Property>
      <Core:Property property="merry:react:write-what">
         X[M] Call(this,"writepage");
return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1106323959, "sorcha", "X", 1106325484, "sorcha", "K", 1106325528, "sorcha", "X", 1118771896, "sorcha", "K", 1121101594, "sorcha", "X", 1121101809, "sorcha", "K", 1125456472, "tomdowd", "K", 1125456499, "tomdowd", "K", 1125456520, "tomdowd", "E", 1215998470, "tomdowd", "E", 1219975815, "tonyd", "E", 1219975992, "tonyd", "E", 1219976033, "tonyd", "E", 1219976185, "tonyd", "E", 1219976254, "tonyd", "E", 1240099716, "meepy", "E", 1255311570, "meepy", "X", 1256176303, "meepy", "X", 1256453940, "meepy", "E", 1256454050, "meepy", "E", 1258110879, "meepy", "K", 1294521971, "tomdowd", "R", 1294522479, "tomdowd", "P", 1295400868, "tomdowd", "P", 1295401092, "tomdowd", "P", 1295401179, "tomdowd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
