<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:react-post:unwear">
         X[M] /* Newest Disguise Code */
/*
extended MGeneric disguise. Disguises now use the following:

disguise:hides-scar - if present signals that the disguise hides scars on covered areas
disguise:hides-wound - if present signals that the disguise hides wounds on covered areas
disguise:hides-bruise - if present signals that the disguise hides bruises on covered areas
disguise:hides-tattoo - if present signals that the disguise hides tattoos on covered areas
disguise:descriptions - mapping of disguised areas and their descriptions (nb: a 'default' setting is used for all locations not specifically described)
*/

string *hiddendetails,*hiddenlocations,*ix, *hiddenloc;
int ctr,ctr2,ctr3,ctr4;
string hidedetail;
mapping propmap;
string *arr,*arrd,*tmp,*tmp2,*arr2;
int priority,priority2;
object obj;

string title,brief,look,examine,superbrief;

hiddendetails = (\{"wound","bruise","scar"\});
hiddenloc = (\{"wound:woundlocations","wound:bruiselocations","healing:scarlocations"\});

 \$actor."descriptions:cache" = nil;

 \$actor."disguise:disguises" -= (\{this\});

/* if the wearer is a Royal Army office or related, reset that fact */
/* so the CNPC guards salute him */
/* GEIST - 17Dec05 */

if(\$actor."disguise:status:officer") \{
 \$actor."marrach:status:officer" = \$actor."disguise:status:officer";
 \$actor."disguise:status:officer" = 0;
\}

if(\$actor."disguise:status:royalty") \{
 \$actor."marrach:status:royalty" = \$actor."disguise:status:royalty";
 \$actor."disguise:status:royalty" = 0;
\}

 /*take off last diguise*/
 if(sizeof(\$actor."disguise:disguises")==0)\{
    \$actor."theatre:notwhobody" = FALSE;
    \$actor.disguised = nil;

    \$actor."trait:superbrief" = \$actor."disguise:superbrief" ;
    \$actor."trait:title" = \$actor."disguise:title";
    \$actor."appearance:title" = \$actor."disguise:title";
    \$actor."trait:override:brief" = \$actor."disguise:override:brief";
    \$actor."trait:override:look" = \$actor."disguise:override:look";
    \$actor."trait:override:examine" = \$actor."disguise:override:examine";

    \$actor."disguise:superbrief" = nil;
    \$actor."disguise:title" = nil;
    \$actor."disguise:override:brief" = nil;
    \$actor."disguise:override:look" = nil;
    \$actor."disguise:override:examine" = nil;
    \$actor."disguise:descriptions" = nil;
    \$actor."disguise:wearpriority" = nil;
/* Code change - Feb 05 2005 - GEIST - changed following line, */
/* replacing final \$actor."skotos:charname" with TRUE */
/* Bug fix #12920 */
    Set(\$actor, "details:default:sname:" + \$actor."skotos:charname", TRUE);


    if(\$actor."disguise:details:adjectives")\{
        arr=map_indices(\$actor."disguise:details:adjectives");
        for(ctr=0;ctr\<sizeof(arr);ctr++)\{
           Set(\$actor,"details:default:adjective:" + arr[ctr],nil);
        \}
        \$actor."disguise:details:adjectives" = nil;
     \}

 \}
 else\{
   if(this."disguise:descriptions")\{
      arr=map_indices(this."disguise:descriptions");


      for(ctr=0;ctr\<sizeof(arr);ctr++)\{

         if(\$actor."disguise:details:adjectives")\{
            if(\$actor."disguise:details:adjectives"[arr[ctr]])\{
               arr2=\$actor."disguise:details:adjectives"[arr[ctr]];
               for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                  Set(\$actor,"details:" + arr[ctr] +":adjective:"+arr2[ctr3],FALSE);
               \}
               \$actor."disguise:details:adjectives"[arr[ctr]]=nil;
            \}
         \}


         priority=0;
         arrd=(\{\});
         for(ctr2=0;ctr2\<sizeof(\$actor."disguise:disguises");ctr2++)\{
            obj=\$actor."disguise:disguises"[ctr2];
            priority2=0;
            if(obj."disguise:wearpriority")\{
                if(obj."disguise:wearpriority"[arr[ctr]])\{
                   if(obj."disguise:wearpriority"[arr[ctr]]\>=priority)\{
                       priority2=obj."disguise:wearpriority"[arr[ctr]];
                   \}
                \}
            \}
            if(priority2\>=priority)\{
               if(obj."disguise:descriptions")\{
                  if(obj."disguise:descriptions"[arr[ctr]])\{
                     arrd=obj."disguise:descriptions"[arr[ctr]];
                  \}
               \}
               priority=priority2;
            \}
         \}

         if(sizeof(arrd)==0)\{
            \$actor."disguise:descriptions"[arr[ctr]]=nil;
            \$actor."disguise:wearpriority"[arr[ctr]]=nil;
         \}
         else\{
            \$actor."disguise:descriptions"[arr[ctr]]=arrd;
            \$actor."disguise:wearpriority"[arr[ctr]]=priority;
         \}
      \}
   \}

   title = \$actor."disguise:title";
   brief = \$actor."disguise:override:brief";
   look = \$actor."disguise:override:look";
   examine = \$actor."disguise:override:examine";
   superbrief = \$actor."disguise:superbrief";

   for(ctr=sizeof(\$actor."disguise:disguises")-1;ctr\>=0;ctr--)\{
      obj=\$actor."disguise:disguises"[ctr];
      if(obj."disguise:superbrief")\{
         if(obj."disguise:title")\{
             title = UnSAM(obj."disguise:title");
         \}

         if(obj."disguise:superbrief")\{
             superbrief = UnSAM(obj."disguise:superbrief",\$this: \$actor);
             \$actor."trait:superbrief" = superbrief;
         \}

         if(obj."disguise:override:brief")\{
             brief = UnSAM(obj."disguise:override:brief",\$this: \$actor);
         \}

         if(obj."disguise:override:look")\{
             look = UnSAM(obj."disguise:override:look",\$this: \$actor);
             examine = UnSAM(obj."disguise:override:look",\$this: \$actor);
         \}

         if(this."disguise:override:examine")\{
             examine = UnSAM(obj."disguise:override:examine",\$this: \$actor);
         \}
         break;
      \}
   \}
   \$actor."trait:title" = title;
   \$actor."trait:superbrief" = superbrief;
   \$actor."trait:override:brief" = brief;
   \$actor."trait:override:look" = look;
   \$actor."trait:override:examine" = examine;
 \}

 /*remove snames and pnames*/
 if(this."disguise:names")\{
    for(ctr=0;ctr\<sizeof(this."disguise:names");ctr++)\{
       Set(\$actor,"details:default:sname:"+this."disguise:names"[ctr],nil);
    \}
 \}

 /*remove in adjectives*/
 if(this."disguise:adjectives")\{
    if(\$actor."disguise:details:adjectives")\{
       arr=map_indices(\$this."disguise:adjectives");
       for(ctr=0;ctr\<sizeof(arr);ctr++)\{
          if(\$actor."disguise:details:adjectives"[arr[ctr]])\{
             \$actor."disguise:details:adjectives"[arr[ctr]]--;
             if(\$actor."disguise:details:adjectives"[arr[ctr]]==0)\{
                Set(\$actor,"details:default:adjective:" + arr[ctr],nil);
                \$actor."disguise:details:adjectives"[arr[ctr]]=nil;
             \}
          \}
        \}
     \}
 \}

 /*re-show*/
 for(ctr=0;ctr\<sizeof(hiddendetails);ctr++)\{
    if(Get(this,"disguise:hides-" + hiddendetails[ctr]))\{
       if(Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr]))\{
          Set(\$actor,"disguise:hashidden-" + hiddendetails[ctr],Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr])-1);
          if(Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr])==0)\{
             Set(\$actor,"disguise:hashidden-" + hiddendetails[ctr],nil);
          \}

          if(!Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr]))\{
             if(Get(\$actor,hiddenloc[ctr]))\{
                hiddenlocations = map_indices(Get(\$actor,hiddenloc[ctr]));
                for(ctr2=0;ctr2\<sizeof(hiddenlocations);ctr2++)\{
                   hidedetail = "details:" + hiddenlocations[ctr2] + "-" + hiddendetails[ctr] + ":hidden";
                   Set(\$actor,hidedetail,0);
                \}
             \}
          \}
       \}
    \}
 \}

 /*re-show tattoos*/
 if(this."disguise:hides-tattoo")\{
    if(\$actor."disguise:hashidden-tattoo")\{
       \$actor."disguise:hashidden-tattoo"--;
       if(\$actor."disguise:hashidden-tattoo"==0)\{
         \$actor."disguise:hashidden-tattoo" = nil;
         propmap = \$actor."*";
         ix = map_indices(propmap);
         for(ctr=0;ctr2\<sizeof(ix);ctr2++)\{
            if(sscanf(ix[ctr2],"alteration:%s:tattoo",hidedetail)==1)\{
               if(Get(\$actor,ix[ctr2])!="none")\{
                  Set(\$actor,"details:" + hidedetail + "-tattoo:hidden",FALSE);
               \}
            \}
         \}
       \}
    \}
 \}
/*re hide and show details*/
 if(\$actor."disguise:unwearshowdetails")\{
    if(this."disguise:hidedetails")\{
        tmp = map_indices(this."disguise:hidedetails");
        for(ctr3=0;ctr3\<sizeof(tmp);ctr3++)\{
           tmp2 = this."disguise:hidedetails"[tmp[ctr3]];
           for(ctr4=0;ctr4\<sizeof(tmp2);ctr4++)\{
              if(\$actor."disguise:unwearshowdetails"[tmp2[ctr4]])\{
                 \$actor."disguise:unwearshowdetails"[tmp2[ctr4]]--;
                 if(\$actor."disguise:unwearshowdetails"[tmp2[ctr4]]==0)\{
                    Set(\$actor,"details:" + tmp2[ctr4] + ":hidden",0);
                    \$actor."disguise:unwearshowdetails"[tmp2[ctr4]]=nil;
                 \}
              \}
           \}
        \}
    \}
 \}

 if(\$actor."disguise:unwearhidedetails")\{
    if(this."disguise:descriptions")\{
       tmp = map_indices(this."disguise:descriptions");
       for(ctr3=0;ctr3\<sizeof(tmp);ctr3++)\{
          if(\$actor."disguise:unwearhidedetails"[tmp[ctr3]])\{
             \$actor."disguise:unwearhidedetails"[tmp[ctr3]]--;
             if(\$actor."disguise:unwearhidedetails"[tmp[ctr3]]==0)\{
                 Set(\$actor,"details:" + tmp[ctr3] + ":hidden",1);
                 \$actor."disguise:unwearhidedetails"[tmp[ctr3]]=nil;
             \}
          \}
       \}
    \}
 \}




\$clothes = (\$this."clothes:hidden" ? \$this."clothes:hidden" : (\{ \}));
\$sz      = sizeof(\$clothes);

for (\$i = 0; \$i \< \$sz; \$i++) \{
  Set(\$clothes[\$i], "details:default:hidden:local", nil);
\}

\$this."clothes:hidden" = nil;

\$this."tracker:lastremoved" = ([ time():\$actor ]);
\$db = mggeneral::fetchdatadb(\$data: "DataDB", \$obj: \$actor);
if(\$db)\{
   \$tracker = \$db.cloaktracker;
   if(!\$tracker)\$tracker=([]);
   if (member(\$actor, map_indices(\$tracker))) \{
      \$singletracker = \$tracker[\$actor];
      if (member(map_indices(\$this."tracker:lastworn")[0], map_indices(\$singletracker))) \{
         \$singletracker[map_indices(\$this."tracker:lastworn")[0]] = nil;
         \$singletracker += ([ map_indices(\$this."tracker:lastworn")[0]:map_indices(\$this."tracker:lastremoved")[0] ]);
         \$tracker[\$actor] = nil;
         \$tracker += ([ \$actor:\$singletracker ]);
         \$db.cloaktracker = \$tracker;
      \}
   \}
\}

if(\$actor."disguise:disguises")\{
   if(sizeof(\$actor."disguise:disguises")==0)\{
      \$actor."disguise:disguises" = nil;
      \$actor."disguise:unwearhidedetails" = nil;
      \$actor."disguise:unwearshowdetails" = nil;
   \}
\}

return TRUE;
      </Core:Property>
      <Core:Property property="merry:react-post:wear">
         X[M] /*

D=set up all the disguise stuff on wearing disguise...including detail descriptions, layering disguises, hide/show/create details

extended MGeneric disguise. Disguises now use the following:pa

disguise:hides-scar - if present signals that the disguise hides scars on covered areas
disguise:hides-wound - if present signals that the disguise hides wounds on covered areas
disguise:hides-bruise - if present signals that the disguise hides bruises on covered areas
disguise:hides-tattoo - if present signals that the disguise hides tattoos on covered areas
disguise:descriptions - mapping of disguised areas and their descriptions (nb: a 'default' setting is used for all locations not specifically described)
*/

string *hiddendetails,*hiddenlocations,*ix,*hiddenloc;
int ctr,ctr2,ctr3;
string hidedetail,name;
mapping propmap;
string *arr,*tmpHD,*arr2;
mapping tmp;
int priority;

hiddendetails = (\{"wound","bruise","scar"\});
hiddenloc = (\{"wound:woundlocations","wound:bruiselocations","healing:scarlocations"\});

/* do not hide wearer on Who if property set - GEIST - 24Feb05 */
if(this."disguise:hides-who"!=nil)\{
   \$actor."theatre:notwhobody" = TRUE;
\}
\$actor.disguised = TRUE;
\$actor.undisguised = nil;

/* if the wearer is a Royal Army office or related, hide that fact */
/* so the CNPC guards don't salute him */
/* GEIST - 17Dec05 */

if(\$actor."marrach:status:officer") \{
 \$actor."disguise:status:officer" = \$actor."marrach:status:officer";
 \$actor."marrach:status:officer" = nil;
\}

if(\$actor."marrach:status:royalty") \{
 \$actor."disguise:status:royalty" = \$actor."marrach:status:royalty";
 \$actor."marrach:status:royalty" = nil;
\}

/*copy over the disguise descriptions to affect detail descriptions*/
if(!\$actor."disguise:disguises") \$actor."disguise:disguises" = (\{\});


 /*record names on wearing first disguise*/
if(sizeof(\$actor."disguise:disguises")==0)\{
   \$actor."disguise:superbrief" = \$actor."trait:superbrief";
   \$actor."disguise:title" = \$actor."trait:title";
   Set(\$actor, "details:default:sname:" + \$actor."skotos:charname", nil);
   Set(\$actor, "details:default:pname:" + \$actor."skotos:charname", nil);
   \$actor."disguise:override:brief" = \$actor."trait:override:brief";
   \$actor."disguise:override:look" = \$actor."trait:override:look";
   \$actor."disguise:override:examine" = \$actor."trait:override:examine";
\}

if(!\$actor."disguise:descriptions")\{
   \$actor."disguise:descriptions" = ([]);
   \$actor."disguise:wearpriority" = ([]);
\}

 /*add in descriptions taking into account wearpriority on disguises*/
if(this."disguise:descriptions")\{

   arr=map_indices(this."disguise:descriptions");

   for(ctr=0;ctr\<sizeof(arr);ctr++)\{
      if(!\$actor."disguise:descriptions"[arr[ctr]])\{
          \$actor."disguise:descriptions" += ([arr[ctr]:this."disguise:descriptions"[arr[ctr]]]);
          priority=0;
          if(this."disguise:wearpriority")\{
             if(this."disguise:wearpriority"[arr[ctr]])priority = this."disguise:wearpriority"[arr[ctr]];
          \}
          \$actor."disguise:wearpriority" += ([arr[ctr]:priority]);

          if(\$this."disguise:details:adjectives")\{
             if(\$this."disguise:details:adjectives"[arr[ctr]])\{
                arr2=\$this."disguise:details:adjectives"[arr[ctr]];
                for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                   Set(\$actor,"details:" + arr[ctr] +":adjective:"+arr2[ctr3],TRUE);
                \}
                if(!\$actor."disguise:details:adjectives")\$actor."disguise:details:adjectives" = ([]);
                \$actor."disguise:details:adjectives" += ([arr[ctr]:arr2]);
             \}
          \}
      \}
      else\{
          priority=0;
          if(this."disguise:wearpriority")\{
             if(this."disguise:wearpriority"[arr[ctr]])priority = this."disguise:wearpriority"[arr[ctr]];
          \}
          if(\$actor."disguise:wearpriority"[arr[ctr]]\<=priority)\{
             \$actor."disguise:descriptions"[arr[ctr]]=this."disguise:descriptions"[arr[ctr]];
             \$actor."disguise:wearpriority"[arr[ctr]]=priority;

             if(\$this."disguise:details:adjectives")\{
                if(\$this."disguise:details:adjectives"[arr[ctr]])\{

                   if(!\$actor."disguise:details:adjectives")\{
                      \$actor."disguise:details:adjectives" = ([]);
                   \}

                   if(\$actor."disguise:details:adjectives"[arr[ctr]])\{
                      arr2=\$actor."disguise:details:adjectives"[arr[ctr]];
                      for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                         Set(\$actor,"details:" + arr[ctr] + ":adjective:" + arr2[ctr3],FALSE);
                      \}
                   \}

                   arr2=\$this."disguise:details:adjectives"[arr[ctr]];
                   \$actor."disguise:details:adjectives" += ([arr[ctr]:arr2]);
                   for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                      Set(\$actor,"details:" + arr[ctr] + ":adjective:" + arr2[ctr3],TRUE);
                   \}
                \}
             \}

          \}
      \}


      /*
       * look for detail being hidden and unhide if required
       */


      if(!\$actor."disguise:unwearhidedetails")\{
         \$actor."disguise:unwearhidedetails" = ([]);
      \}


      if(Get(\$actor,"details:"+arr[ctr]+":hidden")==1)\{
         \$actor."disguise:unwearhidedetails" += ([arr[ctr]:1]);
         Set(\$actor,"details:" + arr[ctr] + ":hidden",0);
      \}
      else\{
         if(\$actor."disguise:unwearhidedetails"[arr[ctr]])\{
            \$actor."disguise:unwearhidedetails"[arr[ctr]]++;
         \}
      \}

      /*
       * look for detail opposite and hide that if found
       */
      if(this."disguise:hidedetails" \&\& \$actor."disguise:unwearhidedetails"[arr[ctr]])\{
         if(typeof(this."disguise:hidedetails")==T_MAPPING)\{
            if(!\$actor."disguise:unwearshowdetails")\{
               \$actor."disguise:unwearshowdetails" = ([]);
            \}
            if(this."disguise:hidedetails"[arr[ctr]])\{
               tmpHD = this."disguise:hidedetails"[arr[ctr]];
               for(ctr3=0;ctr3\<sizeof(tmpHD);ctr3++)\{
                  if(member( tmpHD[ctr3],\$actor."base:details"))\{
                     if(!\$actor."disguise:unwearshowdetails"[tmpHD[ctr3]])\{
                        \$actor."disguise:unwearshowdetails" += ([tmpHD[ctr3]:1]);
                      \}
                      else\{
                         \$actor."disguise:unwearshowdetails"[tmpHD[ctr3]]++;
                      \}
                      Set(\$actor,"details:" + tmpHD[ctr3] + ":hidden",1);
                  \}
               \}
            \}
         \}
      \}

   \}
\}

if(this."disguise:title")\{
  \$actor."trait:title" = UnSAM(this."disguise:title");
\}

if(this."disguise:superbrief")\{
  \$actor."trait:superbrief" = UnSAM(this."disguise:superbrief",\$this: \$actor);
\}



if(this."disguise:override:brief")\{
  \$actor."trait:override:brief" = UnSAM(this."disguise:override:brief",\$this: \$actor);
\}

if(this."disguise:override:look")\{
  \$actor."trait:override:look" = UnSAM(this."disguise:override:look",\$this: \$actor);
  \$actor."trait:override:examine" = UnSAM(this."disguise:override:look",\$this: \$actor);
\}

if(this."disguise:override:examine")\{
  \$actor."trait:override:examine" = UnSAM(this."disguise:override:examine",\$this: \$actor);
\}



 /*add in snames and pnames*/
if(this."disguise:names")\{
    for(ctr=0;ctr\<sizeof(this."disguise:names");ctr++)\{
       Set(\$actor,"details:default:sname:"+this."disguise:names"[ctr],TRUE);
    \}
\}

 /*add in adjectives*/
if(this."disguise:default:adjectives")\{
    if(!\$actor."disguise:details:adjectives") \$actor."disguise:details:adjectives" = ([]);
    for(ctr=0;ctr\<sizeof(this."disguise:default:adjectives");ctr++)\{
       Set(\$actor,"details:default:adjective:" + this."disguise:default:adjectives"[ctr],TRUE);
       if(!\$actor."disguise:details:adjectives"[this."disguise:default:adjectives"[ctr]])\{
          \$actor."disguise:details:adjectives" += ([this."disguise:default:adjectives"[ctr]:0]);
       \}
       else\{
          \$actor."disguise:details:adjectives"[this."disguise:default:adjectives"[ctr]]++;
       \}
    \}
\}


 /*add disguise object to disguises list*/
 \$actor."disguise:disguises" += (\{this\});

 /*look for and then hide all wounds, bruises and scars*/
   for(ctr=0;ctr\<sizeof(hiddendetails);ctr++)\{
     if(Get(this,"disguise:hides-" + hiddendetails[ctr]))\{
        if(!Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr]))\{
           Set(\$actor,"disguise:hashidden-" + hiddendetails[ctr],1);
        \}
        else\{
           Set(\$actor,"disguise:hashidden-" + hiddendetails[ctr],Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr])+1);
        \}
        if(Get(\$actor,hiddenloc[ctr])!=nil)\{
           hiddenlocations = map_indices(Get(\$actor,hiddenloc[ctr]));
           for(ctr2=0;ctr2\<sizeof(hiddenlocations);ctr2++)\{
             Set(\$actor,"details:" + hiddenlocations[ctr2] + "-" + hiddendetails[ctr] + ":hidden",TRUE);
           \}
        \}
     \}
   \}


 /*hide tattoos*/
if(this."disguise:hides-tattoo")\{
   if(!\$actor."disguise:hashidden-tattoo")\{
      \$actor."disguise:hashidden-tattoo" = 1;
   \}
   else\{
      \$actor."disguise:hashidden-tattoo"++;
   \}

  propmap = \$actor."*";
  ix = map_indices(propmap);
  for(ctr=0;ctr2\<sizeof(ix);ctr2++)\{
      if(sscanf(ix[ctr2],"alteration:%s:tattoo",hidedetail)==1)\{
         Set(\$actor,"details:" + hidedetail + "-tattoo:hidden",TRUE);
      \}
  \}
\}




if(this."disguise:hides-clothes"==1)\{
  \$indices = map_indices(\$actor."base:clothes-worn");
  \$clothes = (\{ \});

  for (\$i = 0; \$i \< sizeof(\$indices); \$i++) \{
    \$garment = \$actor."base:clothes-worn"[\$indices[\$i]];
    if(member(\$indices[\$i],this."base:parts-covered"))\{
       \$clothes \|= \$garment;
    \}
  \}


  \$clothes              -= (\{ \$this \});
  \$this."clothes:hidden" = \$clothes;


  for (\$i = 0; \$i \< sizeof(\$clothes); \$i++) \{
    \$item = \$clothes[\$i];
    \$arr = (\{"clothing:pouch","clothing:scabbard","clothing:satchel","clothing:baldric","clothing:purse"\});
    \$hide=1;
    if(\$item."disguise:nothidden"!=nil)\{
       \$hide=0;
    \}
    else\{
       for(\$ctr=0;\$ctr\<sizeof(\$arr);\$ctr++)\{
           if(contains(Str(\$item),\$arr[\$ctr]))\{
              \$hide=0;
               break;
           \}
       \}
    \}

    if(\$hide==1)\{
       \$item."details:default:hidden:local" = TRUE;
    \}

  \}
\}

\$this."tracker:lastworn" = ([ time():\$actor ]);
\$db = mggeneral::fetchdatadb(\$data: "DataDB", \$obj: \$actor);
if(\$db)\{
   \$tracker = \$db.cloaktracker;
   if(!\$tracker)\$tracker=([]);
   if (!member(\$actor, map_indices(\$tracker))) \{
      \$tracker += ([ \$actor:([ time():TRUE ]) ]);
   \} else \{
      \$singletracker = \$tracker[\$actor];
      \$singletracker += ([ map_indices(\$this."tracker:lastworn")[0]:TRUE ]);
      \$tracker[\$actor] = \$singletracker;
   \}
   \$db.cloaktracker = \$tracker;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1109274317, "caltosdarr", "X", 1112709934, "caltosdarr", "P", 1112710397, "caltosdarr", "P", 1114504560, "caltosdarr", "P", 1114504610, "caltosdarr", "P", 1114504926, "caltosdarr", "P", 1114505095, "caltosdarr", "P", 1114505144, "caltosdarr", "P", 1114505336, "caltosdarr", "P", 1134951853, "tomdowd", "P", 1134952035, "tomdowd", "P", 1134952085, "tomdowd", "P", 1136780311, "kargh", "E", 1136780355, "kargh", "E", 1136780601, "kargh", "E", 1136780647, "kargh", "E", 1136780751, "kargh", "E", 1136780783, "kargh", "E", 1137962995, "tomdowd", "P", 1137963072, "tomdowd", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
