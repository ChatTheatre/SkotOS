<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(MGeneric:UrJewelry)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="plain"/>
        </Base:Adjectives>
        <Base:Descriptions/>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:disguise:nothidden">
         1
      </Core:Property>
      <Core:Property property="merry:react-post:unwear">
         "Call (\$\{Marrach:Lib:MGdisguise\}, \\"react-post:unwear\\");"
      </Core:Property>
      <Core:Property property="merry:react-post:wear">
         X[M] /*

D=set up all the disguise stuff on wearing disguise...including detail descriptions, layering disguises, hide/show/create details

extended MGeneric disguise. Disguises now use the following:pa

disguise:hides-scar - if present signals that the disguise hides scars on covered areas
disguise:hides-wound - if present signals that the disguise hides wounds on covered areas
disguise:hides-bruise - if present signals that the disguise hides bruises on covered areas
disguise:hides-tattoo - if present signals that the disguise hides tattoos on covered areas
disguise:descriptions - mapping of disguised areas and their descriptions (nb: a 'default' setting is used for all locations not specifically described)
*/

string *hiddendetails,*hiddenlocations,*ix,*hiddenloc;
int ctr,ctr2,ctr3;
string hidedetail,name;
mapping propmap;
string *arr,*tmpHD,*arr2;
mapping tmp;
int priority;

hiddendetails = (\{"wound","bruise","scar"\});
hiddenloc = (\{"wound:woundlocations","wound:bruiselocations","healing:scarlocations"\});


\$actor."theatre:notwhobody" = TRUE;
\$actor.disguised = TRUE;
\$actor.undisguised = nil;





/*copy over the disguise descriptions to affect detail descriptions*/
if(!\$actor."disguise:disguises") \$actor."disguise:disguises" = (\{\});


 /*record names on wearing first disguise*/
if(sizeof(\$actor."disguise:disguises")==0)\{
   \$actor."disguise:superbrief" = \$actor."trait:superbrief";
   \$actor."disguise:title" = \$actor."trait:title";
   Set(\$actor, "details:default:sname:" + \$actor."skotos:charname", nil);
   Set(\$actor, "details:default:pname:" + \$actor."skotos:charname", nil);
   \$actor."disguise:override:brief" = \$actor."trait:override:brief";
   \$actor."disguise:override:look" = \$actor."trait:override:look";
   \$actor."disguise:override:examine" = \$actor."trait:override:examine";
\}

if(!\$actor."disguise:descriptions")\{
   \$actor."disguise:descriptions" = ([]);
   \$actor."disguise:wearpriority" = ([]);
\}

 /*add in descriptions taking into account wearpriority on disguises*/
if(this."disguise:descriptions")\{

   arr=map_indices(this."disguise:descriptions");

   for(ctr=0;ctr\<sizeof(arr);ctr++)\{
      if(!\$actor."disguise:descriptions"[arr[ctr]])\{
          \$actor."disguise:descriptions" += ([arr[ctr]:this."disguise:descriptions"[arr[ctr]]]);
          priority=0;
          if(this."disguise:wearpriority")\{
             if(this."disguise:wearpriority"[arr[ctr]])priority = this."disguise:wearpriority"[arr[ctr]];
          \}
          \$actor."disguise:wearpriority" += ([arr[ctr]:priority]);

          if(\$this."disguise:details:adjectives")\{
             if(\$this."disguise:details:adjectives"[arr[ctr]])\{
                arr2=\$this."disguise:details:adjectives"[arr[ctr]];
                for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                   Set(\$actor,"details:" + arr[ctr] +":adjective:"+arr2[ctr3],TRUE);
                \}
                if(!\$actor."disguise:details:adjectives")\$actor."disguise:details:adjectives" = ([]);
                \$actor."disguise:details:adjectives" += ([arr[ctr]:arr2]);
             \}
          \}
      \}
      else\{
          priority=0;
          if(this."disguise:wearpriority")\{
             if(this."disguise:wearpriority"[arr[ctr]])priority = this."disguise:wearpriority"[arr[ctr]];
          \}
          if(\$actor."disguise:wearpriority"[arr[ctr]]\<=priority)\{
             \$actor."disguise:descriptions"[arr[ctr]]=this."disguise:descriptions"[arr[ctr]];
             \$actor."disguise:wearpriority"[arr[ctr]]=priority;

             if(\$this."disguise:details:adjectives")\{
                if(\$this."disguise:details:adjectives"[arr[ctr]])\{

                   if(!\$actor."disguise:details:adjectives")\{
                      \$actor."disguise:details:adjectives" = ([]);
                   \}

                   if(\$actor."disguise:details:adjectives"[arr[ctr]])\{
                      arr2=\$actor."disguise:details:adjectives"[arr[ctr]];
                      for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                         Set(\$actor,"details:" + arr[ctr] + ":adjective:" + arr2[ctr3],FALSE);
                      \}
                   \}

                   arr2=\$this."disguise:details:adjectives"[arr[ctr]];
                   \$actor."disguise:details:adjectives" += ([arr[ctr]:arr2]);
                   for(ctr3=0;ctr3\<sizeof(arr2);ctr3++)\{
                      Set(\$actor,"details:" + arr[ctr] + ":adjective:" + arr2[ctr3],TRUE);
                   \}
                \}
             \}

          \}
      \}


      /*
       * look for detail being hidden and unhide if required
       */


      if(!\$actor."disguise:unwearhidedetails")\{
         \$actor."disguise:unwearhidedetails" = ([]);
      \}


      if(Get(\$actor,"details:"+arr[ctr]+":hidden")==1)\{
         \$actor."disguise:unwearhidedetails" += ([arr[ctr]:1]);
         Set(\$actor,"details:" + arr[ctr] + ":hidden",0);
      \}
      else\{
         if(\$actor."disguise:unwearhidedetails"[arr[ctr]])\{
            \$actor."disguise:unwearhidedetails"[arr[ctr]]++;
         \}
      \}

      /*
       * look for detail opposite and hide that if found
       */
      if(this."disguise:hidedetails" \&\& \$actor."disguise:unwearhidedetails"[arr[ctr]])\{
         if(typeof(this."disguise:hidedetails")==T_MAPPING)\{
            if(!\$actor."disguise:unwearshowdetails")\{
               \$actor."disguise:unwearshowdetails" = ([]);
            \}
            if(this."disguise:hidedetails"[arr[ctr]])\{
               tmpHD = this."disguise:hidedetails"[arr[ctr]];
               for(ctr3=0;ctr3\<sizeof(tmpHD);ctr3++)\{
                  if(member( tmpHD[ctr3],\$actor."base:details"))\{
                     if(!\$actor."disguise:unwearshowdetails"[tmpHD[ctr3]])\{
                        \$actor."disguise:unwearshowdetails" += ([tmpHD[ctr3]:1]);
                      \}
                      else\{
                         \$actor."disguise:unwearshowdetails"[tmpHD[ctr3]]++;
                      \}
                      Set(\$actor,"details:" + tmpHD[ctr3] + ":hidden",1);
                  \}
               \}
            \}
         \}
      \}

   \}
\}

if(this."disguise:title")\{
  \$actor."trait:title" = UnSAM(this."disguise:title");
\}

if(this."disguise:superbrief")\{
  \$actor."trait:superbrief" = UnSAM(this."disguise:superbrief",\$this: \$actor);
\}



if(this."disguise:override:brief")\{
  \$actor."trait:override:brief" = UnSAM(this."disguise:override:brief",\$this: \$actor);
\}

if(this."disguise:override:look")\{
  \$actor."trait:override:look" = UnSAM(this."disguise:override:look",\$this: \$actor);
  \$actor."trait:override:examine" = UnSAM(this."disguise:override:look",\$this: \$actor);
\}

if(this."disguise:override:examine")\{
  \$actor."trait:override:examine" = UnSAM(this."disguise:override:examine",\$this: \$actor);
\}



 /*add in snames and pnames*/
if(this."disguise:names")\{
    for(ctr=0;ctr\<sizeof(this."disguise:names");ctr++)\{
       arr=this."disguise:names"[ctr];
       Set(\$actor,"details:default:sname:"+arr[0],arr[1]);
    \}
\}

 /*add in adjectives*/
if(this."disguise:default:adjectives")\{
    for(ctr=0;ctr\<sizeof(this."disguise:default:adjectives");ctr++)\{
       Set(\$actor,"details:default:adjective:" + this."disguise:default:adjectives"[ctr],TRUE);
    \}
\}


 /*add disguise object to disguises list*/
 \$actor."disguise:disguises" += (\{this\});

 /*look for and then hide all wounds, bruises and scars*/
   for(ctr=0;ctr\<sizeof(hiddendetails);ctr++)\{
     if(Get(this,"disguise:hides-" + hiddendetails[ctr]))\{
        if(!Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr]))\{
           Set(\$actor,"disguise:hashidden-" + hiddendetails[ctr],1);
        \}
        else\{
           Set(\$actor,"disguise:hashidden-" + hiddendetails[ctr],Get(\$actor,"disguise:hashidden-" + hiddendetails[ctr])+1);
        \}
        if(Get(\$actor,hiddenloc[ctr])!=nil)\{
           hiddenlocations = map_indices(Get(\$actor,hiddenloc[ctr]));
           for(ctr2=0;ctr2\<sizeof(hiddenlocations);ctr2++)\{
             Set(\$actor,"details:" + hiddenlocations[ctr2] + "-" + hiddendetails[ctr] + ":hidden",TRUE);
           \}
        \}
     \}
   \}


 /*hide tattoos*/
if(this."disguise:hides-tattoo")\{
   if(!\$actor."disguise:hashidden-tattoo")\{
      \$actor."disguise:hashidden-tattoo" = 1;
   \}
   else\{
      \$actor."disguise:hashidden-tattoo"++;
   \}

  propmap = \$actor."*";
  ix = map_indices(propmap);
  for(ctr=0;ctr2\<sizeof(ix);ctr2++)\{
      if(sscanf(ix[ctr2],"alteration:%s:tattoo",hidedetail)==1)\{
         Set(\$actor,"details:" + hidedetail + "-tattoo:hidden",TRUE);
      \}
  \}
\}





\$indices = map_indices(\$actor."base:clothes-worn");
\$clothes = (\{ \});

for (\$i = 0; \$i \< sizeof(\$indices); \$i++) \{
  \$part = \$actor."base:clothes-worn"[\$indices[\$i]];
  if(member(\$indices[\$i],this."base:parts-covered"))\{
     \$clothes \|= \$part;
  \}
\}


\$clothes              -= (\{ \$this \});
\$this."clothes:hidden" = \$clothes;


for (\$i = 0; \$i \< sizeof(\$clothes); \$i++) \{
  \$item = \$clothes[\$i];
  \$arr = (\{"clothing:pouch","clothing:scabbard","clothing:satchel","clothing:baldric","clothing:purse"\});
  \$hide=1;
  if(\$item."disguise:nothidden"!=nil)\{
     \$hide=0;
  \}
  else\{
     for(\$ctr=0;\$ctr\<sizeof(\$arr);\$ctr++)\{
         if(contains(Str(\$item),\$arr[\$ctr]))\{
            \$hide=0;
            break;
         \}
     \}
  \}

  if(\$hide==1)\{
     \$item."details:default:hidden:local" = TRUE;
  \}

\}


\$this."tracker:lastworn" = ([ time():\$actor ]);
\$db = mggeneral::fetchdatadb(\$data: "DataDB", \$obj: \$actor);
if(\$db)\{
   \$tracker = \$db.cloaktracker;
   if(!\$tracker)\$tracker=([]);
   if (!member(\$actor, map_indices(\$tracker))) \{
      \$tracker += ([ \$actor:([ time():TRUE ]) ]);
   \} else \{
      \$singletracker = \$tracker[\$actor];
      \$singletracker += ([ map_indices(\$this."tracker:lastworn")[0]:TRUE ]);
      \$tracker[\$actor] = \$singletracker;
   \}
   \$db.cloaktracker = \$tracker;
\}
return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1082798777, "caltosdarr", "X", 1082798813, "caltosdarr", "E", 1082799314, "caltosdarr", "P", 1082800713, "caltosdarr", "P", 1082802727, "caltosdarr", "P", 1082802785, "caltosdarr", "P", 1082803506, "caltosdarr", "P", 1082803536, "caltosdarr", "P", 1082808196, "caltosdarr", "P", 1082808302, "caltosdarr", "P", 1082808321, "caltosdarr", "P", 1082808359, "caltosdarr", "P", 1082810526, "caltosdarr", "P", 1082811185, "caltosdarr", "P", 1082811280, "caltosdarr", "P", 1082811384, "caltosdarr", "P", 1082812181, "caltosdarr", "P", 1082812290, "caltosdarr", "P", 1082812472, "caltosdarr", "P", 1082812475, "caltosdarr", "P", 1082812577, "caltosdarr", "P", 1082917708, "caltosdarr", "P", 1082917765, "caltosdarr", "P", 1085848388, "kargh", "P", 1085848463, "kargh", "P", 1086026476, "kargh", "P", 1086026616, "kargh", "P", 1087991387, "caltosdarr", "P", 1087991801, "caltosdarr", "P", 1087992073, "caltosdarr", "P", 1087992387, "caltosdarr", "P", 1087992520, "caltosdarr", "P", 1088066066, "caltosdarr", "P", 1088066427, "caltosdarr", "P", 1089965467, "caltosdarr", "P", 1089965469, "caltosdarr", "P", 1089994677, "caltosdarr", "P", 1089995635, "caltosdarr", "P", 1089996656, "caltosdarr", "P", 1089997232, "caltosdarr", "P", 1089997943, "caltosdarr", "P", 1090058033, "caltosdarr", "P", 1090059509, "caltosdarr", "P", 1090060917, "caltosdarr", "P", 1090061222, "caltosdarr", "P", 1090062498, "caltosdarr", "P", 1090063089, "caltosdarr", "P", 1090065386, "caltosdarr", "P", 1090065419, "caltosdarr", "P", 1090065486, "caltosdarr", "P", 1090065654, "caltosdarr", "P", 1090065747, "caltosdarr", "P", 1090065910, "caltosdarr", "P", 1090066201, "caltosdarr", "P", 1090066389, "caltosdarr", "P", 1090066528, "caltosdarr", "P", 1097843044, "caltosdarr", "P", 1097843108, "caltosdarr", "P", 1097843574, "caltosdarr", "P", 1097843756, "caltosdarr", "P", 1097845036, "caltosdarr", "P", 1097845939, "caltosdarr", "P", 1097846074, "caltosdarr", "P", 1097846946, "caltosdarr", "P", 1097847167, "caltosdarr", "P", 1097847428, "caltosdarr", "P", 1097847837, "caltosdarr", "P", 1097848026, "caltosdarr", "P", 1097950504, "caltosdarr", "P", 1097950703, "caltosdarr", "P", 1097951287, "caltosdarr", "P", 1097951486, "caltosdarr", "P", 1097952017, "caltosdarr", "P", 1097952172, "caltosdarr", "P", 1097952833, "caltosdarr", "P", 1097953400, "caltosdarr", "P", 1097953552, "caltosdarr", "P", 1097954018, "caltosdarr", "P", 1097954109, "caltosdarr", "P", 1097954140, "caltosdarr", "P", 1097954336, "caltosdarr", "P", 1097955403, "caltosdarr", "P", 1097955476, "caltosdarr", "P", 1097956219, "caltosdarr", "P", 1097956370, "caltosdarr", "P", 1098100487, "caltosdarr", "P", 1098100770, "caltosdarr", "P", 1098100895, "caltosdarr", "P", 1098103351, "caltosdarr", "P", 1098103437, "caltosdarr", "P", 1098103724, "caltosdarr", "P", 1098104107, "caltosdarr", "X", 1098112864, "caltosdarr", "P", 1098113855, "caltosdarr", "P", 1098114136, "caltosdarr", "P", 1098114217, "caltosdarr", "P", 1098114471, "caltosdarr", "P", 1098114890, "caltosdarr", "P", 1098114970, "caltosdarr", "P", 1098115735, "caltosdarr", "P", 1098116007, "caltosdarr", "P", 1098136072, "caltosdarr", "P", 1098136222, "caltosdarr", "P", 1098186473, "caltosdarr", "P", 1098186486, "caltosdarr", "P", 1098187012, "caltosdarr", "P", 1098187489, "caltosdarr", "P", 1098363595, "caltosdarr", "X", 1098806744, "caltosdarr", "P", 1098806968, "caltosdarr", "P", 1098807097, "caltosdarr", "P", 1098807158, "caltosdarr", "P", 1108605824, "tomdowd", "E", 1108605840, "tomdowd", "E", 1108605867, "tomdowd", "E", 1109184373, "tomdowd", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
