<object clone="/usr/SkotOS/obj/verb" owner="Reverse">
  <Socials:Verb imp="+proof" evoke="optional" audible="false" private="false" secret="false" obscured="false" target-abstracts="false" disabled="false" ooc="false" raw_verb="true">
    <Ur:UrObject/>
    <Socials:SocialObjects/>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Shared:sys:build-tool:proof
 Maintainer:    Kalle Alm
 Email:         kalle@mortalis.skotos.net
 Revision:      1.15
 Generated:     Sun Mar 23 02:34:02 2008 on HQ
 Last revision: Thu Mar 20 12:25:00 2008 by zwoc (P)



(Do not modify #list# -- it is automatically constructed.)


---------------------------------------------------------------------------------------------------------------------------
 global:command                     (M) Proof verb.
 lib:autochecks                     (M) Auto-checks on proofing.
 lib:check_and_lock                 (M) Check and lock the \$object.
 lib:compute_list                   (M) Compute a list, sorted into systems, of unproofed objects in the Shared system.
 lib:compute_woe_notes              (M) Produce table of woe notes.
 lib:init                           (M) Initialize proofing of \$ob.
 lib:parse                          (M) Parse \$sam, converting it using \$filter, and perform \$postproc (replace strings
                                        argument array).
 lib:proofer:temporary:sam-evaluate (M) Workaround to get 'this' right. Takes \$the_sam, which must be a SAM string (a
                                        T_OBJECT variable, to be specific).
 lib:test_item_name                 (M) Test if the item's name is correct. Names for different objects follow different
                                        conventions!
 lib:test_item_name_clothing        (M) Clothing extended testing for the item name.
 lib:test_item_name_food/drinks     (M) Foods and drinks extended testing for the item name.
---------------------------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="example:descriptions:clothing">
         X[S] \{? \| \$[\$detail == "default"] \|
        \<div class="big"\>Examples of a prime detail:\</div\>
        \<div class="italic"\>An example of a very simple clothing object. Uses only the three required traits, has minimal SAM tags, and no conditional SAM tags.\</div\>
        \<div class="frame"\>
            \<b\>brief:\</b\>
            \<div class="mono"\>
                \\\$(this.trait:color) \\\$(this.trait:material) apron
            \</div\>
            \<b\>look:\</b\>
            \<div class="mono"\>
                An apron made of \\\$(this.trait:color) \\\$(this.trait:material).
            \</div\>
            \<b\>examine:\</b\>
            \<div class="mono"\>
                An apron made of \\\$(this.trait:condition) \\\$(this.trait:color) \\\$(this.trait:material).
            \</div\>
        \</div\>
        \<div class="italic"\>An example of a slightly more complex clothing object. Only uses the three required traits, but has more sophisticated SAM tags.\</div\>
        \<div class="frame"\>
            \<b\>brief:\</b\>
            \<div class="mono"\>
                \\\$(this.trait:color) \\\$(this.trait:material) blouse
            \</div\>
            \<b\>look:\</b\>
            \<div class="mono"\>
                \\\&lt;describe-props cap="1"\\\&gt;\\\$(this.trait:color) \\\$(this.trait:material) blouse\\\&lt;/describe-props\\\&gt;.
            \</div\>
            \<b\>examine:\</b\>
            \<div class="mono"\>
                \\\&lt;describe-props cap="1"\\\&gt;\\\$(this.trait:color) \\\$(this.trait:material) blouse\\\&lt;/describe-props\\\&gt;.\\\{? \\\| \\\$(this.trait:condition) \\\| It is \\\$(this.trait:condition).\\\|\\\}
            \</div\>
        \</div\>
        \<div class="italic"\>A very complex clothing object, similar to that used in Castle Marrach. Adds optional trait:symbol and trait:fit in addition to the required traits. Has sophisticated conditional SAM tags.\</div\>
        \<div class="frame"\>
            \<b\>brief:\</b\>
            \<div class="mono"\>
                \\\$(this.trait:color) \\\$(this.trait:material) bliaut
            \</div\>
            \<b\>look:\</b\>
            \<div class="mono"\>
                \\\&lt;describe-props cap="1"\\\&gt;\\\$(this.trait:condition) bliaut\\\&lt;/describe-props\\\&gt; made of \\\$(this.trait:color) \\\$(this.trait:material)\\\{? \\\| \\\$(this.trait:symbol) \\\|, embroidered with \\\&lt;describe-prop what="trait:symbol"/\\\&gt;\\\|\\\}.
            \</div\>
            \<b\>examine:\</b\>
            \<div class="mono"\>
                \\\&lt;describe-props cap="1"\\\&gt;\\\$(this.trait:color) \\\$(this.trait:material) bliaut\\\&lt;/describe-props\\\&gt;\\\{? \\\| \\\$(this.trait:fit) \\\|, fitted in \\\&lt;describe-prop what="trait:fit"/\\\&gt; manner\\\|\\\}. This is a woman's garment with a v-neck collar, fitted closely to the upper part of the body by bodice side ties. Voluminous skirts extend to the floor. It is accented with light embroidery on the cuffs of the sleeves and hem of the skirt. The long, flowing, open sleeves reach to mid-calf when the arm is held loosely by the side.\\\{? \\\| \\\$(this.trait:symbol) \\\| It is embroidered with \\\&lt;describe-prop what="trait:symbol"/\\\&gt;.\\\|\\\} \\\{? \\\| \\\$(this.trait:condition) \\\| It is \\\$(this.trait:condition).\\\|\\\}
            \</div\>
        \</div\>
        \|
        \<div class="big"\>Examples of a non-prime detail:\</div\>
        \<div class="italic"\>An example of a very simple clothing object's non-prime detail. Uses none of the traits.\</div\>
        \<div class="frame"\>
            \<b\>brief:\</b\> (\<i\>definite article\</i\>)
            \<div class="mono"\>
                the ankle straps on a pair of heels
            \</div\>
            \<b\>look:\</b\>
            \<div class="mono"\>
                The thin straps on a pair of two-inch heels.
            \</div\>
            \<b\>examine:\</b\>
            \<div class="mono"\>
                The thin straps on a pair of two-inch heels are buckled to one side.
            \</div\>
        \</div\>
        \<div class="italic"\>An example of a slightly more complex clothing object's non-prime detail. Uses a few traits to describe the object itself, but none for the actual detail.\</div\>
        \<div class="frame"\>
            \<b\>brief:\</b\> (\<i\>definite article\</i\>)
            \<div class="mono"\>
                the ankle straps on a pair of \\\$(this.trait:color) \\\$(this.trait:material) heels
            \</div\>
            \<b\>look:\</b\>
            \<div class="mono"\>
                The thin straps on a pair of \\\$(this.trait:color) \\\$(this.trait:material) two-inch heels.
            \</div\>
            \<b\>examine:\</b\>
            \<div class="mono"\>
                The thin straps on a pair of \\\$(this.trait:color) \\\$(this.trait:material) two-inch heels are buckled to one side.
            \</div\>
        \</div\>
        \<div class="italic"\>A more complex clothing object's non-prime, similar to that used in Castle Marrach. Has its own traits as well as traits to describe the object itself.\</div\>
        \<div class="frame"\>
            \<b\>brief:\</b\> (\<i\>definite article\</i\>)
            \<div class="mono"\>
                the \\\$(this.trait:straps:color) ankle straps on a pair of \\\$(this.trait:color) \\\$(this.trait:material) heels
            \</div\>
            \<b\>look:\</b\>
            \<div class="mono"\>
                The thin \\\$(this:trait:straps:color) straps on a pair of \\\$(this.trait:color) \\\$(this.trait:material) two-inch heels.
            \</div\>
            \<b\>examine:\</b\>
            \<div class="mono"\>
                The thin \\\$(this:trait:straps:color) straps on a pair of \\\$(this.trait:color) \\\$(this.trait:material) two-inch heels are buckled to one side.
            \</div\>
        \</div\>
        \}
      </Core:Property>
      <Core:Property property="example:descriptions:food/drinks">
         X[S] \{? \| \$[\$detail == "default"] \|
        \<div class="big"\>Examples of a prime detail:\</div\>
        \<div class="italic"\>An example of a simple drink object.\</div\>
        \<div class="frame"\>
            \<b\>name:\</b\>
            \<div class="mono"\>
                 ale
            \</div\>
            \<b\>scent:\</b\>
            \<div class="mono"\>
                It smells dark and bitter.
            \</div\>
            \<b\>taste:\</b\>
            \<div class="mono"\>
                It has a thick and dark taste.
            \</div\>
        \</div\>
        \<div class="italic"\>An example of a simple food object.\</div\>
        \<div class="frame"\>
            \<b\>name:\</b\>
            \<div class="mono"\>
                pasta
            \</div\>
            \<b\>scent:\</b\>
            \<div class="mono"\>
                It gives off the scent of fresh pasta, garlic, onion, tomatoes, peppers and diverse spices.
            \</div\>
            \<b\>taste:\</b\>
            \<div class="mono"\>
                It has a strong, spicy taste.
            \</div\>
        \</div\>
        \|
        \<div class="big"\>Examples of a non-prime detail:\</div\>
        \<i\>This is not in place, as I haven't seen any non-prime-detailed food items yet. YOU probably know better than I do what these should look like.\</i\>
        \}
      </Core:Property>
      <Core:Property property="example:mold:clothing">
         X[S] \<b\>Example:\</b\> This is a morph child of the ageless:accessories:belt, changing it to the style "dress" and the material leather and color black. This makes it more of a 20th century object, so it has been changed to the contemporary era.
      </Core:Property>
      <Core:Property property="example:mold:food/drinks">
         X[S] \<b\>Example:\</b\> (honestly I can't think of why we would make molds of foods/drinks)
      </Core:Property>
      <Core:Property property="example:regular:clothing">
         X[S] \<b\>Example:\</b\> A bliaut, a type of 12th century gown typically made of better then average cloth. In addition to the standard trait:color, trait:material and trait:condition, it also supports trait:fit and an embroidered trait:symbol.\<br/\>It is converted from a Castle Marrach generic object, original author unknown.\<br/\>\<b\>Example #2:\</b\> This is a cable knit sweater, worn by both men and women. It is broadly available throughout the 20th century though it may be appropriate for other eras. It uses the standard trait:color trait:material and trait:condition traits. \<br/\>It is converted from a Lovecraft Country generic object, original author unknown.
      </Core:Property>
      <Core:Property property="example:regular:food/drinks">
         X[S] \<b\>Example:\</b\> A honey cake, popular in the 16th century Europe.\<br/\>It is converted from a Castle Marrach generic object, original author unknown.
      </Core:Property>
      <Core:Property property="html:edit">
         X[S] \{? \| \$(UDat.Host) \|
\$[/* globally useful info */
    \$glob_obtype = explode(Str(\$ob), ":");
    \$glob_obtype = sizeof(\$glob_obtype) \> 1 ? \$glob_obtype[1] : "UNKNOWN";]
\<html\>
    \<head\>
        \<title\>\$(ob)\</title\>
        \<style\>
        \$(this.sam:css)
        \</style\>
    \</head\>
    \<body\>
        \$[\$backtag = \$detail == "default" ? "prime_descriptions" : "all_details";]
        \<h1\>Edit Help \<a href="Index?ob=\$(ob)#\$(backtag)"\>[back to Proof Tool]\</a\>\</h1\>
        \$[\$stripped=1;
        \$obj = \$ob;
        \$op = Obj(\$ob);
        \$homeurl = "/SAM/Prop/Shared:sys:build-tool:proof/Edit?ob=" + \$ob + "\&detail=" + \$detail;
        \$hometitle = "[Back to Edit Help]";
        \$ehomeurl = url_encode(\$homeurl);]
        \<h2\>\$(ob)\</h2\>
        \<h3\>\<describe what="\$(op)" cap="1"/\>.\</h3\>
        \<div class="italic"\>You may edit the details of this object directly in the Woe; to return to the actual object, click the "Back to proofing" link at the top in Woe. [\<a href="/Dev/View.sam?homedisplay=1\\\&homeurl=\$(ehomeurl)\\\&hometitle=\$(hometitle)\\\&obj=\$(ob)"\>View in Woe\</a\>]\</div\>
        \$[Get(this, "example:descriptions:" + \$glob_obtype)]
        \<div class="big"\>Woe view:\</div\>
        \<insert page="/Dev/View.sam"/\>
    \</body\>
\</html\>
\|\}
      </Core:Property>
      <Core:Property property="html:index">
         X[S] \{? \| \$(UDat.Host) \|
\<z udob="\$(UDat.dat)" uname="\$(UDat.name)"\>
    \$[/* init the \$vars that are needed in various places [tm], since they seem to not be available otherwise */
    \$glob_obtype = explode(Str(\$ob), ":");
    \$glob_obtype = sizeof(\$glob_obtype) \> 1 ? \$glob_obtype[1] : "UNKNOWN";
    \$msg_there_were_errors = \$"\<div class=\\"warn\\"\>Since there were errors detected in this aspect, you cannot proof it. Please address the issues described above and then reload this page.\</div\>";
    \$op = Obj(\$ob);
    if (\$op) \{
        if (\$op."merry:inherit:lib:proofer:temporary:sam-evaluate" \&\&
            \$op."merry:inherit:lib:proofer:temporary:sam-evaluate" != this) error("that object has, believe it or not, the property merry:inherit:lib:proofer:temporary:sam-evaulate set to something other than " + name(this) + "... dude, what are the chances?");
        \$op."merry:inherit:lib:proofer:temporary:sam-evaluate" = this;
    \}

    /*
     * The \$(test-handler-map) is a map listing potential handlers for specific features in the proof system.
     * Currently, the following handlers are available:
     *   "physical-\>reference" -- returns a string referencing the current object related to \$subject, which is one of
     *                            "density", "mass" or "capacity"
     *
     * When \$(test-handler-map)[\<something\>] is set to a string, a call to merry:lib:\<string\> in the proofed object will be made
     * in place of the internal, default mechanism. If a return value is expected, it will be used, as normal.
     */
    \$(test-handler-map) = ([ ]);
    "";]
    \<html\>
        \<head\>
            \<title\>\$(ob) - proof tool\</title\>
            \<style\>
            \$(this.sam:css)
            \</style\>
            \<script\>
            \$(this.sam:script)
            \</script\>
        \</head\>
        \<body\>
            \<h1\>Proof Tool \<a href="List"\>[back to +proof, the unproofed objects list]\</a\>\</h1\>
            \{? \| \$(err) \|
                \<div class="warn"\>\$(err)\</div\>
            \|\}
            \$[\$father = Obj(\$ob);
            if (\$father) \$father = \$father."core:ur:parent";
            if (\$father \&\& contains(name(\$father), "Shared:Local:")) \$father = \$father."core:ur:parent";
            \$father = \$father ? name(\$father) : "[nothing???]";]
            \$[::init();
            ::check_and_lock();
            \$destroyed = Obj(\$ob)."sys:sync:destroy-this-item";]
            \{? \| \$(warn_about_lock) \|
                \<h2\>Locked\</h2\>
                The object you are trying to proof is currently \<b\>locked by \$(locker)\</b\>.
                \<ul\>
                    \<li\>It was locked at \$(locktime).\</li\>
                    \<li\>It will expire in \$(lockexpiry).\</li\>
                \</ul\>
                To ignore this lock and lock the object yourself, \<a href="?ob=\$(ob)\\\&ignore_locks=1"\>click here\</a\>.
            \|
                \$[\$stripped=1;
                \$object.unproofed = 0;
                \$object.prooflimited = FALSE;
                \$object.parseissues = FALSE;
                \$obj = \$ob;
                \$homeurl = "/SAM/Prop/Shared:sys:build-tool:proof/Index?ob=" + \$ob;
                \$hometitle = "[back to Proof Tool]";
                \$ehomeurl = url_encode(\$homeurl);]
                \$[\$op = Obj(\$obj);
                    \$prime = NRefDetail(\$op);
                    \$traits = \$op."traits:adj-map";
                    \$deferred = Map(shared::."sys:shared:deferred")[\$op];
                    catch(\$dbrief = \$op."detail:description:brief");
                    catch(\$dlook = \$op."detail:description:look");
                    catch(\$dexam = \$op."detail:description:examine");
                    catch(\$dpbrief = \$op."detail:description:pbrief");
                    catch(\$dworn = \$op."detail:description:worn");
                    \$sbrief = typeof(\$dbrief) == T_OBJECT ? dump_value(\$dbrief) : Str(\$dbrief);
                    \$slook = typeof(\$dlook) == T_OBJECT ? dump_value(\$dlook) : Str(\$dlook);
                    \$sexam = typeof(\$dexam) == T_OBJECT ? dump_value(\$dexam) : Str(\$dexam);
                    \$spbrief = typeof(\$dpbrief) == T_OBJECT ? dump_value(\$dpbrief) : Str(\$dpbrief);
                    \$sworn = typeof(\$dworn) == T_OBJECT ? dump_value(\$dworn) : Str(\$dworn);
                    \$sum = Str(\$sbrief) + " " + Str(\$slook) + " " + Str(\$sexam) + " " + Str(\$spbrief) + " " + Str(\$sworn);]
                \<h2\>\$(ob)\</h2\>
                \<h3\>\<describe what="\$(op)" cap="1"/\>.\</h3\>
                \$(this.test:woe_objectnote)
                \{? \| \$(deferred) \|
                    \<b\>This object has been deferred.\</b\>
                    See the woe notes pane for details on why. \<zact ob="\$(ob)"\>Undefer\<action\>
                        \$[Obj(\$ob)."sys:shared:deferred" = nil;
                        shared::."sys:shared:deferred" = Map(shared::."sys:shared:deferred") - (\{ Obj(\$ob) \});]
                        \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                    \</action\>\</zact\>.
                \|
                    \<zact ob="\$(ob)"\>Defer this object\<action\>
                        \$[Obj(\$ob)."sys:shared:deferred" = TRUE;
                        shared::."sys:shared:deferred" = Map(shared::."sys:shared:deferred") + ([ Obj(\$ob) : TRUE ]);]
                        \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                    \</action\>\</zact\>.
                    \{? \| \$(destroyed) \|
                        \<zact ob="\$(ob)"\>Undelete this item\<action\>
                            \$[Obj(\$ob)."sys:sync:destroy-this-item" = nil;
                            Call(\$\{Shared:sys:Sync:Verbs:+synctool\}, "set_igdipro", \$object: \$ob, \$mark: "propose");]
                            \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                        \</action\>\</zact\>.
                    \|
                        \<zact ob="\$(ob)"\>Declare this object redundant (i.e. DELETE IT)\<action\>
                            \$[Obj(\$ob)."sys:sync:destroy-this-item" = TRUE;
                            Call(\$\{Shared:sys:Sync:Verbs:+synctool\}, "set_igdipro", \$object: \$ob, \$mark: "propose");]
                            \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                        \</action\>\</zact\>.
                        \<br/\>
                        \<div class="italic"\>You may edit the details of this object directly in the Woe; to return to the actual object, click the "Back to proofing" link at the top in Woe. [\<a href="/Dev/View.sam?obj=\$(ob)\\\&homedisplay=1\\\&homeurl=\$(ehomeurl)\\\&hometitle=\$(hometitle)"\>View in Woe\</a\>]\</div\>
                        \\\<!--
                            test panes begin
                        --\\\>
                        \<a name="auto"\>\\\&nbsp;\</a\> \$(this.test:auto)
                        \{? \| \$(showstopper) \|
                            \{? \| \$(linksharify) \|
                                \<b\>This object does not seem to have been converted to the Shared system.\</b\>\<sbr/\>
                                You can tell the system to attempt a conversion automagically. Worst thing that happens is the system fails, so don't be scared of trying. To convert this object, \<zact ob="\$(ob)"\>click here\<action\>
                                    \$[\$err = catch(Call(\$\{Neoct:Misc:Shared:+sharify\}, "sharify", \$line: \$ob));]
                                    \<redirect propob="\$(this)" prop="index" ob="\$(ob)" err="\$(err)"/\>
                                \</action\>\</zact\>.
                            \|\}
                        \|
                            \<a name="item_name"\>\\\&nbsp;\</a\> \$(this.test:item_name)
                            \{? \| \$(object.prooflimited) \|
                                \<a name="mold_traits"\>\\\&nbsp;\</a\> \$(this.test:mold_traits)
                            \|
                                \$[/*
                                   * Produce the panes.
                                   */
                                int i, ix;
                                string result;

                                \$detail = "default";
                                ix = sizeof(Arr(\$xpanes));
                                result = "";
                                for (i = 0; i \< ix; i++) \{
                                    if (!Get(this, "test:" + \$xpanes[i])) error("The x-pane \\"" + \$xpanes[i] + "\\" does not exist!");
                                    result += "\<a name=\\"" + \$xpanes[i] + "\\"\>\\\\\&nbsp;\</a\> \$(this.test:" + \$xpanes[i] + ")\\n"; /* \$[string res, err; err = catch(res = UnSAM(\$this.\\"test:" + \$xpanes[i] + "\\")); return err ? \\"\<div class='crash'\>Pane \\\\\\"" + \$xpanes[i] + "\\\\\\" crashed! (error: \\" + err + \\")\</div\>\\" : res;]\\n"; */
                                \}
                                return ParseXML(result);]
                                    \$[/*\<a name="clothing_redundant"\>\\\&nbsp;\</a\> \$(this.test:clothing_redundant)
                                    \<a name="item_traits"\>\\\&nbsp;\</a\> \$(this.test:item_traits)
                                    \<a name="prime_descriptions"\>\\\&nbsp;\</a\> \$[\$detail = "default";]\$(this.test:detail_descriptions)
                                    \<a name="detail_names"\>\\\&nbsp;\</a\> \$[\$detail = "default";]\$(this.test:detail_names)
                                    \<a name="detail_adjectives"\>\\\&nbsp;\</a\> \$[\$detail = "default";]\$(this.test:detail_adjectives)
                                    \<a name="coverage"\>\\\&nbsp;\</a\> \$(this.test:coverage)
                                    \<a name="physicals"\>\\\&nbsp;\</a\> \$(this.test:physicals)
                                    \<a name="all_details"\>\\\&nbsp;\</a\> \$(this.test:all_details)*/""]
                            \}
                        \}
                        \\\<!--
                            test panes end
                        --\\\>
                    \}
                \}
                \<a name="woe_notes"\>\\\&nbsp;\</a\> \$(this.test:woe_notes)
                \\\<!---
                    FINAL CHECK -- END OF PANES
                ---\\\>
                \{? \| \$[!\$deferred \&\& !\$destroyed \&\& \$object.unproofed \< 1] \|
                    \$[if (!\$object."sys:shared:proofed") \{
                        \$object."sys:shared:proofed" = TRUE;
                        if (!\$object."sys:shared:proof-announced") \{
                            chat::send_msg(\$line: "tas", \$system: 1, \$message: capitalize(\$uname) + " has proofed " + \$ob + ".");
                            \$object."sys:shared:proof-by" = \$uname;
                            \$object."sys:shared:proof-completion" = time();
                            \$object."sys:shared:proof-announced" = TRUE;
                        \}
                        shared::."sys:shared:proofed" = map_indices(arr_to_set(shared::."sys:shared:proofed") + ([  \$ob : 1 ]));
                        shared::."sys:shared:unproofed" = Arr(shared::."sys:shared:unproofed") - (\{ \$ob \});
                    \}]
                    \<div class="italic"\>All aspects were proofed. This object has now been marked as 'proofed' in full. Thank you for being a wonderful person and doing that.\</div\>
                    \<script\>document.body.style.backgroundColor='#efe';\</script\>
                \|
                    \$[if (\$object."sys:shared:proofed") \{
                        \$object."sys:shared:proofed" = nil;
                        shared::."sys:shared:unproofed" = map_indices(arr_to_set(shared::."sys:shared:unproofed") + ([  \$ob : 1 ]));
                        shared::."sys:shared:proofed" = Arr(shared::."sys:shared:proofed") - (\{ \$ob \});
                    \}]
                    \<script\>document.body.style.backgroundColor='#ffe';\</script\>
                \}
                \$[\$object.unproofed = nil;
                \$object.prooflimited = nil;
                \$object.parseissues = nil;]
            \}
            \<br/\>
            \<br/\>
            \<br/\>
        \</body\>
    \</html\>
    \$[/* remove sam-evaulate inherit */
    Obj(\$ob)."merry:inherit:lib:proofer:temporary:sam-evaluate" = nil;]
\</z\>
\|\}
      </Core:Property>
      <Core:Property property="html:list">
         X[S] \{? \| \$(UDat.Host) \|
\<html\>
    \<head\>
        \<title\>Proof tool\</title\>
        \<style\>
        \$(this.sam:css)
        \</style\>
    \</head\>
    \<body\>
        \<h1\>Proof Tool\</h1\>
        \<p\>
            The following is a list of unproofed objects in the shared system. Click on one to see what it looks like.
        \</p\>
        \<p\>
        \{? \| \$(deferred) \|
            This is a list of deferred objects. To see the non-deferred, unproofed objects, \<a href="?"\>click here\</a\>.
        \|
            This list excludes all deferred objects. If you wish to see the list of deferred, \<a href="?deferred=1"\>click here\</a\>.
        \}
        \</p\>
        \$[::compute_list();]
        \<strong\>Click on a category to jump there:\</strong\>
        \<ul\>
        \<for val="\$(list_indices)" var="sys"\>
            \<li\>\<a href="#l\$(sys)"\>\$(sys)\</a\>\</li\>
        \</for\>
        \</ul\>
        \<table style="border: solid #ddd 1px;"\>
        \<for val="\$(list_indices)" var="sys"\>
            \<tr\>\<td colspan="2"\>
                \<sbr/\>
                \<a class="tag" name="l\$(sys)"\>
                    \<h2\>\$(sys)\</h2\>
                \</a\>
            \</td\>\</tr\>
            \$[\$list = \$list_map[\$sys];]
            \<for val="\$(list)" var="ob"\>
                \$[\$op = Obj("Shared:" + \$sys + ":" + \$ob);
                \$subfolder = explode(\$ob, ":")[0];
                \$visible = \$op \&\& typeof(\$op."base:details") == T_ARRAY \&\& !\$exclude_subfolder[\$sys + ":" + \$subfolder];
                \$ismorph = \$visible \&\& shared_object::is_morph(\$item: \$op);
                \$isreferenceobject = \$op \&\& \$op."sys:shared:builder-reference-object";]
                \{? \| \$(visible) \|
                    \<tr\>\<td\>
                        \{? \| \$(ismorph) \|
                            \<i\>\<a href="index?ob=Shared:\$(sys):\$(ob)"\>\$(ob)\</a\>\</i\>
                        \|
                            \<a href="index?ob=Shared:\$(sys):\$(ob)"\>\$(ob)\</a\>
                        \}
                    \</td\>\<td\>
                        \<span style="font-size: 10pt;"\>
                            \{? \| \$(op) \|
                                \{? \| \$(isreferenceobject) \|
                                    \<i\>[reference object]\</i\>
                                \|
                                    \{? \| \$(ismorph) \|
                                        \<i\>\<describe what="\$(op)"/\>\</i\>
                                    \|
                                        \<describe what="\$(op)"/\>
                                    \}
                                \}
                            \|
                                \<i\>object not found\</i\>
                            \}
                        \</span\>
                    \</td\>\</tr\>
                \|\}
            \</for\>
        \</for\>
        \</table\>
        \<sbr/\>
        [\<a href="/SAM/Prop/Shared:sys:build-tool:shared/List"\>go to +shared, the proofed objects list\</a\>]
    \</body\>
\</html\>
\|\}
      </Core:Property>
      <Core:Property property="html:props">
         X[S] \{? \| \$(UDat.Host) \|
\<html\>
    \<head\>
        \<title\>Properties\</title\>
        \<style\>
            \$(this.sam:css)
        \</style\>
        \<script\>
            \$(Lib:misc:xhr.sam:xhr)
            function flip(el, idx, prop) \\\{
                xhr_request('\$(this.name)', 'xhr_flip_delete', 'idx=' + idx + '\\\&prop=' + escape(prop), flipped);
                el.innerHTML = "[flipping]";
            \\\}
            function flipped(s) \\\{
                document.getElementById("span" + s[0]).innerHTML = s[1];
            \\\}
        \</script\>
    \</head\>
    \<body\>
        \<h1\>Shared Properties\</h1\>
        \<div class="italic"\>
            The following properties have been detected in shared (clothing) objects. You can choose to perform regular automatic maintenance on all shared objects. This means that once a week, every single shared object is scanned for properties and properties that should be cleared are deleted. (Eventually this tool may also support things like "if you find a property X, rename it to Y" or "if you find a property Z, call the script Y in the object Z".)
        \</div\>
        \$[int i, ix;
        mapping map;
        string *list, s;
        mapping delete;
        map = shared::."sys:shared:clothing:properties";
        list = map_indices(map);
        delete = Map(shared::."sys:shared:clothing:proprules:delete");
        ix = sizeof(list);
        \$content = (\{ (\{ "Property", "E.g.", "Rule" \}) \});
        for (i = 0; i \< ix; i++) \{
            s = typeof(map[list[i]]) == T_STRING ? map[list[i]] : dump_value(map[list[i]]);
            if (strlen(s) \> 30) s = s[..27] + "...";
            s = replace_strings(s, "\<", "\\\\\&lt;", "\>", "\\\\\&gt;", "\{", "\\\\\{", "\|", "\\\\\|", "\}", "\\\\\}");
            \$content += (\{ (\{ list[i], s, "\<span id='span" + i + "' class='link' onclick=\\"flip(this, " + i + ", '" + list[i] + "');\\"\>" + (delete[list[i]] ? "Delete" : "Keep") + "\</span\>" \}) \});
        \}
        return ParseXML(html::table(\$padding: 3, \$style: "border: solid 1px #555;"));]
    \</body\>
\</html\>
\|\}
      </Core:Property>
      <Core:Property property="html:test">
         X[S] \<ajax\>
\<html\>
        \<head\>
                \<ajax-head/\>
        \</head\>
\<body\>
        \<ajax-form id="findperson" ob="Chatters:LC:ka:kalle" fun="lookup"\>
                A name, plz: \<input name="person"/\>
                \<ajax-handle\>
                        alert("That person's woename is " + woename); // : " + result);
                \</ajax-handle\>
        \</ajax-form\>
\</body\>
\</html\>
\</ajax\>
      </Core:Property>
      <Core:Property property="html:xhr_flip_delete">
         X[S] \{? \| \$(UDat.Host) \|result = [\$(idx), "\$[mapping m;
int flagged;
if (!\$prop) error("No \$prop.");
m = Map(shared::."sys:shared:clothing:proprules:delete");
m[\$prop] = m[\$prop] ? nil : TRUE;
shared::."sys:shared:clothing:proprules:delete" = m;
return m[\$prop] ? "Delete" : "Keep";]", "\$(prop)"];\|\}
      </Core:Property>
      <Core:Property property="merry:global:command">
         X[M] /*
 * D=Proof verb.
 */
if (!\$line) \{
        EmitTo(\$actor,
               "Opening up the list of unproofed objects. If you want help on how to use +proof (the command), see: " +
               LINK("+man proof", "+man proof", "command") + "\\n\\n");
        Popup(\$actor, this, "list");
        /* EmitTo(\$actor, "+proof is used to assist you in proofing Shared objects. It brings up a simple popup with checkboxes for various things that should be examined before announcing an object as \\"proofed\\". Unproofed objects can be used as normal, with no side effects whatsoever. But proofing an object reassures that the object has been examined for common errors and similar."); */
        return nil;
\}

\{
        object ob;
        ob = Obj(\$line);
        if (!ob) \{
                NRef *t;
                t = inv::resolve_raw(\$raw: explode(\$line, " "));
                if (!sizeof(t)) \{
                        EmitTo(\$actor, "I am unable to locate " + \$line + ".");
                        return nil;
                \}
                if (sizeof(t) \> 1) \{
                        EmitTo(\$actor, "Which one of " + Describe(t, nil, nil, STYLE_NONPOSS) + " did you mean?");
                        return nil;
                \}
                ob = NRefOb(t[0]);
        \}
        if (name(ob)[0] == '[') ob = ob."core:ur:parent";
        if (!ob."sys:shared:is-shared") \{
                EmitTo(\$actor, "Oops. That object is not marked as shared.\\n\\nAn object with the property 'sys:shared:is-shared' is considered a shared object. This happens automagically if the object UrInherits from one of the common Shared ur-parents, such as UrWearable (all clothing), UrVessel (all drinks and food), and so on.\\n\\nIf it is supposed to be shared, you can sharify it now. Simply type: " + LINK("+sharify" + name(ob), "+sharify " + name(ob), "command"));
                return nil;
        \}

        Popup(\$actor, this, "index", \$ob: name(ob));
\}
EmitTo(\$actor, "\\nLoading popup. You may have popup blockers or similar, preventing this from working.");
      </Core:Property>
      <Core:Property property="merry:lib:autochecks">
         X[M] /*
 * D=Auto-checks on proofing.
 */
\{
    \$showstopper = FALSE;
    \$obptr       = Obj(\$obj);
    \$result      = "\<b\>Object exists:\</b\> ";
    if (!\$obptr) \{
        \$result += "FAILED\\n";
        return FALSE;
    \}
    \$result += "check\\n";
    \$result += "\<b\>Does it contain bilbo?\</b\> ";
    if (map_sizeof(prefixed_map(\$obptr."*", "bilbo:")) \> 0) \{
        \$result += "it does!\\n";
        return FALSE;
    \}
    \$result += "no; good\\n\<b\>Is it immobile?\</b\> ";
    if (\$obptr."base:immobile") \{
        \$result += "it is!\\n";
        return FALSE;
    \}
    \$result += "no; good\\n\<b\>What extended proofing checks should be made:\</b\> ";
    \$xtypename = \$obptr."sys:proofing:auto:name";
    if (!\$xtypename) \{
        \$result += "UNKNOWN/none (" + name(\$obptr) + ")\\n";
        \$xoutcome = nil;
        \$linksharify = TRUE;
        \$showstopper = TRUE;
        return FALSE;
    \}
    \$result += \$xtypename + "\\n";
    \$xoutcome = Call(\$obptr, "proof:autocheck");
    \$result += "\<b\>Is it an Ur-object?\</b\> ";
    if (contains(\$obj, ":Ur")) \{
        \$result += "it is! this object is potentially unproofable!\\n";
        return FALSE;
    \}
    \$result += "no; good\\n";

    return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:lib:check_and_lock">
         X[M] /*
 * D=Check and lock the \$object.
 */
constant DB = \$\{Data:Sync:LocalState\};
object locker;
mapping locks;

locks = Map(DB.shared_locks);

/* Check current lock, unless ignore_locks is set. */
if (!\$ignore_locks) \{
        locker = locks[\$object];
        /* \$object."sys:shared:proof:lock"; */
        if (locker \&\&
            (locker != \$udob \|\| locker."skotos:name" == "zwoc") \&\&
            locker."sys:shared:locking" == \$object \&\&
            locker."sys:shared:locked-at" \> time() + 3600) \{
                \$locker = capitalize(Str(locker."skotos:name"));
                \$locktime = short_time(locker."sys:shared:locked-at");
                \$lockexpiry = common::convsecs(\$secs: locker."sys:shared:locked-at" + 3600 - time(), \$short: TRUE);
                \$warn_about_lock = TRUE;
                return FALSE;
        \}
\}
/* Clear user's current lock (as we're moving to a new object). */
if (\$udob."sys:shared:locking" \&\&
    \$udob."sys:shared:locking" != \$object \&\&
    \$udob."sys:shared:locking"."sys:shared:proof:lock" == \$udob) \{
        \$udob."sys:shared:locking"."sys:shared:proof:lock" = nil;
\}

locks[\$object] = \$udob;
DB.shared_locks = locks;
/* ."sys:shared:proof:lock" = \$udob; */
\$udob."sys:shared:locking" = \$object;
\$udob."sys:shared:locked-at" = time();

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:compute_list">
         X[M] /*
 * D=Compute a list, sorted into systems, of unproofed objects in the Shared system.
 */
\{
    string *list, *x;
    mapping r;
    object *def;
    int i, ix;

    \$exclude_subfolder = shared::."sys:shared:exclude-subfolder";

    def = map_indices(Map(shared::."sys:shared:deferred")) - (\{ nil \});
    ix = sizeof(def);

    if (!\$deferred) \{
        /* First, we grab the full list. */
        list = shared::."sys:shared:unproofed";

        /* Remove deferred. */
        for (i = 0; i \< ix; i++) \{
            list -= (\{ name(def[i]) \});
        \}
        ix = sizeof(list);
    \} else \{
        /* We simply produce the deferred objects' list. */
        list = allocate(ix);
        for (i = 0; i \< ix; i++) \{
            list[i] = name(def[i]);
        \}
    \}

    /*
     * Now sort it into a mapping, by stripping "Shared:" off of the beginning,
     * and into the first value before the next ":". I.e. "Shared:clothing:foo"
     * is sorted into the "clothing" indice.
     */
    r = ([ ]);
    for (i = 0; i \< ix; i++) \{
        x = explode(list[i], ":");
        r[x[1]] = Arr(r[x[1]]) + (\{ implode(x[2..], ":") \});
    \}

    \$list_map = r;
    \$list_indices = map_indices(r);
\}
      </Core:Property>
      <Core:Property property="merry:lib:compute_woe_notes">
         X[M] /*
 * D=Produce table of woe notes.
 */
constant XI = !\$_parentnotesfetched;
int i, ix, j, jx, *notes;
string *cats, cat, state, text, user, epr, epo;

/* We want the parent's notes too. */
if (XI) \{
    if (\$op."core:ur:parent") ::compute_woe_notes(\$_parentnotesfetched: TRUE, \$op: contains
                                                  (name
                                                   (\$op."core:ur:parent"),
                                                   "Shared:Local:")
                                                  ? \$op."core:ur:parent"."core:ur:parent"
                                                  : \$op."core:ur:parent");
    \$parentinfonote = \$infonote;
\}

cats = \$op."notes:categories";
ix = sizeof(cats);
\$infonote = "";
\$infonid = nil;
if (XI) \{
    \$proofnotes = 0;
    \$tproof = 0;
    \$tother = 0;
    \$content = (\{ (\{ "Category", "Date", "By", "State", "Text", "" \}) \});
\}
for (i = 0; i \< ix; i++) \{
    notes = Get(\$op, "notes:cat:" + cats[i] + ":notes");
    jx = sizeof(notes);
    cat = cats[i];
    for (j = 0; j \< jx; j++) \{
        state = Str(Get(\$op, "notes:cat:" + cats[i] + ":note:" + notes[j] + ":state"));
        text = UnSAM(Get(\$op, "notes:cat:" + cats[i] + ":note:" + notes[j] + ":text"));
        user = Str(Get(\$op, "notes:cat:" + cats[i] + ":note:" + notes[j] + ":user"));
        if (cat == "+objectnotes") \{
            \$infonote += text;
            \$infonid = notes[j];
        \} else if (XI) \{
            args[cats[i] == "proofing" ? "tproof" : "tother"]++;
            if (cats[i] == "proofing" \&\& state != "Close") \{
                \$proofnotes++;
                epr = "\<span style='color:red;'\>";
                epo = "\</span\>";
            \} else \{
                epr = "";
                epo = "";
            \}
            \$content += (\{ (\{ epr + cat + epo, epr + short_time(notes[j]) + epo, epr + user + epo, epr + state + (state != "Close" ? " [\<span class='link' onclick='change_confirm(\\"the state to closed for this note\\", \\"notes:cat:" + cat + ":note:" + notes[j] + ":state\\", \\"close\\");'\>Close\</span\>]" : "") + epo, epr + text + epo, epr + "\<span class='link' onclick='delete_property(\\"woe note by " + user + "\\", \\"notes:cat:" + cat + ":note:" + notes[j] + ":state\\");'\>Delete\</span\>" + epo \}) \});
            cat = "";
        \}
    \}
\}
if (\$infonote == "") \$infonote = nil;
      </Core:Property>
      <Core:Property property="merry:lib:init">
         X[M] /*
 * D=Initialize proofing of \$ob.
 */
constant CSPAN = "\<span onclick='alert(this.title);' style='cursor: help;' class='serious' ";
constant AA = CSPAN + "title='This looks like a hard-coded \\"a\\"; it should probably use \<describe-prop\> or \<describe-props\> instead, to properly display vowels and consonants.'\>";
constant ACA = CSPAN + "title='This looks like a hard-coded \\"A\\"; it should probably use \<describe-prop\> or \<describe-props\> instead, to properly display vowels and consonants.'\>";

\$object = Obj(\$ob);
if (!\$object) error("Invalid object -- " + \$ob);

\$details = \$object."base:details:local";

if (\$change_property) \{
        /* A property-set request. */
        Set(\$object, \$change_property, \$newvalue == "nil" ? nil : \$newvalue);
\}
if (\$arrmap_delete \|\| \$arrmap_add) \{
        Set(\$object, \$arrmap_delete ? \$arrmap_delete : \$arrmap_add, !\$arrmap_delete);
\}
if (\$delprop) \{
        /* A property-delete request. */
        Set(\$object, \$delprop, nil);
\}

\$postproc_aan = (\{ " a a", AA + " a a\</span\>", " a e", AA + " a e\</span\>", " a i", AA + " a i\</span\>", " a o", AA + " a o\</span\>", " a u", AA + " a u\</span\>", "A a", ACA + "A a\</span\>", "A e", ACA + "A e\</span\>", "A i", ACA + "A i\</span\>", "A o", ACA + "A o\</span\>", "A u", ACA + "A u\</span\>", "An a ", CSPAN + "title='This looks like a hard-coded \\"a\\" after a described property. You should probably remove the hard-coded \\"a\\".'\>An a \</span\>", "an a ", CSPAN + "title='This looks like a hard-coded \\"a\\" after a described property. You should probably remove the hard-coded \\"a\\".'\>an a \</span\>", "An an ", CSPAN + "title='This looks like a hard-coded \\"an\\" after a described property. You should probably remove the hard-coded \\"an\\".'\>An an \</span\>", "an an ", CSPAN + "title='This looks like a hard-coded \\"an\\" after a described property. You should probably remove the hard-coded \\"an\\".'\>an an \</span\>" \});

\$postproc = (\{ " .", CSPAN + "title='This sentence looks like it needs a SAM if case.'\> .\</span\>", " , ", CSPAN + "title='This sentence looks like it needs a SAM if case.'\> , \</span\>" \});
      </Core:Property>
      <Core:Property property="merry:lib:parse">
         X[M] /*
 * D=Parse \$sam, converting it using \$filter, and perform \$postproc (replace strings argument array).
 */
\{
        string result, orig, err;

        /* First, we convert things to a string. */
        result = replace_strings
                (typeof(\$sam) == T_STRING
                 ? (strlen(\$sam) \< 5 \|\| \$sam[..4] != "X[S] " ? "X[S] " : "") + \$sam
                 : mixed_to_ascii(\$sam),
                 \$filter...);
        if (err = catch
            (result = Call(\$op, "proofer:temporary:sam-evaluate", \$the_sam: ascii_to_mixed(result)))) \{
                EmitTo(\$\{Data:info\}.debug, "PARSE ERROR: " + err + "\\nDATA:\\n" + result);
                result = "\<font color=red\>" + err + " [in lib:parse's attempt to evaluate SAM results]\</font\>";
        \}
        /* Now we postprocess the new UnSAM'ed string. */
        result = strip(result);
        orig = result;
        if (\$endindot) \{
                if (result != "" \&\& !([ '.':1, '!':1, '?':1 ])[result[strlen(result)-1]]) \{
                        result += "\<span onclick='alert(this.title);' title='This type of description should end with punctuation of some kind (most likely \\".\\").' style='cursor: help;' class='serious'\>[.!?]\</span\>";
                \}
        \}
        result = replace_strings
                (result,
                 \$postproc...);
        if (\$capcheck) \{
                if (result[0..0] != capitalize(result[0..0])) \{
                        result = "\<span onclick='alert(this.title);' title='Beginning of sentence is not capitalized. It is probably due to a nil trait that is missing a SAM if case, or something like \\"\$(this.trait:color) shoes\\", which can be fixed by doing \<capitalize what=\\"\$(this.trait:color) shoes\\" strip=\\"1\\"/\>.' style='cursor: help;' class='serious'\>" + result[0..0] + "\</span\>" + result[1..];
                \}
        \}
        if (\$dotissue) \{
                result = replace_strings(result, ".", "\<span onclick='alert(this.title);' title='This type of description should not have dots in them, unless that dot is there for very artistic reasons.' style='cursor: help;' class='serious'\>.\</span\>");
        \}
        \$op.parseissues \|= result != orig;
        return result;
\}
      </Core:Property>
      <Core:Property property="merry:lib:proofer:temporary:sam-evaluate">
         X[M] /*
 * D=Workaround to get 'this' right. Takes \$the_sam, which must be a SAM string (a T_OBJECT variable, to be specific).
 */
return UnSAM(\$the_sam);
      </Core:Property>
      <Core:Property property="merry:lib:test_item_name">
         X[M] /*
 * D=Test if the item's name is correct. Names for different objects follow different conventions!
 *
 * Object type:     Convention:
 * ---------------- ---------------------------------------------------------------------------------
 * Clothing         Shared:clothing:\<era\>:\<type\>:\<name\>-\<specifics\>/\<more-specifics\>
 * Food and drinks  Shared:food/drinks:[food/drink/vessel]:\<type\>:\<name\>-\<specifics\>/\<more-specifics\>
 *
 * Types for each object type are listed as follows.
 *
 * Object type:     \<type\> possible values:
 * ---------------- ---------------------------------------------------------------------------------
 * Clothing         accessories, belts, ensemble, footwear, handwear, headwear, leggings,
 *                  legwear, neckwear, shirts, underwear, unwearable.
 * Food             bread, dairy, fruit, meat, soup, dessert, pie, vegetable.
 * Drink            ales, wines, sodas, liquors, fruit-based, other
 */
\{
    \$name_convention = "Shared:\<system\>:\<type\>:\<name\>[-\<specifics\>[/\<more-specifics\>]]";
    \$name_conventional = FALSE;
    \$autokay = TRUE;
    \$sections = explode(\$obj, ":");
    if (\$sections[0] == "Shared") \{
        \$sections = \$sections[1..];
        \$appearance = "";
        \$object_name = "N/A";
        if (sizeof(\$sections)) \{
            \$type = \$sections[0];
            \$object_type = \$type;
            \$sections = \$sections[1..];
            \$typecomment = ([ "food/drinks" : "consumables, including foods, drinks, and utensils",
                              "clothing"    : "clothing system objects" ])[\$type];
            if (!\$typecomment) \$typecomment = "UNKNOWN";
            \$appearance += "\<li\>Shared:" + \$type + " \&mdash; " + \$typecomment + "\</li\>";
        \}
        if (FindMerry(this, "lib", "test_item_name_" + \$type)) Call(this, "test_item_name_" + \$type);
        \$name_convention = replace_strings(\$name_convention, "\<", "\&lt;", "\>", "\&gt;");
        if (\$autokay) \{
            \$name_conventional = TRUE;
            if (sizeof(\$sections)) \{
                \$type = \$sections[0];
                \$object_remainder = \$type;
                \$sub = explode(\$type, "-");
                if (sizeof(\$sub) \> 1) \{
                    \$type = \$sub[0];
                    \$least = \$sub[sizeof(\$sub)-1];
                    \$sub = implode(\$sub[1..], "-");
                    \$has_sub = TRUE;
                \} else \{
                    \$sub = \$sub[0];
                    \$has_sub = FALSE;
                \}
                \$child = explode(\$sub, "/");
                if (sizeof(\$child) \> 1) \{
                    SetVar(\$has_sub ? "sub" : "type", \$child[0]);
                    \$child = \$child[1];
                \} else \{
                    \$child = nil;
                \}
                \$object_name = \$type;
                \$appearance += "\<li\>" + \$type + " \&mdash; this is the most significant name\</li\>";
                if (\$has_sub) \$appearance += "\<li\>" + \$sub + " \&mdash; this is a unique kind of " + \$type + ", with " + \$least + " defining its least significant feature(s)\</li\>";
                if (\$child) \$appearance += "\<li\>" + \$child + " \&mdash; this is a child or portion of the " + \$type + (\$has_sub ? "-" + \$sub : "") + "\</li\>";
            \}
        \}
    \} else \{
        \$autokay = FALSE;
        \$appearance = "[THIS OBJECT IS NOT IN THE Shared: FOLDER]";
    \}
\}
      </Core:Property>
      <Core:Property property="merry:lib:test_item_name_clothing">
         X[M] /*
 * D=Clothing extended testing for the item name.
 */
\{
    \$name_convention = "Shared:clothing:\<era\>:\<type\>:\<name\>[-\<specifics\>[/\<more-specifics\>]]";
    if (sizeof(\$sections)) \{
        \$type = \$sections[0];
        \$object_era = \$type;
        \$known_era = \$object_era;
        \$sections = \$sections[1..];
        \$erasmap = ([ "ageless" : "style does not belong to any particular era",
                      "futuristic" : "style belongs in the futuristic era",
                      "ethnic" : "style belongs in the ethnic era",
                      "edwardian" : "style belongs in the edwardian era",
                      "regency" : "style belongs in the regency era",
                      "medieval" : "style belongs in the medieval era",
                      "modern" : "style belongs in the modern era",
                      "renaissance" : "style belongs in the renaissance era",
                      "contemporary" : "style belongs in the contemporary era",
                      "victorian" : "style belongs in the victorian era" ]);
        \$erasarr = (\{ "ageless", "medieval", "renaissance", "regency", "victorian", "edwardian", "contemporary", "modern", "futuristic", "ethnic" \});
        \$typecomment = \$erasmap[\$type];
        if (!\$typecomment) \{
            \$typecomment = "UNKNOWN";
            \$known_era = "UNKNOWN";
            \$autokay = FALSE;
        \}
        \$erasmap =
            ([ "ageless" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingAgeless'\>more\</a\>] " +
               "Ageless clothing fits in more or less anywhere and antime -- you might have one in your possession yourself, or you might find one in the possession of somebody living in medieval times, or in a western setting, etc. Examples of ageless objects are napkins, belts, or slippers.",

               "medieval" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingMedieval'\>more\</a\>] " +
               "Medieval clothing refers to clothing from the later part of the first millennium, through the dark ages until the renaissance (500-1300). Most outer bailey Castle Marrach clothing is medieval, and tends for the most part to be far simpler than clothing that comes later (renaissance and onward). Typical medieval clothing is based on a chemise, over which are layers of cloth. They tend to use draw strings rather than buttons, little or no collars, basic embroidery and simple types of cloth. Think of the wench in the tavern and the peasant working in the fields.",

               "renaissance" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingRenaissance'\>more\</a\>] " +
               "Renaissance clothing refers to the era from the late 14th through 17th centuries -- think Three Musketeers and Queen Elizabeth. Renaissance clothing tends to have more embroidery, fancy collars, buttons, frills, ruffs, lace, padding, etc. then medieval clothing. The fabric used tends to be more fancy.",

               "regency" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingRegency'\>more\</a\>] " +
               "Regency clothing refers to the era at the beginning of the 19th century (1800-1840) but also includes for our purposes much of the clothing which might normally be considered early Victorian (1840-1860) -- think of movies made from Jane Austen books. For women it this the era before the tight corset and bustle, bright colors are popular, and a square decolletage emphasizes the bosom. Men always wear vests, probably wear a cravat, and the jackets are typically longer in the back than they are in the front.",

               "victorian" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingVictorian'\>more\</a\>] " +
               "Victorian clothing refers to the era from the late 19th century (1850-1900) -- think Sherlock Holmes \& Jack the Ripper, corsets, bustles and high collars for women, top hats and bowlers for men. Much of what we think of as Old West clothing should be considered Victorian, as well much of the clothing of the Old South. Colors tend to be more dark, even black, especially toward the end of the period.",

               "edwardian" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingEdwardian'\>more\</a\>] " +
               "Edwardian clothing refers to the era at the beginning of the 20th century (1900-1920) -- think of the Gibson Girl. Women started wearing white or brighter colors, stopped wearing corsets as tight, ankles may show, and the decolletage is more daring. For men, much of the daytime clothing would be considered to the same as the contemporary era, but the classic tuxedo without a tail or a jackets that don't button would be classic Edwardian.",

               "contemporary" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingContemporary'\>more\</a\>] " +
               "Contemporary clothing refers to the era of more formal clothes that was largely worn from the 1920 through today -- most contemporary clothing would be quite appropriate in any decade from the 1920s through today, though might be a bit too formal for most day-to-day activities. Think of the men's business suit from the 20s that could be worn today to work, or the flapper dress that would be appropriate for dancing anytime between the 20s through today. Another way to think about it is if the clothing would be appropriate for Lovecraft Country in the 1930s, then it should be contemporary. If it is not, then modern.",

               "modern" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingModern'\>more\</a\>] " +
               "Modern clothing refers to the era of the more casual clothing that we would wear in the later half of the 20th century through today (1940+) -- when you think of modern, think of stuff that you'd wear casually around town. Modern clothing would largely look out of place if worn in the 20s, i.e. bikinis, sweat pants, etc.",

               "futuristic" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingFuturistic'\>more\</a\>] " +
               "Futuristic clothing refers to clothing that appears to be from the near or far future. This can include obvious things such as superhero costumes, future military hardware, space suits and borg outfits, but also includes some of the more far-out studded, pierced, and s\&m clothing such as vinyl catsuits.",

               "ethnic" : "[\<a href='https://twiki.skotos.net/twiki/bin/view/Builders/ClothingEthnic'\>more\</a\>] " +
               "Ethnic clothing refers to non-european/american clothing from any era that is from another culture and is named in another language.",

               "UNKNOWN" : "The era is unknown. This can mean that the era was simply not added to the proof tool." ]);
        \$era_data = \$erasmap[\$known_era];
        \$appearance += "\<li\>" + \$type + " \&mdash; " + \$typecomment + "\</li\>";
    \}
    if (sizeof(\$sections)) \{
        \$type = \$sections[0];
        \$coverage_type = \$type;
        \$sections = \$sections[1..];
        \$typecomment = ([ "accessories" : "doesn't fall into the other categories",
                          "armor" : "battlewear",
                          "ensemble" : "covers most of the body, such as a dress or cape",
                          "footwear" : "shoes, sandals, etc.",
                          "handwear" : "gloves, mittens, etc.",
                          "headwear" : "caps, helmets, etc.",
                          "legwear" : "garters, stockings, etc.",
                          "leggings" : "pants, trousers, etc.",
                          "neckwear" : "necklaces, etc.",
                          "shirts" : "shirts, coats, pullovers, and similar",
                          "underwear" : "underwear",
                          "unwearable" : "kerchiefs, for instance" ])[\$type];
        if (!\$typecomment) \{
            \$typecomment = "UNKNOWN";
            \$autokay = FALSE;
        \}
        \$appearance += "\<li\>" + \$type + " \&mdash; " + \$typecomment + "\</li\>";
    \}
\}
      </Core:Property>
      <Core:Property property="merry:lib:test_item_name_food/drinks">
         X[M] /*
 * D=Foods and drinks extended testing for the item name.
 */
\{
    \$name_convention = "Shared:food/drinks:[food/drink/vessel]:\<type\>:\<name\>[-\<portion\>]]";
    if (sizeof(\$sections)) \{
        \$type = \$sections[0];
        \$object_fdv = \$type;
        \$sections = \$sections[1..];
        \$fdvmap = ([ "food" : "item is edible",
                     "drinks" : "item is potable",
                     "utensils" : "item is a utility (vessel, plate, etc) for food and/or drinks",
                     "example" : "item is an example object (to be deprecated)" ]);
        \$fdvarr = map_indices(\$fdvmap);
        \$typecomment = \$fdvmap[\$type];
        if (!\$typecomment) \{
            \$typecomment = "UNKNOWN";
            \$known_fdv = "UNKNOWN";
            \$autokay = FALSE;
            \$era_data = "The part after 'food/drinks:' in the woe name must be one of: " + implode(map_indices(\$fdvmap), ", ") + ".";
        \}
        \$fdv_data = \$fdvmap[\$known_fdv];
        \$appearance += "\<li\>" + \$type + " \&mdash; " + \$typecomment + "\</li\>";
    \} else \$autokay = FALSE;
    if (\$object_fdv == "utensils") \{
        return TRUE;
    \}
    if (sizeof(\$sections)) \{
        \$type = \$sections[0];
        \$coverage_type = \$type;
        \$sections = \$sections[1..];
        \$fdv_all = ([ "food" : ([ "bread" : "Bread-based foods, such as bagels, rye bread, etc.",
                                  "dairy" : "Dairy food, such as cheese or milk.",
                                  "fruit" : "Fruits, and fruit-based foods; apples, oranges, pears, raisins, etc.",
                                  "meat" : "Meat-based foods; beef-rolls, meatloaves, chickenwings, etc.",
                                  "dessert" : "Desserts of any kind.",
                                  "staple" : "Foods where the main ingredient is potatoes, pasta, rice, etc.",
                                  "pie" : "Pies, including dessert pies such as apple pie.",
                                  "vegetable" : "Vegetables-based foods.",
                                  "soup" : "Soups." ]),
                      "drinks" : ([ "brewed" : "Ale, beer, and other brewed beverage.",
                                    "fermented" : "Wines and other fermented beverages.",
                                    "distilled" : "Vodka, and other distilled beverages.",
                                    "soda" : "Carbonated beverages.",
                                    "liquor" : "All strong alcoholic beverages, such as vodka, go here.",
                                    "fruit-based" : "Apple juice, orange juice, lemonade, etc.",
                                    "other" : "Anything that isn't ale, wine, soda, liquor, or fruit-based (e.g. water)." ]) ]);
        \$fdv_types = \$fdv_all[\$object_fdv];
        if (!\$fdv_types) \$fdv_types = \$fdv_all["food"] + \$fdv_all["drinks"];
        \$typecomment = \$fdv_types[\$type];
        if (!\$typecomment) \{
            \$typecomment = "UNKNOWN";
            \$autokay = FALSE;
            \$era_data = "The part after '" + \$object_fdv + ":' must be one of: " + implode(map_indices(\$fdv_types), ", ") + ".";
        \}
        \$appearance += "\<li\>" + \$type + " \&mdash; " + \$typecomment + "\</li\>";
    \} else \$autokay = FALSE;
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052091, "-", "SYNC", 1161678246, "zwoc", "E", 1161678260, "zwoc", "E", 1161679372, "zwoc", "EED", 1161679424, "zwoc", "EED", 1161679521, "zwoc", "P", 1161680428, "zwoc", "P", 1161680484, "zwoc", "P", 1161680511, "zwoc", "P", 1161680538, "zwoc", "P", 1161680584, "zwoc", "P", 1161680737, "zwoc", "EED", 1161680897, "zwoc", "P", 1161680928, "zwoc", "P", 1161680944, "zwoc", "P", 1161681026, "zwoc", "P", 1161681039, "zwoc", "P", 1161681218, "zwoc", "P", 1161681752, "zwoc", "P", 1161681930, "zwoc", "P", 1161681968, "zwoc", "P", 1161681985, "zwoc", "P", 1161682000, "zwoc", "P", 1161682030, "zwoc", "P", 1161682047, "zwoc", "P", 1161682058, "zwoc", "P", 1161682073, "zwoc", "P", 1161682120, "zwoc", "P", 1161682141, "zwoc", "P", 1161682155, "zwoc", "P", 1161682170, "zwoc", "P", 1161682208, "zwoc", "P", 1161682219, "zwoc", "P", 1161682265, "zwoc", "P", 1161682281, "zwoc", "P", 1161682307, "zwoc", "P", 1161682318, "zwoc", "P", 1161682323, "zwoc", "P", 1161682337, "zwoc", "P", 1161682374, "zwoc", "P", 1161682419, "zwoc", "P", 1161682749, "zwoc", "P", 1161682800, "zwoc", "P", 1161682858, "zwoc", "P", 1161682881, "zwoc", "P", 1161682886, "zwoc", "P", 1161682928, "zwoc", "P", 1161682947, "zwoc", "P", 1161682959, "zwoc", "P", 1161683083, "zwoc", "P", 1161683159, "zwoc", "P", 1161683208, "zwoc", "P", 1161683252, "zwoc", "P", 1161683378, "zwoc", "P", 1161683403, "zwoc", "P", 1161683452, "zwoc", "P", 1161683645, "zwoc", "P", 1161683816, "zwoc", "P", 1161683842, "zwoc", "P", 1161684196, "zwoc", "P", 1161684283, "zwoc", "P", 1161702586, "zwoc", "P", 1161702641, "zwoc", "P", 1161702847, "zwoc", "P", 1161702924, "zwoc", "P", 1163008064, "zwoc", "P", 1163008142, "zwoc", "P", 1163008261, "zwoc", "P", 1163008279, "zwoc", "P", 1163008338, "zwoc", "P", 1163008364, "zwoc", "P", 1163008377, "zwoc", "P", 1163008399, "zwoc", "P", 1163008417, "zwoc", "P", 1163008432, "zwoc", "P", 1163008678, "zwoc", "P", 1163008693, "zwoc", "P", 1163009034, "zwoc", "P", 1163009128, "zwoc", "P", 1163009163, "zwoc", "P", 1163009196, "zwoc", "P", 1163009251, "zwoc", "P", 1163009270, "zwoc", "P", 1163009334, "zwoc", "P", 1163009345, "zwoc", "P", 1163009367, "zwoc", "P", 1163009423, "zwoc", "P", 1163009460, "zwoc", "P", 1163009488, "zwoc", "P", 1163009505, "zwoc", "P", 1163009625, "zwoc", "P", 1163009746, "zwoc", "P", 1163009943, "zwoc", "P", 1163010174, "zwoc", "P", 1163010199, "zwoc", "P", 1163010386, "zwoc", "P", 1163010436, "zwoc", "P", 1163010493, "zwoc", "P", 1163010963, "zwoc", "P", 1163011009, "zwoc", "P", 1163011029, "zwoc", "P", 1163011057, "zwoc", "P", 1163011119, "zwoc", "P", 1163011232, "zwoc", "P", 1163011237, "zwoc", "P", 1163011267, "zwoc", "P", 1163011339, "zwoc", "P", 1163011424, "zwoc", "P", 1163011457, "zwoc", "P", 1163011515, "zwoc", "P", 1163011540, "zwoc", "P", 1163011731, "zwoc", "P", 1163011941, "zwoc", "P", 1163011988, "zwoc", "P", 1163012002, "zwoc", "P", 1163012187, "zwoc", "P", 1163012268, "zwoc", "P", 1163012292, "zwoc", "P", 1163012682, "zwoc", "P", 1163012741, "zwoc", "P", 1163012793, "zwoc", "P", 1163012835, "zwoc", "P", 1163013521, "zwoc", "P", 1163013637, "zwoc", "P", 1163013685, "zwoc", "P", 1163014284, "zwoc", "P", 1163014498, "zwoc", "P", 1163014504, "zwoc", "P", 1163014515, "zwoc", "P", 1163014536, "zwoc", "P", 1163014556, "zwoc", "P", 1163014582, "zwoc", "P", 1163014601, "zwoc", "P", 1163014614, "zwoc", "P", 1163014642, "zwoc", "P", 1163014674, "zwoc", "P", 1163014716, "zwoc", "P", 1163014844, "zwoc", "P", 1163014912, "zwoc", "P", 1163015017, "zwoc", "P", 1163015196, "zwoc", "P", 1163015282, "zwoc", "P", 1163015288, "zwoc", "P", 1163015471, "zwoc", "P", 1163015481, "zwoc", "P", 1163015594, "zwoc", "P", 1163015797, "zwoc", "EED", 1163015800, "zwoc", "P", 1163015806, "zwoc", "P", 1163015975, "zwoc", "EED", 1163016629, "zwoc", "P", 1163016632, "zwoc", "P", 1163016648, "zwoc", "P", 1163016665, "zwoc", "EED", 1163016838, "zwoc", "P", 1163016851, "zwoc", "P", 1163016935, "zwoc", "P", 1163016949, "zwoc", "P", 1163016967, "zwoc", "P", 1163016977, "zwoc", "P", 1163017017, "zwoc", "P", 1163017035, "zwoc", "P", 1163017371, "zwoc", "P", 1163017387, "zwoc", "P", 1163017976, "zwoc", "P", 1163018016, "zwoc", "P", 1163018143, "zwoc", "P", 1163018153, "zwoc", "P", 1163018169, "zwoc", "P", 1163018418, "zwoc", "P", 1163018602, "zwoc", "P", 1163018635, "zwoc", "P", 1163018649, "zwoc", "P", 1163018666, "zwoc", "P", 1163018682, "zwoc", "P", 1163018688, "zwoc", "P", 1163018702, "zwoc", "P", 1163018731, "zwoc", "P", 1163018806, "zwoc", "P", 1163019055, "zwoc", "P", 1163019174, "zwoc", "P", 1163019295, "zwoc", "P", 1163019813, "zwoc", "P", 1163019941, "zwoc", "P", 1163019978, "zwoc", "P", 1163020122, "zwoc", "P", 1163020135, "zwoc", "P", 1163020204, "zwoc", "P", 1163020548, "zwoc", "P", 1163020665, "zwoc", "P", 1163090018, "zwoc", "P", 1163091106, "zwoc", "P", 1163091331, "zwoc", "P", 1163091707, "zwoc", "P", 1163091759, "zwoc", "P", 1163091806, "zwoc", "P", 1163094139, "zwoc", "P", 1163095100, "zwoc", "P", 1163095205, "zwoc", "P", 1163095847, "zwoc", "P", 1163095878, "zwoc", "P", 1163096626, "zwoc", "P", 1163096733, "zwoc", "P", 1163096811, "zwoc", "P", 1163096952, "zwoc", "P", 1163096973, "zwoc", "EED", 1163097175, "zwoc", "EED", 1163097327, "zwoc", "EED", 1163097332, "zwoc", "EED", 1163097665, "zwoc", "EED", 1163097839, "zwoc", "EED", 1163097935, "zwoc", "P", 1163098043, "zwoc", "EED", 1163098050, "zwoc", "EED", 1163098060, "zwoc", "EED", 1163098124, "zwoc", "EED", 1163098198, "zwoc", "P", 1163098242, "zwoc", "P", 1163098312, "zwoc", "P", 1163099073, "zwoc", "P", 1163164456, "zwoc", "P", 1163164511, "zwoc", "P", 1163164526, "zwoc", "P", 1163164582, "zwoc", "P", 1163164596, "zwoc", "P", 1163164620, "zwoc", "P", 1163164657, "zwoc", "P", 1163164662, "zwoc", "P", 1163164717, "zwoc", "P", 1163164737, "zwoc", "P", 1163164747, "zwoc", "P", 1163164769, "zwoc", "P", 1163164780, "zwoc", "P", 1163164791, "zwoc", "P", 1163164804, "zwoc", "P", 1163164830, "zwoc", "P", 1163164836, "zwoc", "P", 1163165450, "zwoc", "P", 1163165491, "zwoc", "P", 1163165592, "zwoc", "P", 1163166096, "zwoc", "P", 1163166394, "zwoc", "P", 1163166407, "zwoc", "P", 1163166469, "zwoc", "P", 1163166563, "zwoc", "P", 1163166578, "zwoc", "P", 1163166582, "zwoc", "P", 1163167286, "zwoc", "P", 1163167342, "zwoc", "P", 1163167403, "zwoc", "P", 1163167418, "zwoc", "P", 1163167769, "zwoc", "P", 1163167808, "zwoc", "P", 1163168065, "zwoc", "P", 1163168116, "zwoc", "P", 1163168279, "zwoc", "P", 1163168313, "zwoc", "P", 1163168325, "zwoc", "P", 1163168338, "zwoc", "P", 1163168664, "zwoc", "P", 1163169629, "zwoc", "P", 1163169647, "zwoc", "P", 1163169672, "zwoc", "P", 1163169756, "zwoc", "P", 1163169794, "zwoc", "P", 1163169803, "zwoc", "P", 1163169813, "zwoc", "P", 1163170048, "zwoc", "P", 1163170092, "zwoc", "P", 1163172081, "zwoc", "P", 1163172243, "zwoc", "P", 1163173068, "zwoc", "P", 1163173176, "zwoc", "P", 1163173195, "zwoc", "P", 1163173271, "zwoc", "P", 1163173487, "zwoc", "P", 1163173495, "zwoc", "P", 1163173624, "zwoc", "P", 1163173659, "zwoc", "P", 1163173684, "zwoc", "P", 1163173698, "zwoc", "P", 1163173720, "zwoc", "P", 1163173729, "zwoc", "P", 1163173738, "zwoc", "P", 1163173852, "zwoc", "P", 1163173898, "zwoc", "P", 1163173991, "zwoc", "P", 1163174288, "zwoc", "P", 1163174563, "zwoc", "P", 1163180564, "zwoc", "P", 1163181496, "zwoc", "P", 1163181508, "zwoc", "P", 1163181527, "zwoc", "P", 1163181535, "zwoc", "P", 1163181564, "zwoc", "P", 1163181593, "zwoc", "P", 1163181610, "zwoc", "P", 1163181957, "zwoc", "P", 1163182015, "zwoc", "P", 1163182104, "zwoc", "P", 1163184913, "zwoc", "P", 1163184927, "zwoc", "P", 1163184945, "zwoc", "P", 1163184974, "zwoc", "P", 1163185319, "zwoc", "P", 1163185389, "zwoc", "P", 1163186038, "zwoc", "P", 1163186134, "zwoc", "P", 1163186160, "zwoc", "P", 1163186364, "zwoc", "P", 1163186424, "zwoc", "P", 1163186501, "zwoc", "P", 1163186522, "zwoc", "P", 1163186647, "zwoc", "P", 1163186809, "zwoc", "P", 1163187204, "zwoc", "P", 1163187242, "zwoc", "P", 1163187343, "zwoc", "P", 1163187356, "zwoc", "P", 1163187403, "zwoc", "P", 1163187434, "zwoc", "P", 1163187477, "zwoc", "P", 1163187642, "zwoc", "P", 1163188038, "zwoc", "P", 1163188150, "zwoc", "P", 1163188360, "zwoc", "P", 1163188519, "zwoc", "P", 1163189013, "zwoc", "P", 1163189150, "zwoc", "P", 1163189195, "zwoc", "P", 1163189224, "zwoc", "P", 1163189253, "zwoc", "P", 1163190121, "zwoc", "P", 1163190472, "zwoc", "P", 1163190536, "zwoc", "P", 1163190549, "zwoc", "P", 1163190760, "zwoc", "P", 1163190816, "zwoc", "P", 1163190874, "zwoc", "P", 1163191057, "zwoc", "P", 1163191097, "zwoc", "P", 1163191163, "zwoc", "P", 1163191490, "zwoc", "P", 1163191511, "zwoc", "P", 1163192134, "zwoc", "P", 1163192195, "zwoc", "P", 1163192263, "zwoc", "P", 1163192769, "zwoc", "P", 1163192807, "zwoc", "P", 1163427762, "zwoc", "P", 1163427785, "zwoc", "P", 1163427797, "zwoc", "P", 1163427833, "zwoc", "P", 1163427875, "zwoc", "P", 1163428053, "zwoc", "P", 1163428165, "zwoc", "P", 1163428763, "zwoc", "P", 1163428944, "zwoc", "P", 1163431105, "zwoc", "P", 1163431967, "zwoc", "P", 1163431989, "zwoc", "P", 1163432489, "zwoc", "P", 1163432595, "zwoc", "P", 1163432608, "zwoc", "P", 1163433296, "zwoc", "P", 1163433587, "zwoc", "P", 1163433685, "zwoc", "P", 1163433838, "zwoc", "P", 1163434084, "zwoc", "EED", 1163434283, "zwoc", "P", 1163434292, "zwoc", "P", 1163434384, "zwoc", "P", 1163434689, "zwoc", "EED", 1163434723, "zwoc", "EED", 1163434857, "zwoc", "EED", 1163434942, "zwoc", "P", 1163435237, "zwoc", "P", 1163435242, "zwoc", "P", 1163435257, "zwoc", "P", 1163435261, "zwoc", "P", 1163435281, "zwoc", "P", 1163435290, "zwoc", "P", 1163435381, "zwoc", "P", 1163435403, "zwoc", "P", 1163435420, "zwoc", "P", 1163435431, "zwoc", "P", 1163435443, "zwoc", "P", 1163435452, "zwoc", "P", 1163435467, "zwoc", "P", 1163435476, "zwoc", "P", 1163435485, "zwoc", "P", 1163435567, "zwoc", "P", 1163435586, "zwoc", "P", 1163435620, "zwoc", "P", 1163435627, "zwoc", "P", 1163435633, "zwoc", "P", 1163435693, "zwoc", "P", 1163435770, "zwoc", "P", 1163435798, "zwoc", "P", 1163435804, "zwoc", "P", 1163435867, "zwoc", "P", 1163435874, "zwoc", "P", 1163435913, "zwoc", "P", 1163435927, "zwoc", "P", 1163435958, "zwoc", "P", 1163435964, "zwoc", "P", 1163435985, "zwoc", "P", 1163435997, "zwoc", "P", 1163436062, "zwoc", "P", 1163436142, "zwoc", "P", 1163436151, "zwoc", "P", 1163436161, "zwoc", "P", 1163436182, "zwoc", "P", 1163436201, "zwoc", "P", 1163436268, "zwoc", "P", 1163436273, "zwoc", "P", 1163436280, "zwoc", "P", 1163436342, "zwoc", "P", 1163436507, "zwoc", "EED", 1163436662, "zwoc", "P", 1163436670, "zwoc", "P", 1163436677, "zwoc", "P", 1163436685, "zwoc", "P", 1163436715, "zwoc", "P", 1163436723, "zwoc", "P", 1163436741, "zwoc", "P", 1163436749, "zwoc", "P", 1163436762, "zwoc", "P", 1163436781, "zwoc", "P", 1163436794, "zwoc", "P", 1163436829, "zwoc", "P", 1163436836, "zwoc", "P", 1163436859, "zwoc", "P", 1163436927, "zwoc", "P", 1163436935, "zwoc", "P", 1163436952, "zwoc", "P", 1163436973, "zwoc", "P", 1163436985, "zwoc", "P", 1163436997, "zwoc", "P", 1163437003, "zwoc", "P", 1163437009, "zwoc", "P", 1163437015, "zwoc", "P", 1163437038, "zwoc", "P", 1163437053, "zwoc", "P", 1163437060, "zwoc", "P", 1163437066, "zwoc", "P", 1163437072, "zwoc", "P", 1163437115, "zwoc", "P", 1163437124, "zwoc", "P", 1163437132, "zwoc", "P", 1163437140, "zwoc", "P", 1163437154, "zwoc", "P", 1163437167, "zwoc", "P", 1163437185, "zwoc", "P", 1163437353, "zwoc", "EED", 1163437391, "zwoc", "EED", 1163437703, "zwoc", "P", 1163437732, "zwoc", "P", 1163437774, "zwoc", "P", 1163437784, "zwoc", "P", 1163437914, "zwoc", "P", 1163438043, "zwoc", "P", 1163438116, "zwoc", "P", 1163438156, "zwoc", "P", 1163438196, "zwoc", "P", 1163438280, "zwoc", "EED", 1163439694, "zwoc", "P", 1163439797, "zwoc", "P", 1163439855, "zwoc", "P", 1163439928, "zwoc", "EED", 1163439958, "zwoc", "P", 1163439978, "zwoc", "P", 1163440097, "zwoc", "P", 1163440137, "zwoc", "P", 1163440172, "zwoc", "P", 1163440207, "zwoc", "P", 1163440285, "zwoc", "P", 1163440317, "zwoc", "P", 1163440344, "zwoc", "EED", 1163440402, "zwoc", "P", 1163440499, "zwoc", "P", 1163440817, "zwoc", "EED", 1163440998, "zwoc", "P", 1163441242, "zwoc", "P", 1163441612, "zwoc", "EED", 1163441620, "zwoc", "P", 1163441888, "zwoc", "P", 1163441997, "zwoc", "P", 1163442007, "zwoc", "P", 1163442190, "zwoc", "P", 1163442529, "zwoc", "P", 1163442581, "zwoc", "P", 1163443112, "zwoc", "P", 1163443118, "zwoc", "P", 1163443124, "zwoc", "P", 1163443130, "zwoc", "P", 1163443136, "zwoc", "P", 1163443144, "zwoc", "P", 1163443169, "zwoc", "P", 1163443193, "zwoc", "P", 1163443286, "zwoc", "P", 1163443301, "zwoc", "P", 1163443309, "zwoc", "P", 1163443321, "zwoc", "P", 1163443338, "zwoc", "P", 1163443348, "zwoc", "P", 1163443362, "zwoc", "P", 1163443372, "zwoc", "P", 1163443395, "zwoc", "P", 1163443414, "zwoc", "P", 1163443427, "zwoc", "P", 1163443447, "zwoc", "P", 1163443460, "zwoc", "P", 1163443468, "zwoc", "P", 1163443499, "zwoc", "P", 1163443522, "zwoc", "P", 1163443541, "zwoc", "P", 1163443565, "zwoc", "P", 1163443571, "zwoc", "P", 1163443580, "zwoc", "P", 1163443593, "zwoc", "P", 1163443610, "zwoc", "P", 1163443640, "zwoc", "P", 1163443729, "zwoc", "P", 1163444047, "zwoc", "P", 1163444107, "zwoc", "P", 1163444118, "zwoc", "P", 1163444393, "zwoc", "P", 1163444471, "zwoc", "P", 1163444502, "zwoc", "P", 1163446208, "zwoc", "P", 1163446221, "zwoc", "P", 1163446814, "zwoc", "P", 1163447028, "zwoc", "P", 1163447856, "zwoc", "P", 1163448239, "zwoc", "P", 1163448267, "zwoc", "P", 1163448405, "zwoc", "P", 1163448514, "zwoc", "P", 1163448542, "zwoc", "P", 1163448560, "zwoc", "P", 1163448687, "zwoc", "P", 1163448699, "zwoc", "P", 1163448704, "zwoc", "P", 1163448764, "zwoc", "P", 1163448773, "zwoc", "P", 1163448784, "zwoc", "P", 1163448874, "zwoc", "P", 1163448882, "zwoc", "P", 1163448917, "zwoc", "P", 1163448981, "zwoc", "P", 1163449025, "zwoc", "P", 1163449096, "zwoc", "P", 1163449109, "zwoc", "P", 1163449147, "zwoc", "P", 1163449155, "zwoc", "P", 1163449195, "zwoc", "P", 1163449246, "zwoc", "P", 1163449264, "zwoc", "P", 1163449313, "zwoc", "P", 1163449328, "zwoc", "P", 1163449336, "zwoc", "P", 1163449356, "zwoc", "P", 1163449365, "zwoc", "P", 1163449464, "zwoc", "P", 1163449715, "zwoc", "P", 1163449741, "zwoc", "P", 1163449760, "zwoc", "P", 1163450152, "zwoc", "P", 1163450174, "zwoc", "P", 1163450209, "zwoc", "P", 1163450276, "zwoc", "P", 1163450366, "zwoc", "P", 1163450385, "zwoc", "P", 1163450456, "zwoc", "P", 1163450529, "zwoc", "P", 1163450589, "zwoc", "P", 1163450669, "zwoc", "P", 1163450725, "zwoc", "P", 1163450785, "zwoc", "P", 1163451328, "zwoc", "P", 1163453242, "zwoc", "P", 1163453271, "zwoc", "P", 1163453309, "zwoc", "P", 1163453314, "zwoc", "P", 1163453331, "zwoc", "P", 1163453359, "zwoc", "P", 1163453379, "zwoc", "P", 1163453395, "zwoc", "P", 1163494043, "zwoc", "P", 1163494128, "zwoc", "P", 1163494207, "zwoc", "P", 1163494281, "zwoc", "P", 1163494331, "zwoc", "P", 1163494420, "zwoc", "P", 1163494443, "zwoc", "P", 1163494466, "zwoc", "P", 1163494595, "zwoc", "P", 1163494615, "zwoc", "P", 1163494630, "zwoc", "P", 1163494696, "zwoc", "P", 1163494740, "zwoc", "P", 1163494799, "zwoc", "P", 1163494836, "zwoc", "P", 1163494865, "zwoc", "P", 1163494891, "zwoc", "P", 1163496811, "zwoc", "P", 1163496838, "zwoc", "P", 1163497225, "zwoc", "P", 1163497634, "zwoc", "P", 1163499003, "zwoc", "EED", 1163499102, "zwoc", "P", 1163499172, "zwoc", "EED", 1163499688, "zwoc", "P", 1163499702, "zwoc", "P", 1163500709, "zwoc", "P", 1163500716, "zwoc", "P", 1163500741, "zwoc", "P", 1163500767, "zwoc", "P", 1163500855, "zwoc", "P", 1163500877, "zwoc", "P", 1163500890, "zwoc", "P", 1163500894, "zwoc", "P", 1163500919, "zwoc", "P", 1163500990, "zwoc", "P", 1163501102, "zwoc", "P", 1163501570, "zwoc", "P", 1163501596, "zwoc", "P", 1163501648, "zwoc", "P", 1163501662, "zwoc", "P", 1163501904, "zwoc", "P", 1163501993, "zwoc", "P", 1163501999, "zwoc", "P", 1163517462, "zwoc", "P", 1163517500, "zwoc", "P", 1163517548, "zwoc", "P", 1163518080, "zwoc", "P", 1163518206, "zwoc", "P", 1163518259, "zwoc", "P", 1163518291, "zwoc", "P", 1163519097, "zwoc", "P", 1163519149, "zwoc", "P", 1163519168, "zwoc", "P", 1163519198, "zwoc", "P", 1163519229, "zwoc", "P", 1163519282, "zwoc", "P", 1163519306, "zwoc", "P", 1163519329, "zwoc", "P", 1163519373, "zwoc", "P", 1163519702, "zwoc", "EED", 1163519798, "zwoc", "P", 1163519910, "zwoc", "EED", 1163520005, "zwoc", "P", 1163520128, "zwoc", "P", 1163520289, "zwoc", "P", 1163520293, "zwoc", "P", 1163520316, "zwoc", "P", 1163520397, "zwoc", "P", 1163520458, "zwoc", "P", 1163520511, "zwoc", "P", 1163520545, "zwoc", "P", 1163520792, "zwoc", "P", 1163520814, "zwoc", "EED", 1163520839, "zwoc", "EED", 1163520865, "zwoc", "EED", 1163521003, "zwoc", "EED", 1163521060, "zwoc", "EED", 1163521367, "zwoc", "P", 1163521371, "zwoc", "P", 1163521427, "zwoc", "P", 1163521569, "zwoc", "P", 1163522020, "zwoc", "P", 1163522081, "zwoc", "P", 1163523230, "zwoc", "P", 1163524013, "zwoc", "P", 1163526969, "zwoc", "P", 1163527081, "zwoc", "P", 1163527260, "zwoc", "P", 1163527311, "zwoc", "P", 1163527352, "zwoc", "P", 1163527371, "zwoc", "P", 1163528929, "zwoc", "P", 1163528951, "zwoc", "P", 1163529117, "zwoc", "P", 1163529321, "zwoc", "EED", 1163529330, "zwoc", "EED", 1163530602, "zwoc", "EED", 1163530636, "zwoc", "EED", 1163530850, "zwoc", "EED", 1163531136, "zwoc", "P", 1163531145, "zwoc", "EED", 1163531208, "zwoc", "P", 1163531230, "zwoc", "P", 1163531243, "zwoc", "P", 1163531256, "zwoc", "P", 1163531275, "zwoc", "P", 1163531281, "zwoc", "P", 1163531429, "zwoc", "P", 1163531453, "zwoc", "P", 1163531580, "zwoc", "P", 1163531674, "zwoc", "P", 1163532058, "zwoc", "P", 1163532156, "zwoc", "EED", 1163532166, "zwoc", "EED", 1163532192, "zwoc", "EED", 1163532226, "zwoc", "EED", 1163532278, "zwoc", "P", 1163532285, "zwoc", "P", 1163532298, "zwoc", "P", 1163532450, "zwoc", "P", 1163532509, "zwoc", "EED", 1163532658, "zwoc", "EED", 1163532778, "zwoc", "EED", 1163532818, "zwoc", "EED", 1163532890, "zwoc", "P", 1163533063, "zwoc", "P", 1163533130, "zwoc", "EED", 1163533139, "zwoc", "P", 1163533180, "zwoc", "P", 1163533252, "zwoc", "EED", 1163533272, "zwoc", "EED", 1163533281, "zwoc", "P", 1163533631, "zwoc", "EED", 1163533669, "zwoc", "EED", 1163533745, "zwoc", "EED", 1163533862, "zwoc", "P", 1163534113, "zwoc", "P", 1163534180, "zwoc", "P", 1163534191, "zwoc", "P", 1163534199, "zwoc", "P", 1163534225, "zwoc", "P", 1163534244, "zwoc", "P", 1163534278, "zwoc", "P", 1163534285, "zwoc", "P", 1163534427, "zwoc", "P", 1163534458, "zwoc", "P", 1163534674, "zwoc", "P", 1163534964, "zwoc", "P", 1163535131, "zwoc", "P", 1163535304, "zwoc", "P", 1163535351, "zwoc", "P", 1163535390, "zwoc", "P", 1163535716, "zwoc", "P", 1163535738, "zwoc", "P", 1163535905, "zwoc", "P", 1163535942, "zwoc", "P", 1163536012, "zwoc", "EED", 1163536063, "zwoc", "P", 1163536117, "zwoc", "EED", 1163536159, "zwoc", "EED", 1163536185, "zwoc", "EED", 1163536259, "zwoc", "P", 1163536362, "zwoc", "P", 1163536453, "zwoc", "EED", 1163536602, "zwoc", "EED", 1163536650, "zwoc", "P", 1163536670, "zwoc", "EED", 1163536712, "zwoc", "P", 1163536738, "zwoc", "EED", 1163536763, "zwoc", "P", 1163536783, "zwoc", "P", 1163536877, "zwoc", "P", 1163536951, "zwoc", "EED", 1163537075, "zwoc", "P", 1163537109, "zwoc", "P", 1163537147, "zwoc", "P", 1163537448, "zwoc", "P", 1163537473, "zwoc", "P", 1163537490, "zwoc", "P", 1163537496, "zwoc", "P", 1163537511, "zwoc", "P", 1163537530, "zwoc", "P", 1163537547, "zwoc", "P", 1163538890, "zwoc", "P", 1163538905, "zwoc", "P", 1163538938, "zwoc", "P", 1163539083, "zwoc", "P", 1163539182, "zwoc", "P", 1163539192, "zwoc", "P", 1163539696, "zwoc", "P", 1163539715, "zwoc", "P", 1163539760, "zwoc", "P", 1163539783, "zwoc", "P", 1163540235, "zwoc", "P", 1163540262, "zwoc", "P", 1163540494, "zwoc", "P", 1163540532, "zwoc", "P", 1163541480, "zwoc", "P", 1163541528, "zwoc", "P", 1163593083, "zwoc", "EED", 1163594353, "zwoc", "EED", 1163594469, "zwoc", "EED", 1163594529, "zwoc", "P", 1163594564, "zwoc", "P", 1163595172, "zwoc", "P", 1163595282, "zwoc", "P", 1163595387, "zwoc", "P", 1163595444, "zwoc", "P", 1163595482, "zwoc", "P", 1163595527, "zwoc", "P", 1163595577, "zwoc", "P", 1163596094, "zwoc", "P", 1163596168, "zwoc", "P", 1163599211, "zwoc", "P", 1163599487, "zwoc", "EED", 1163599498, "zwoc", "EED", 1163599545, "zwoc", "P", 1163599551, "zwoc", "EED", 1163599614, "zwoc", "P", 1163599658, "zwoc", "P", 1163601589, "zwoc", "P", 1163601643, "zwoc", "P", 1163602006, "zwoc", "P", 1163602271, "zwoc", "P", 1163604284, "zwoc", "P", 1163604346, "zwoc", "P", 1163604574, "zwoc", "P", 1163604604, "zwoc", "P", 1163604671, "zwoc", "P", 1163604758, "zwoc", "P", 1163605922, "zwoc", "P", 1163608672, "zwoc", "P", 1163608852, "zwoc", "P", 1163609479, "zwoc", "P", 1163609571, "zwoc", "P", 1163609745, "zwoc", "P", 1163611762, "zwoc", "P", 1163611784, "zwoc", "P", 1163612426, "zwoc", "P", 1163612478, "zwoc", "P", 1163612541, "zwoc", "P", 1163612562, "zwoc", "P", 1163612568, "zwoc", "P", 1163612572, "zwoc", "P", 1163612583, "zwoc", "P", 1163612594, "zwoc", "P", 1163612609, "zwoc", "P", 1163612921, "zwoc", "P", 1163613057, "zwoc", "P", 1163613083, "zwoc", "P", 1163613170, "zwoc", "P", 1163613184, "zwoc", "P", 1163613709, "zwoc", "P", 1163614116, "zwoc", "P", 1163614483, "zwoc", "P", 1163615479, "zwoc", "P", 1163615602, "zwoc", "P", 1163615659, "zwoc", "P", 1163615669, "zwoc", "P", 1163615676, "zwoc", "P", 1163615687, "zwoc", "P", 1163615694, "zwoc", "P", 1163615716, "zwoc", "P", 1163615767, "zwoc", "P", 1163615775, "zwoc", "P", 1163615780, "zwoc", "P", 1163615788, "zwoc", "P", 1163615800, "zwoc", "P", 1163615816, "zwoc", "P", 1163615824, "zwoc", "P", 1163615836, "zwoc", "P", 1163615847, "zwoc", "P", 1163615919, "zwoc", "P", 1163615932, "zwoc", "P", 1163615939, "zwoc", "P", 1163615974, "zwoc", "P", 1163615990, "zwoc", "P", 1163616399, "zwoc", "P", 1163616696, "zwoc", "P", 1163616769, "zwoc", "P", 1163616777, "zwoc", "P", 1163616792, "zwoc", "P", 1163616834, "zwoc", "P", 1163616932, "zwoc", "P", 1163617030, "zwoc", "P", 1163617067, "zwoc", "P", 1163617164, "zwoc", "P", 1163617628, "zwoc", "P", 1163617644, "zwoc", "P", 1163617722, "zwoc", "P", 1163617733, "zwoc", "P", 1163617925, "zwoc", "P", 1163618402, "zwoc", "P", 1163619196, "zwoc", "P", 1163619545, "zwoc", "P", 1163619551, "zwoc", "P", 1163619555, "zwoc", "P", 1163619579, "zwoc", "P", 1163621125, "zwoc", "P", 1163621145, "zwoc", "P", 1163621307, "zwoc", "P", 1163621426, "zwoc", "P", 1163621534, "zwoc", "P", 1163621917, "zwoc", "P", 1163621931, "zwoc", "P", 1163621934, "zwoc", "P", 1163622129, "zwoc", "P", 1163622170, "zwoc", "P", 1163670563, "zwoc", "P", 1163670670, "zwoc", "P", 1163670705, "zwoc", "P", 1163670851, "zwoc", "P", 1163670978, "zwoc", "P", 1163671077, "zwoc", "P", 1163671126, "zwoc", "P", 1163671180, "zwoc", "P", 1163671341, "zwoc", "P", 1163671773, "zwoc", "P", 1163673105, "zwoc", "P", 1163673120, "zwoc", "P", 1163673124, "zwoc", "P", 1163673954, "zwoc", "P", 1163674024, "zwoc", "P", 1163674239, "zwoc", "P", 1163674335, "zwoc", "P", 1163674567, "zwoc", "P", 1163674619, "zwoc", "P", 1163674670, "zwoc", "P", 1163674735, "zwoc", "P", 1163675230, "zwoc", "P", 1163675473, "zwoc", "P", 1163675697, "zwoc", "P", 1163675740, "zwoc", "P", 1163676517, "zwoc", "P", 1163676578, "zwoc", "P", 1163676601, "zwoc", "P", 1163676620, "zwoc", "P", 1163676671, "zwoc", "P", 1163676773, "zwoc", "P", 1163676840, "zwoc", "P", 1163676898, "zwoc", "P", 1163677563, "zwoc", "P", 1163677614, "zwoc", "P", 1163677764, "zwoc", "P", 1163677898, "zwoc", "EED", 1163677988, "zwoc", "P", 1163678002, "zwoc", "P", 1163678029, "zwoc", "P", 1163678080, "zwoc", "P", 1163678208, "zwoc", "P", 1163678354, "zwoc", "P", 1163678397, "zwoc", "P", 1163678641, "zwoc", "EED", 1163678719, "zwoc", "P", 1163678774, "zwoc", "EED", 1163678803, "zwoc", "EED", 1163678824, "zwoc", "EED", 1163678829, "zwoc", "EED", 1163678839, "zwoc", "EED", 1163678948, "zwoc", "EED", 1163678974, "zwoc", "EED", 1163679106, "zwoc", "EED", 1163679161, "zwoc", "EED", 1163679183, "zwoc", "P", 1163679210, "zwoc", "EED", 1163679334, "zwoc", "EED", 1163679392, "zwoc", "EED", 1163679460, "zwoc", "EED", 1163679487, "zwoc", "EED", 1163679538, "zwoc", "EED", 1163679564, "zwoc", "P", 1163680060, "zwoc", "P", 1163680078, "zwoc", "P", 1163680153, "zwoc", "P", 1163680435, "zwoc", "E", 1163683512, "zwoc", "EED", 1163683520, "zwoc", "EED", 1163683531, "zwoc", "EED", 1163683592, "zwoc", "P", 1163683609, "zwoc", "P", 1163684227, "zwoc", "E", 1163684295, "zwoc", "EED", 1163684794, "zwoc", "P", 1163684823, "zwoc", "P", 1163684869, "zwoc", "P", 1163684902, "zwoc", "P", 1163685013, "zwoc", "P", 1163685024, "zwoc", "P", 1163688974, "zwoc", "P", 1163689000, "zwoc", "P", 1163689202, "zwoc", "P", 1163689274, "zwoc", "P", 1163689341, "zwoc", "P", 1163689410, "zwoc", "P", 1163689480, "zwoc", "P", 1163689964, "zwoc", "EED", 1163690075, "zwoc", "EED", 1163690115, "zwoc", "EED", 1163690122, "zwoc", "EED", 1163693841, "zwoc", "P", 1163693853, "zwoc", "P", 1163694131, "zwoc", "EED", 1163694173, "zwoc", "EED", 1163694184, "zwoc", "EED", 1163694203, "zwoc", "EED", 1163694245, "zwoc", "P", 1163694280, "zwoc", "EED", 1163694315, "zwoc", "EED", 1163694329, "zwoc", "EED", 1163694380, "zwoc", "EED", 1163694410, "zwoc", "EED", 1163694427, "zwoc", "EED", 1163695650, "zwoc", "EED", 1163696642, "zwoc", "EED", 1163698045, "zwoc", "P", 1163698104, "zwoc", "EED", 1163698649, "zwoc", "P", 1163698921, "zwoc", "P", 1163698968, "zwoc", "P", 1163699013, "zwoc", "P", 1163699123, "zwoc", "P", 1163699133, "zwoc", "P", 1163699196, "zwoc", "P", 1163699403, "zwoc", "P", 1163699410, "zwoc", "P", 1163699457, "zwoc", "P", 1163699481, "zwoc", "P", 1163699729, "zwoc", "P", 1163699753, "zwoc", "P", 1163699781, "zwoc", "P", 1163699795, "zwoc", "P", 1163699818, "zwoc", "P", 1163699826, "zwoc", "P", 1163699883, "zwoc", "P", 1163699914, "zwoc", "P", 1163699966, "zwoc", "P", 1163699985, "zwoc", "P", 1163699989, "zwoc", "P", 1163700002, "zwoc", "P", 1163700027, "zwoc", "P", 1163700211, "zwoc", "P", 1163700352, "zwoc", "P", 1163700486, "zwoc", "P", 1163700615, "zwoc", "P", 1163700714, "zwoc", "P", 1163700788, "zwoc", "P", 1163701278, "zwoc", "P", 1163701283, "zwoc", "P", 1163701299, "zwoc", "P", 1163701314, "zwoc", "P", 1163701387, "zwoc", "P", 1163701423, "zwoc", "P", 1163701440, "zwoc", "P", 1163701574, "zwoc", "P", 1163702005, "zwoc", "P", 1163702071, "zwoc", "P", 1163702126, "zwoc", "P", 1163702413, "zwoc", "P", 1163702423, "zwoc", "P", 1163702439, "zwoc", "P", 1163702571, "zwoc", "P", 1163702581, "zwoc", "P", 1163702627, "zwoc", "P", 1163702664, "zwoc", "P", 1163702778, "zwoc", "P", 1163702789, "zwoc", "P", 1163703055, "zwoc", "P", 1163703074, "zwoc", "P", 1163703893, "zwoc", "P", 1163704072, "zwoc", "EED", 1163704109, "zwoc", "EED", 1163704353, "zwoc", "P", 1163704720, "zwoc", "P", 1163704732, "zwoc", "P", 1163705620, "zwoc", "P", 1163706624, "zwoc", "P", 1163706673, "zwoc", "P", 1163706967, "zwoc", "P", 1163707056, "zwoc", "P", 1163707096, "zwoc", "P", 1163707561, "zwoc", "P", 1163707594, "zwoc", "P", 1163707624, "zwoc", "P", 1163707695, "zwoc", "P", 1163707778, "zwoc", "P", 1163707896, "zwoc", "EED", 1163708087, "zwoc", "EED", 1163708139, "zwoc", "EED", 1163708591, "zwoc", "P", 1163708718, "zwoc", "P", 1163708754, "zwoc", "P", 1163708893, "zwoc", "P", 1163709115, "zwoc", "P", 1163709191, "zwoc", "P", 1163709264, "zwoc", "P", 1163709287, "zwoc", "P", 1163709413, "zwoc", "P", 1163709659, "zwoc", "P", 1163709875, "zwoc", "P", 1163710055, "zwoc", "P", 1163710359, "zwoc", "P", 1163710482, "zwoc", "P", 1163710516, "zwoc", "P", 1163710572, "zwoc", "P", 1163710623, "zwoc", "P", 1163710843, "zwoc", "P", 1163710979, "zwoc", "P", 1163711145, "zwoc", "P", 1163711455, "zwoc", "P", 1163711533, "zwoc", "P", 1163711664, "zwoc", "P", 1163712523, "zwoc", "P", 1163713799, "zwoc", "P", 1163714002, "zwoc", "P", 1163714051, "zwoc", "P", 1163714129, "zwoc", "P", 1163714232, "zwoc", "P", 1163714242, "zwoc", "P", 1163769028, "zwoc", "P", 1163769043, "zwoc", "P", 1163769097, "zwoc", "P", 1163769236, "zwoc", "P", 1163769294, "zwoc", "P", 1163769376, "zwoc", "P", 1163769448, "zwoc", "P", 1163769671, "zwoc", "P", 1163769693, "zwoc", "P", 1163769765, "zwoc", "P", 1163769982, "zwoc", "P", 1163769986, "zwoc", "P", 1163769997, "zwoc", "P", 1163770019, "zwoc", "P", 1163770032, "zwoc", "P", 1163770068, "zwoc", "P", 1163770072, "zwoc", "P", 1163770083, "zwoc", "P", 1163770090, "zwoc", "P", 1163770207, "zwoc", "P", 1163770334, "zwoc", "P", 1163770466, "zwoc", "P", 1163770730, "zwoc", "P", 1163771910, "zwoc", "P", 1163772976, "zwoc", "P", 1163773175, "zwoc", "P", 1163773312, "zwoc", "P", 1163773329, "zwoc", "P", 1163773712, "zwoc", "P", 1163773773, "zwoc", "P", 1163773786, "zwoc", "P", 1163774121, "zwoc", "P", 1163774213, "zwoc", "P", 1163774254, "zwoc", "P", 1163774754, "zwoc", "P", 1163775086, "zwoc", "P", 1163775144, "zwoc", "P", 1163775147, "zwoc", "P", 1163775165, "zwoc", "P", 1163775201, "zwoc", "P", 1163775810, "zwoc", "P", 1163775915, "zwoc", "EED", 1163775924, "zwoc", "EED", 1163776081, "zwoc", "P", 1163776372, "zwoc", "P", 1163776470, "zwoc", "P", 1163776578, "zwoc", "EED", 1163776676, "zwoc", "EED", 1163776721, "zwoc", "EED", 1163776756, "zwoc", "EED", 1163777081, "zwoc", "P", 1163777107, "zwoc", "P", 1163777342, "zwoc", "P", 1163777385, "zwoc", "P", 1163777429, "zwoc", "P", 1163777558, "zwoc", "P", 1163777804, "zwoc", "P", 1163778135, "zwoc", "P", 1163778257, "zwoc", "P", 1163778730, "zwoc", "P", 1163778800, "zwoc", "P", 1163778809, "zwoc", "P", 1163778836, "zwoc", "P", 1163778862, "zwoc", "P", 1163778870, "zwoc", "P", 1163778905, "zwoc", "P", 1163778979, "zwoc", "P", 1163779094, "zwoc", "EED", 1163779109, "zwoc", "EED", 1163779119, "zwoc", "EED", 1163779124, "zwoc", "EED", 1163779616, "zwoc", "EED", 1163779648, "zwoc", "P", 1163779823, "zwoc", "P", 1163780866, "zwoc", "P", 1163783567, "zwoc", "P", 1163783574, "zwoc", "P", 1163784214, "zwoc", "P", 1163784475, "zwoc", "P", 1163784688, "zwoc", "P", 1163785091, "zwoc", "P", 1163787682, "zwoc", "P", 1164045968, "zwoc", "EED", 1164046222, "zwoc", "EED", 1164049468, "zwoc", "P", 1164051468, "zwoc", "P", 1164051637, "zwoc", "P", 1164051691, "zwoc", "P", 1164051770, "zwoc", "P", 1164051853, "zwoc", "P", 1164051900, "zwoc", "P", 1164051978, "zwoc", "P", 1164052698, "zwoc", "P", 1164052708, "zwoc", "P", 1164052878, "zwoc", "P", 1164100985, "zwoc", "P", 1164101015, "zwoc", "P", 1164101819, "zwoc", "P", 1164103746, "zwoc", "P", 1164103752, "zwoc", "P", 1164104373, "zwoc", "P", 1164105247, "zwoc", "P", 1164106779, "zwoc", "P", 1164120252, "zwoc", "P", 1164120285, "zwoc", "P", 1164120585, "zwoc", "P", 1164121935, "zwoc", "P", 1164122240, "zwoc", "P", 1164122717, "zwoc", "EED", 1164123240, "zwoc", "P", 1164123379, "zwoc", "P", 1164124233, "zwoc", "P", 1164124272, "zwoc", "P", 1164124739, "zwoc", "P", 1164125650, "zwoc", "P", 1164125779, "zwoc", "P", 1164125946, "zwoc", "P", 1164197858, "zwoc", "P", 1164197875, "zwoc", "P", 1164200386, "zwoc", "P", 1164201382, "zwoc", "P", 1164201679, "zwoc", "P", 1164201817, "zwoc", "P", 1164201848, "zwoc", "P", 1164202076, "zwoc", "P", 1164202407, "zwoc", "P", 1164202711, "zwoc", "P", 1164202859, "zwoc", "P", 1164202898, "zwoc", "P", 1164203036, "zwoc", "P", 1164203081, "zwoc", "P", 1164203194, "zwoc", "P", 1164203205, "zwoc", "P", 1164203266, "zwoc", "P", 1164203281, "zwoc", "P", 1164204027, "zwoc", "P", 1164204073, "zwoc", "P", 1164204098, "zwoc", "P", 1164204123, "zwoc", "P", 1164204151, "zwoc", "P", 1164204175, "zwoc", "P", 1164204202, "zwoc", "P", 1164204227, "zwoc", "P", 1164204252, "zwoc", "P", 1164204275, "zwoc", "P", 1164204320, "zwoc", "P", 1164204377, "zwoc", "P", 1164204525, "zwoc", "P", 1164204828, "zwoc", "P", 1164205157, "zwoc", "P", 1164205189, "zwoc", "P", 1164205213, "zwoc", "P", 1164205379, "zwoc", "P", 1164205505, "zwoc", "P", 1164209767, "zwoc", "S", 1164209775, "zwoc", "S", 1164209782, "zwoc", "S", 1164210321, "zwoc", "X", 1164211177, "zwoc", "P", 1164211244, "zwoc", "P", 1164213615, "zwoc", "P", 1164213773, "zwoc", "P", 1164213796, "zwoc", "P", 1164213941, "zwoc", "P", 1164213976, "zwoc", "P", 1164214016, "zwoc", "P", 1164217186, "zwoc", "P", 1164266882, "zwoc", "P", 1164267423, "zwoc", "P", 1164267506, "zwoc", "P", 1164273995, "zwoc", "P", 1164274028, "zwoc", "P", 1164274293, "zwoc", "P", 1164275262, "zwoc", "P", 1164276804, "zwoc", "P", 1164277365, "zwoc", "P", 1164277422, "zwoc", "P", 1164278667, "zwoc", "P", 1164279366, "zwoc", "P", 1164279697, "zwoc", "P", 1164279747, "zwoc", "P", 1164279900, "zwoc", "P", 1164280517, "zwoc", "P", 1164298893, "zwoc", "P", 1164298961, "zwoc", "EED", 1164299289, "zwoc", "EED", 1164299321, "zwoc", "EED", 1164299346, "zwoc", "EED", 1164299428, "zwoc", "P", 1164299459, "zwoc", "P", 1164299497, "zwoc", "P", 1164299704, "zwoc", "P", 1164299779, "zwoc", "P", 1164299795, "zwoc", "P", 1164299819, "zwoc", "P", 1164299840, "zwoc", "P", 1164299864, "zwoc", "P", 1164299883, "zwoc", "P", 1164299896, "zwoc", "P", 1164299925, "zwoc", "P", 1164299946, "zwoc", "P", 1164299982, "zwoc", "P", 1164300020, "zwoc", "P", 1164300100, "zwoc", "P", 1164300150, "zwoc", "P", 1164369892, "zwoc", "P", 1164376610, "zwoc", "EED", 1164377363, "zwoc", "EED", 1164377413, "zwoc", "EED", 1164377651, "zwoc", "EED", 1164377932, "zwoc", "EED", 1164378018, "zwoc", "EED", 1164378025, "zwoc", "EED", 1164378102, "zwoc", "EED", 1164378113, "zwoc", "EED", 1164378119, "zwoc", "EED", 1164378189, "zwoc", "EED", 1164378474, "zwoc", "EED", 1164378491, "zwoc", "EED", 1164378850, "zwoc", "P", 1164378897, "zwoc", "P", 1164378907, "zwoc", "P", 1164378930, "zwoc", "P", 1164378977, "zwoc", "P", 1164378992, "zwoc", "P", 1164379421, "zwoc", "P", 1164379534, "zwoc", "P", 1164381292, "zwoc", "P", 1164381310, "zwoc", "P", 1164381345, "zwoc", "P", 1164381692, "zwoc", "X", 1164387184, "zwoc", "P", 1164388615, "zwoc", "P", 1164873246, "zwoc", "P", 1165492684, "zwoc", "P", 1166633890, "zwoc", "P", 1166633986, "zwoc", "P", 1166634000, "zwoc", "P", 1166635191, "zwoc", "P", 1166636072, "zwoc", "X", 1166636091, "zwoc", "P", 1166636112, "zwoc", "P", 1166636139, "zwoc", "P", 1166636224, "zwoc", "P", 1166636252, "zwoc", "P", 1166636272, "zwoc", "P", 1166636303, "zwoc", "P", 1166636333, "zwoc", "P", 1166636375, "zwoc", "P", 1166693727, "zwoc", "X", 1166695566, "zwoc", "P", 1166695646, "zwoc", "P", 1166695658, "zwoc", "P", 1166695818, "zwoc", "P", 1166695923, "zwoc", "P", 1166695958, "zwoc", "P", 1167313377, "zwoc", "P", 1167313508, "zwoc", "P", 1171727166, "zwoc", "P", 1171727200, "zwoc", "P", 1171727238, "zwoc", "P", 1171727582, "zwoc", "P", 1171727690, "zwoc", "P", 1171727779, "zwoc", "P", 1171727941, "zwoc", "P", 1171736532, "zwoc", "P", 1171736565, "zwoc", "P", 1171809988, "zwoc", "P", 1171818734, "zwoc", "P", 1200320950, "zwoc", "P", 1200320985, "zwoc", "P", 1200321008, "zwoc", "P", 1200321168, "zwoc", "P", 1200321201, "zwoc", "P", 1200321350, "zwoc", "P", 1200321401, "zwoc", "P", 1200321506, "zwoc", "EED", 1200321760, "zwoc", "P", 1200321769, "zwoc", "P", 1200321789, "zwoc", "P", 1200321800, "zwoc", "P", 1200321836, "zwoc", "P", 1200321847, "zwoc", "P", 1200321867, "zwoc", "P", 1200328835, "zwoc", "P", 1200328861, "zwoc", "P", 1200328869, "zwoc", "P", 1200328897, "zwoc", "P", 1200328905, "zwoc", "P", 1200328919, "zwoc", "P", 1200328929, "zwoc", "P", 1200328949, "zwoc", "P", 1200328959, "zwoc", "P", 1200328975, "zwoc", "P", 1200328984, "zwoc", "P", 1200329002, "zwoc", "P", 1200329010, "zwoc", "P", 1200330676, "???", "R", 1201013883, "zwoc", "P", 1201013894, "zwoc", "P", 1201013908, "zwoc", "P", 1201013928, "zwoc", "P", 1201013939, "zwoc", "P", 1201013950, "zwoc", "P", 1201013960, "zwoc", "P", 1201013972, "zwoc", "P", 1201013983, "zwoc", "P", 1201013993, "zwoc", "P", 1201015068, "zwoc", "P", 1201015105, "zwoc", "P", 1201015112, "zwoc", "P", 1201015454, "zwoc", "P", 1201015512, "zwoc", "P", 1201015531, "zwoc", "P", 1201015547, "zwoc", "P", 1201015553, "zwoc", "P", 1201015576, "zwoc", "P", 1201015604, "zwoc", "P", 1201015639, "zwoc", "P", 1201015649, "zwoc", "P", 1201015659, "zwoc", "P", 1201015684, "zwoc", "P", 1201023623, "zwoc", "P", 1201023647, "zwoc", "P", 1201023812, "zwoc", "P", 1201023845, "zwoc", "P", 1203684854, "zwoc", "P", 1203684868, "zwoc", "P", 1203684888, "zwoc", "P", 1203684934, "zwoc", "P", 1203684968, "zwoc", "P", 1203685004, "zwoc", "P", 1203685015, "zwoc", "P", 1203685036, "zwoc", "P", 1203685047, "zwoc", "P", 1203685059, "zwoc", "P", 1203685098, "zwoc", "P", 1203685239, "zwoc", "P", 1203685259, "zwoc", "P", 1203685304, "zwoc", "P", 1203685310, "zwoc", "P", 1203685390, "zwoc", "P", 1203685422, "zwoc", "P", 1203685446, "zwoc", "P", 1203685544, "zwoc", "P", 1203685562, "zwoc", "P", 1203685584, "zwoc", "P", 1203685699, "zwoc", "P", 1203685749, "zwoc", "P", 1203685781, "zwoc", "P", 1203685825, "zwoc", "P", 1203685932, "zwoc", "P", 1203685965, "zwoc", "P", 1203686034, "zwoc", "P", 1203686077, "zwoc", "P", 1203686094, "zwoc", "P", 1203686129, "zwoc", "P", 1203686265, "zwoc", "P", 1203686350, "zwoc", "P", 1203686705, "zwoc", "P", 1203686942, "zwoc", "P", 1203686987, "zwoc", "P", 1203687003, "zwoc", "P", 1203687019, "zwoc", "P", 1203687058, "zwoc", "P", 1203687086, "zwoc", "P", 1203687095, "zwoc", "P", 1203687103, "zwoc", "P", 1203687137, "zwoc", "P", 1203687155, "zwoc", "P", 1203687163, "zwoc", "P", 1203687188, "zwoc", "P", 1203687229, "zwoc", "P", 1203687241, "zwoc", "P", 1203687256, "zwoc", "P", 1203687279, "zwoc", "P", 1203687295, "zwoc", "P", 1203687305, "zwoc", "P", 1203687322, "zwoc", "P", 1203687334, "zwoc", "P", 1203699671, "zwoc", "P", 1203935816, "zwoc", "P", 1203935898, "zwoc", "P", 1203936072, "zwoc", "P", 1203936158, "zwoc", "P", 1203936196, "zwoc", "P", 1203936209, "zwoc", "P", 1203936253, "zwoc", "P", 1203936421, "zwoc", "P", 1203936579, "zwoc", "P", 1203936617, "zwoc", "P", 1203936646, "zwoc", "P", 1203936673, "zwoc", "P", 1203936823, "zwoc", "P", 1203936911, "zwoc", "P", 1203936934, "zwoc", "P", 1203937479, "zwoc", "P", 1203937495, "zwoc", "P", 1203937507, "zwoc", "P", 1203937518, "zwoc", "P", 1203937528, "zwoc", "P", 1203938833, "zwoc", "P", 1203939105, "zwoc", "EED", 1203939445, "zwoc", "P", 1203940102, "zwoc", "P", 1203940202, "zwoc", "P", 1203943059, "zwoc", "P", 1203943388, "zwoc", "P", 1203943485, "zwoc", "P", 1203943754, "zwoc", "P", 1204032745, "zwoc", "P", 1204032753, "zwoc", "P", 1204032834, "zwoc", "P", 1204032851, "zwoc", "P", 1204032884, "zwoc", "P", 1204032895, "zwoc", "P", 1204033199, "zwoc", "P", 1204225201, "zwoc", "P", 1204227276, "zwoc", "P", 1204227319, "zwoc", "P", 1204227391, "zwoc", "X", 1204227508, "zwoc", "P", 1204227585, "zwoc", "P", 1204227602, "zwoc", "P", 1204227828, "zwoc", "P", 1204272785, "???", "R", 1204724732, "zwoc", "EED", 1204724762, "zwoc", "EED", 1204726653, "zwoc", "EED", 1204726808, "zwoc", "EED", 1204727005, "zwoc", "P", 1204727082, "zwoc", "P", 1204727098, "zwoc", "P", 1204727140, "zwoc", "P", 1204727173, "zwoc", "P", 1204727207, "zwoc", "P", 1204727244, "zwoc", "P", 1204727266, "zwoc", "P", 1204727276, "zwoc", "P", 1204727285, "zwoc", "P", 1204727302, "zwoc", "P", 1204727326, "zwoc", "P", 1204727338, "zwoc", "P", 1204727361, "zwoc", "P", 1204727383, "zwoc", "P", 1204727393, "zwoc", "P", 1204727844, "zwoc", "P", 1204728162, "zwoc", "P", 1204728397, "zwoc", "EED", 1204728457, "zwoc", "EED", 1204728587, "zwoc", "P", 1204803626, "zwoc", "P", 1204803959, "zwoc", "P", 1204804417, "zwoc", "P", 1204807783, "zwoc", "P", 1204807877, "zwoc", "P", 1204807880, "zwoc", "P", 1204807892, "zwoc", "P", 1204807917, "zwoc", "P", 1204807936, "zwoc", "P", 1204807947, "zwoc", "P", 1204807960, "zwoc", "P", 1204807971, "zwoc", "P", 1204807982, "zwoc", "P", 1204807993, "zwoc", "P", 1204808013, "zwoc", "P", 1204808025, "zwoc", "P", 1204808037, "zwoc", "P", 1204808057, "zwoc", "P", 1204808477, "zwoc", "EED", 1204808688, "zwoc", "EED", 1204808863, "zwoc", "P", 1204809036, "zwoc", "P", 1204809053, "zwoc", "P", 1204809072, "zwoc", "P", 1204809085, "zwoc", "P", 1204809098, "zwoc", "P", 1204819163, "zwoc", "EED", 1204819371, "zwoc", "EED", 1204819465, "zwoc", "EED", 1204819542, "zwoc", "EED", 1204819576, "zwoc", "EED", 1204819593, "zwoc", "EED", 1204819625, "zwoc", "EED", 1204819632, "zwoc", "EED", 1205232296, "zwoc", "P", 1205232676, "zwoc", "EED", 1205232755, "zwoc", "P", 1205232835, "zwoc", "P", 1205232896, "zwoc", "P", 1205232936, "zwoc", "P", 1205233027, "zwoc", "P", 1205250772, "zwoc", "P", 1205251582, "zwoc", "P", 1205251603, "zwoc", "P", 1205251749, "zwoc", "P", 1205251792, "zwoc", "P", 1205252026, "zwoc", "P", 1205252030, "zwoc", "P", 1205252126, "zwoc", "P", 1205252234, "zwoc", "P", 1205253000, "zwoc", "P", 1205253030, "zwoc", "P", 1205253050, "zwoc", "P", 1205253122, "zwoc", "P", 1205253264, "zwoc", "P", 1205259221, "zwoc", "P", 1205260113, "zwoc", "P", 1205260123, "zwoc", "P", 1205260164, "zwoc", "P", 1205260316, "zwoc", "P", 1205260333, "zwoc", "P", 1205260419, "zwoc", "P", 1205260587, "zwoc", "P", 1205260600, "zwoc", "P", 1205411132, "zwoc", "P", 1205411173, "zwoc", "P", 1205411238, "zwoc", "P", 1205411316, "zwoc", "P", 1205411448, "zwoc", "P", 1205411510, "zwoc", "P", 1205411578, "zwoc", "P", 1205411627, "zwoc", "P", 1205411779, "zwoc", "P", 1205411914, "zwoc", "P", 1205411977, "zwoc", "P", 1205411981, "zwoc", "P", 1205412063, "zwoc", "P", 1205412118, "zwoc", "P", 1205412127, "zwoc", "P", 1205412330, "zwoc", "P", 1205412397, "zwoc", "P", 1205412579, "zwoc", "P", 1205845143, "zwoc", "P", 1205850351, "zwoc", "P", 1205850423, "zwoc", "P", 1205850477, "zwoc", "P", 1205850966, "zwoc", "P", 1205851060, "zwoc", "EED", 1205851152, "zwoc", "P", 1205851233, "zwoc", "P", 1205851316, "zwoc", "P", 1205859242, "zwoc", "P", 1206029536, "zwoc", "P", 1206029981, "zwoc", "P", 1206030095, "zwoc", "P", 1206030144, "zwoc", "P", 1206030300, "zwoc", "P" \})
      </Core:Property>
      <Core:Property property="sam:action-aspect-proofed">
         X[S] \$[\$object = Obj(\$obj);
  if (\$udat \&\& typeof(\$udat) == T_STRING \&\& !\$uname) \$uname = \$udat;
  Set(\$object, "sys:shared:proof:" + \$aspect, TRUE);
  Set(\$object, "sys:shared:proof:" + \$aspect + "-by", (\{ time(), \$uname \}));
  if (typeof(\$object.revisions) != T_ARRAY) \$object.revisions = (\{ \});
  \$object.revisions += (\{ time(), \$uname, "PROOF" \});]
\<redirect propob="\$(this)" prop="index" ob="\$(obj)"/\>
      </Core:Property>
      <Core:Property property="sam:css">
         X[S] body \\\{
    font-family: Arial, Helvetica, Sans-serif;
    font-size: 10pt;
    padding-left: 10px;
    padding-right: 10px;
\\\}
a \\\{
    font-size: 10pt;
    color: #33d;
    text-decoration: none;
\\\}
a:Hover \\\{
    color: #66f;
    text-decoration: underline;
\\\}
a.tag \\\{
    color: #000;
    text-decoration: none;
\\\}
a.tag:Hover \\\{
    color: #000;
    text-decoration: none;
\\\}
div.frame \\\{
    margin-left: 15px;
    margin-right: 15px;
    border: dashed #559 1px;
    font-size: 9pt;
\\\}
div.mono \\\{
    font-size: 9pt;
    font-family: Monospace, FreeMono, Courier new, courier;
\\\}
h1 \\\{
    margin-top: 10px;
    font-size: 20pt;
    border-bottom: dashed 1px green;
    font-weight: bold;
\\\}
h2 \\\{
    font-size: 16pt;
    border-bottom: solid 1px #ddd;
    font-weight: bold;
\\\}
div.italic \\\{
    border: solid #000 1px;
    margin-bottom: 15px;
    margin-top: 15px;
    background: #dfd;
    font-style: italic;
    padding: 4px;
\\\}
span.serious \\\{
    background: #fe9;
\\\}
div.info:before \\\{
    content: "Information: ";
    font-weight: bold;
\\\}
div.info \\\{
    background: #ccf;
    border: dashed #00f 2px;
    padding: 3px;
\\\}
div.serious:before \\\{
    content: "Warning: ";
    font-weight: bold;
\\\}
div.serious \\\{
    background: #fe9;
    border: dashed #000 1px;
    padding: 3px;
\\\}
span.warn, span.error \\\{
    font-weight: bold;
    color: #700;
\\\}
span.note \\\{
    font-weight: bold;
    color: #a50;
\\\}
div.warn:before \\\{
    content: "Error: ";
    font-weight: bold;
\\\}
div.warn, div.error \\\{
    border: solid #000 1px;
    margin-bottom: 15px;
    margin-top: 5px;
    background: #fdd;
    font-weight: normal;
    padding: 4px;
\\\}
div.crash:before \\\{
    content: "CRASH: ";
    font-weight: bold;
\\\}
div.crash \\\{
    border: solid #000 1px;
    margin-bottom: 15px;
    margin-top: 5px;
    background: #f00;
    color: #fff;
    font-weight: bold;
    padding: 4px;
\\\}
input \\\{
    border-width: 1px;
\\\}
input[type="submit"] \\\{
    cursor: pointer;
    background: #fff;
\\\}
input[type="submit"]:Hover \\\{
    background: #ddd;
\\\}
span.link \\\{
    font-size: 10pt;
    cursor: pointer;
    color: #009;
\\\}
span.link:Hover \\\{
    text-decoration: underline;
\\\}
b.link \\\{
    cursor: pointer;
\\\}
span.okay \\\{
    color: green;
\\\}
span.notokay \\\{
    color: red;
\\\}
li.big \\\{
    font-size: 16pt;
    background: #33a;
    color: #fff;
    border-bottom: solid 2px #777;
    padding-left: 5px;
    margin-top: 15px;
    margin-bottom: 15px;
\\\}
li.bigd \\\{
    font-size: 14pt;
    background: #77c;
    color: #fff;
    border-bottom: solid 2px #777;
    padding-left: 3px;
    margin-top: 10px;
    margin-bottom: 10px;
\\\}
div.big:before \\\{
    content: "- ";
    font-weight: bold;
\\\}
div.bigd:before \\\{
    content: "- ";
    font-weight: bold;
\\\}
div.big \\\{
    font-size: 16pt;
    background: #33a;
    color: #fff;
    border-bottom: solid 2px #777;
    padding-left: 5px;
    margin-top: 15px;
    margin-bottom: 15px;
\\\}
div.bigd \\\{
    font-size: 14pt;
    background: #77c;
    color: #fff;
    border-bottom: solid 2px #777;
    padding-left: 3px;
    margin-top: 10px;
    margin-bottom: 10px;
\\\}
     .all \\\{
 border-style: none;
 border-width: 0pt;
 width: 100%;
     \\\}
     .evenline \\\{
 color:   #000000;
 background-color:  #ddd;
     \\\}
     .oddline \\\{
 color:   #000000;
 background-color:  #fff;
     \\\}
     .titleline \\\{
 color:   #000000;
 background-color:  #ddd;
     \\\}
     .indent \\\{
 margin-left: 12pt;
     \\\}
     .fixedindent \\\{
        font-family: monospace;
 margin-left: 12pt;
     \\\}
      </Core:Property>
      <Core:Property property="sam:display-prime">
         X[S] \<b\>The \{? \| \$(display_real_traits) \|default\|all-traits-enabled\} description of the object looks like this:\</b\>
        \<ul\>
            \<li\>\<b\>prime brief:\</b\> \$[int i;
            if (!\$tsize) \$tsize = 0;
            if (\$display_real_traits) \{
                for (i = 0; i \< \$tsize; i++) \{
                    SetVar(\$tlist[i], Get(\$op, "trait:" + \$tlist[i]));
                \}
            \} else \{
                \$defmap = ([ "fit" : "stylish", "symbol" : "trefoil", "color" : "blue", "material" : "wool", "condition" : "clean" ]);
                for (i = 0; i \< \$tsize; i++) \{
                    SetVar(\$tlist[i], \$defmap[\$tlist[i]] ? \$defmap[\$tlist[i]] : "a" + \$tlist[i]);
                \}
            \}
            return ascii_to_mixed(replace_strings(\$sbrief, \$repcs...));]
            \</li\>
            \<li\>\<b\>prime look:\</b\> \$[ascii_to_mixed(replace_strings(\$slook, \$repcs...))]
            \</li\>
            \<li\>\<b\>prime examine:\</b\> \$[ascii_to_mixed(replace_strings(\$sexam, \$repcs...))]
            \</li\>
        \</ul\>
      </Core:Property>
      <Core:Property property="sam:message-sensible">
         X[S] \<div class="grey"\>
    \$(desc) and declared sensible by \$[\$by = Get(\$object, "sys:shared:proof:" + \$aspect + "-by");
    if (\$by \&\& sizeof(\$by) == 2)
        return (typeof(\$by[1]) == T_STRING ? capitalize(\$by[1]) : "[" + ascii_typeof(\$by[1]) + "]") + ", " +
               ctime(\$by[0]);
    else
        return "[unknown; someone killed the data]";].
    \<zact ob="\$(ob)" aspect="\$(aspect)"\>
        Unproof \<b\>\$(aspect)\</b\> aspect
        \<action\>
            \$[Set(Obj(\$ob), "sys:shared:proof:" + \$aspect, nil);]
            \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
        \</action\>
    \</zact\>
\</div\>
      </Core:Property>
      <Core:Property property="sam:script">
         X[S] function change_value(valtype, valitem) \\\{
    var x = prompt('Enter a new value for the ' + valtype + ' "' + valitem + '":');
    if (!x) return;
    document.location.href = '?ob=\$(ob)\\\&change_' + valtype + '=' + valitem + '\\\&newvalue=' + x;
\\\}
function change_arrmap(mapwhat, mapvalue, adding) \\\{
    if (!confirm("Okay to " + (adding ? "add" : "erase") + " this " + mapwhat + " " + (adding ? "to" : "from") + " the object?")) return nil;
    document.location.href = '?ob=\$(ob)\\\&arrmap_' + (adding ? 'add' : 'delete') + '=' + mapvalue;
\\\}
function delete_property(propwhat, propname, nodef) \\\{
    if (!confirm((nodef ? propwhat : "Okay to delete the " + propwhat + " from the object?"))) return nil;
    document.location.href = '?ob=\$(ob)\\\&delprop=' + propname;
\\\}
function change_confirm(propwhat, propname, propvalue) \\\{
    if (!confirm("Okay to change the " + propwhat + "?")) return nil;
    document.location.href = '?ob=\$(ob)\\\&change_property=' + propname + '\\\&newvalue=' + propvalue;
\\\}
function toggle_visible(elid) \\\{
    var el = document.getElementById(elid);
    if (el.style.display == 'none') \\\{
        el.style.display = 'block';
    \\\} else \\\{
        el.style.display = 'none';
    \\\}
\\\}
      </Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1204272785
      </Core:Property>
      <Core:Property property="sys:sync:proposing-revision">
         1204227828
      </Core:Property>
      <Core:Property property="test:all_details">
         X[S] \\\<!---
        All details sane
    ---\\\>
    \{? \| \$[sizeof(\$object."base:details") \> 1] \|
    \{? \| \$(object.sys:shared:proof:all-details) \|
        \<div class="bigd"\>\<b\>Are the details properly referenced in the prime?\</b\>\</div\>
        \$[\$aspect = "all-details";\$desc = "All the details were proofed";]\$(this.sam:message-sensible)
    \|
        \<div class="big"\>\<b\>Are the details properly referenced in the prime?\</b\>\</div\>
        \$[\$autokay = TRUE;
        \$object.unproofed++;
        \{
            int i, j, f;
            \$detmap = ([ ]);
            if (catch(\$detailsl = arr_to_set(\$op."base:details:local"))) \$detailsl = ([ ]);
            if (catch(\$details = \$op."base:details")) \$details = (\{ \});
            \$detailx = sizeof(\$details);
            \$detref = ([ ]);
            for (i = 0; i \< \$detailx; i++) \{
                if (\$details[i] != "default") \{
                    \$names = Get(\$op, "details:" + \$details[i] + ":snames") + Get(\$op, "details:" + \$details[i] + ":pnames");
                    \$namex = sizeof(\$names);
                    f = FALSE;
                    for (j = 0; !f \&\& (j \< \$namex); j++) \{
                        f = contains(\$sum, \$names[j]);
                    \}
                    if (f) \{
                        \$detref[\$details[i]] = TRUE;
                    \}
                \}
            \}
            \$details -= (\{ "default" \});
            \$detailx--;
            \$bmap = ([ ]);
            \$lmap = ([ ]);
            \$emap = ([ ]);

            \$detlist = "";
            for (i = 0; i \< \$detailx; i++) \{
                \$ref = NewNRef(\$op, \$details[i]);
                \$def = \$ref."detail:definite";
                \$plural = \$ref."detail:plural";
                \$brief = UnSAM(\$ref."detail:description:brief");
                \$look = UnSAM(\$ref."detail:description:look");
                \$exam = UnSAM(\$ref."detail:description:examine");
                \$detlist += "\<li\>" + \$details[i] + (\$detailsl[\$details[i]] ? " (local) [\<a href=\\"Edit?ob=" + \$ob + "\&detail=" + \$details[i] + "\\"\>Edit in Woe\</a\>]" : "");
                \$descriptions = !(\$brief == "" \&\& \$look == "" \&\& \$exam == "");
                \$autokay \&= \$descriptions;
                \$detlist += "\<ul\>" +
                    (\$brief != "" ? "\<li\>\<b\>Brief:\</b\> " + (\$def \|\| \$plural ? "\<span style='font-weight: bold; color: #770;'\>" + \$brief + "\</span\> (" + (\$def ? "definite" + (\$plural ? "; " : "") : "") + (\$plural ? "plural" : "") + ")" : common::aan(\$what: \$brief)) + "\</li\>" : "") +
                    (\$look != "" ? "\<li\>\<b\>Look:\</b\> " + replace_strings(\$look, " .", "\<span class='error'\> .\</span\>") + "\</li\>" : "") +
                    (\$exam != "" ? "\<li\>\<b\>Examine:\</b\> " + replace_strings(\$exam, " .", "\<span class='error'\> .\</span\>") + "\</li\>" : "") +
                    (!\$descriptions ? "\<li\>\<b\>NO DESCRIPTIONS IN THIS DETAIL!\</b\>\</li\>" : "") +
                    (\$bmap[\$brief] \&\& \$lmap[\$look] \&\& \$emap[\$exam] \&\& \$bmap[\$brief] == \$lmap[\$look] \&\& \$lmap[\$look] == \$emap[\$exam] ? "\<li\>\<b\>THIS DETAIL SEEMS TO BE A DUPLICATE OF THE " + \$bmap[\$brief] + " DETAIL!\</b\>\</li\>" : "");
                \$bmap[\$brief] = \$details[i];
                \$lmap[\$look] = \$details[i];
                \$emap[\$exam] = \$details[i];
                if (\$auto_details) \{
                    \$autest = Call(\$op, "proof:detail", \$detail: \$details[i], \$ref: \$ref);
                    \$autokay \&= \$autest;
                    \$detlist += "\<li\>\<pre style=\\"color: " + (\$autest ? "green" : "red") + "\\"\>" + \$result + "\</pre\>\</li\>";
                \}
                \$detlist += "\</ul\>\</li\>";
            \}
            if (\$detailx == 0) \$detextra = "\<b\>There are no additional details.\</b\>\<br/\>\<br/\>";
        \}]
        \<div class="italic"\>Do all these details belong to this object? Are they referred to in some fashion by one of the prime examine, or in another detail that is properly referred to by the prime examine?\</div\>
        \$(this.sam:display-prime)
        \<ul\>
            \$(detlist)
        \</ul\>
        \$(detextra)
        \{? \| \$(autokay) \|
            \<zact aspect="all-details" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, details are properly referenced in the prime!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
        \|
            \$(msg_there_were_errors)
        \}
    \}
    \<for var="detail" val="\$(details)"\>\{? equal \| \$(detail) \| default \|\|
        \$(this.test:detail-descriptions)
        \$(this.test:detail-names)
        \$(this.test:detail-adjectives)
    \}\</for\>
    \|\}
      </Core:Property>
      <Core:Property property="test:auto">
         X[S] \\\<!---
    Automated Sanity Checks
---\\\>
\<div class="big"\>\<b\>Automated Sanity Checks\</b\>\</div\>
\<div class="italic"\>All-object checks:\</div\>
\<pre\>\{? \| \$[::autochecks()] \|\<span class="okay"\>\$(result)\</span\>\|\<span class="notokay"\>\$(result)\</span\>\}\</pre\>
\<div class="italic"\>Extended checks\{? \| \$(xtypename) \| for \$(xtypename)\|\}:\</div\>
\<pre\>\{? \| \$(xoutcome) \|\<span class="okay"\>\$(xresult)\</span\>\|\<span class="notokay"\>\$(xresult)\</span\>\}\</pre\>
      </Core:Property>
      <Core:Property property="test:clothing_redundant">
         X[S] \\\<!---
        Clothing redundant
    ---\\\>
    \$[/* \$x = explode(\$obj, "-"); */
        \$stripped = ":" + \$object_name; /* sizeof(\$x) \> 1 ? implode(\$x[..sizeof(\$x)-2], "-") : \$obj; */
        \$results = shared::find_shared_by_woename(\$woename: \$stripped);
        \$result = "";
        if (sizeof(\$results)) \{
            int i, ix;
            object b;
            ix = sizeof(\$results);
            \$other_snames = (\{ \});
            \$other_pnames = (\{ \});
            for (i = 0; i \< ix; i++) \{
                b = Obj(\$results[i]);
                if (b) \{
                    \$other_snames += b."details:default:snames:local";
                    \$other_pnames += b."details:default:pnames:local";
                \}
            \}
            /* Get rid of dups. */
            \$other_snames = map_indices(arr_to_set(\$other_snames));
            \$other_pnames = map_indices(arr_to_set(\$other_pnames));
        \}]
    \{? \| \$(object.sys:shared:proof:unique) \|
        \<div class="bigd"\>\<b\>Is this clothing redundant?\</b\>\</div\>
        \$[\$aspect = "unique";\$desc = "The uniqueness/non-redundancy was proofed";]\$(this.sam:message-sensible)
    \|
        \<div class="big"\>\<b\>Is this clothing redundant?\</b\>\</div\>
        \$[\$autokay = TRUE;
        \$object.unproofed++;
        if (sizeof(\$results)) \{
            int i, ix;
            string look;
            object o, b;
            o = Obj(\$obj);
            \$results -= (\{ \$obj \});
            ix = sizeof(\$results);
            for (i = 0; i \< ix; i++) \{
                b = Obj(\$results[i]);
                look = "";
                catch(look = UnSAM(b."detail:description:look", \$this: b));
                /* look = replace_strings(look, "\&", "\&amp;", "\<", "\&lt;", "\>", "\&gt;");   */
                if (b \&\& (b."core:ur:parent" != o) \&\& (!b."core:ur:parent" \|\| b."core:ur:parent"."core:ur:parent" != o)) \{
                    \$result += "\<li\>\<a href=\\"?ob=" + \$results[i] + "\\"\>" + \$results[i] + "\</a\> (" + look + ")\</li\>";
                \}
            \}
        \}]
        \<div class="italic"\>Make sure that this object does not duplicate the functionality of another object. One way to check is to look at objects that may have similar names in woe, but you might want to look at the whole +shared list for synonyms\</div\>
        \{? \| \$[sizeof(\$results)] \|The following clothing shares the same name with this object:\|There does not appear to be clothing sharing the same name as this object.\}
        \<ul\>\$(result)\</ul\>
        \{? \| \$(autokay) \|
            \<zact aspect="unique" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, this object is not redundant!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
        \|
            \$(msg_there_were_errors)
        \}
    \}
      </Core:Property>
      <Core:Property property="test:consumables_descriptions">
         X[S] \\\<!---
Food/drinks have special descriptions (name, scent, and taste).
---\\\>
\$[/* */
int i;
string desc, s;
mixed v;

\$autokay = TRUE;

\$detail = "default";
\$dref = \$object;
\$aspect = "food/drink-descriptions";

\$description_type = (\{ "name", "adjective-fresh", "adjective", "adjective-aged", "brief-fresh", "brief", "brief-aged", "examine-fresh", "examine", "examine-aged", "look-fresh", "look", "look-aged", "scent-fresh", "scent", "scent-aged", "taste-fresh", "taste", "taste-aged" \});
\$description_types = sizeof(\$description_type);
\$description_default = ([ "taste-aged" : "\{An awful\|A horrible\|A disgusting\|A sickening\} [random adjective-aged] taste.",
                          "scent-aged" : "\{An awful\|A horrible\|A disgusting\|A sickening\} [random adjective-aged] smell." ]);

\$description_required = ([ "name" : 1, "scent" : 1, "taste" : 1 ]);

\$seecap       = ([ "scent" : TRUE, "taste" : TRUE ]);
\$dotissuesfor = ([ "adjective-aged":1, "adjective":1, "adjective-fresh":1, "brief-aged":1, "brief-fresh":1, "brief":1, "name":1 ]);

\$dtsum = "";
\$descs = (\{ \});
\$nonlocals = ([ ]);
\$uniques = 0;
for (i = 0; i \< \$description_types; i++) \{
    desc = \$description_type[i];
    catch(SetVar("dt" + desc, Get(\$dref, "detail:description:" + desc)));
    catch(\$haslocal = Get(\$dref, "detail:description:" + desc + ":local"));

    v = GetVar("dt" + desc);
    if (!\$haslocal \&\& v) \{
        object o;
        mixed x;

        x = nil;
        o = \$object;
        while (o \&\& !x) \{
            o = o."core:ur:parent";
            if (o) catch(x = Get(o, "detail:description:" + desc + ":local"));
        \}
        if (!o) \{
            catch(error("In proofer, while attempting to locate the inheritance for " + dump_value(\$object) + "'s default detail (consumables descriptions), there was a non-local description (" + dump_value(desc) + ") whose origin could not be determined."));
        \}
        \$nonlocals[desc] = o;
    \}
    SetVar("dts" + desc, typeof(v) == T_OBJECT ? dump_value(v) : Str(v));
    s = GetVar("dts" + desc);
    \$dtsum += " " + s;
    \$autokay \&= !\$description_required[i] \|\| s != "";
    /* v may be unset, but if we have a default for this desc, we add it to \$descs anyway, so the default appears */
    if (v \|\| \$description_default[desc]) \{
        \$descs += (\{ desc \});
        if (\$haslocal) \$uniques++;
    \}
\}]
\{? \| \$[Get(\$object, "sys:shared:proof:" + \$aspect)] \|
    \<div class="bigd"\>\<b\>Are the food/drink-specific descriptions in the consumable sensible?\</b\>\</div\>
    \$[\$desc = "The food/drink descriptions were proofed";]\$(this.sam:message-sensible)
\|
    \<div class="big"\>\<b\>Are the food/drink-specific descriptions in the consumable sensible?\</b\>\</div\>
    \$[\$object.unproofed++;]
    \<div class="italic"\>There are \$[desc_cardinal(sizeof(\$descs))] food/drink-specific descriptions (\$[desc_cardinal(\$uniques)] unique).\</div\>
    \<ul\>
        \<for var="d" val="\$(descs)"\>
            \<li\>
                \<b\>\$[capitalize(\$d)]\{? \| \$[\$nonlocals[\$d]] \| \$[\$nlref = name(\$nonlocals[\$d]);] [\<a title="Hop to \$(nlref)" href="/Dev/View.sam?obj=\$(nlref)\\\&homedisplay=1\\\&homeurl=\$(ehomeurl)\\\&hometitle=\$(hometitle)"\>inherited\</a\>]\|\}:\</b\>
                \{? \| \$[GetVar("dts" + \$d) == "" \&\& \$description_default[\$d]] \|
                    \\\<!-- this description isn't defined, but it has a default --\\\>
                    \<span class="serious" style="cursor: help;" title="This is an auto-generated default. It may be good enough for simple consumables." onclick="javascript:alert(this.title);"\>\$[\$description_default[\$d]]\</span\>
                \|
                    \$[::parse(\$sam: GetVar("dts" + \$d), \$filter: (\{ \}), \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d])]
                \}
            \</li\>
        \</for\>
    \</ul\>
    \<p\>
        \<a href="Edit?ob=\$(obj)\\\&detail=\$(detail)"\>Modify these descriptions\</a\>
    \</p\>
    \{? \| \$(autokay) \|
        \<zact aspect="\$(aspect)" obj="\$(obj)"\>Aye, consumable descriptions make sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
    \|
        \$(msg_there_were_errors)
    \}
\}
      </Core:Property>
      <Core:Property property="test:coverage">
         X[S] \\\<!---
            Coverage
        ---\\\>
        \{? \| \$(object.sys:shared:proof:coverage) \|
            \<div class="bigd"\>\<b\>Coverage makes sense?\</b\>\</div\>
            \$[\$aspect = "coverage";\$desc = "The coverage aspect was proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Coverage makes sense?\</b\>\</div\>
            \$[\$autokay = TRUE;
            \$object.unproofed++;
            \{
                int i;
                \$covers = \$op."base:parts-covered";
                \$coverx = sizeof(\$covers);
                \$detected = shared::acquire_type(\$item: \$op);
                \$clist = "";
                for (i = 0; i \< \$coverx; i++) \{
                    \$clist += "\<li\>" + \$covers[i] + "\</li\>";
                \}
                \$appliedx = sizeof(\$applied_type_ruleset);
                \$alist = \$appliedx \> 1 ? implode(\$applied_type_ruleset[..\$appliedx-2], ", ") + " and " + \$applied_type_ruleset[\$appliedx-1] : \$applied_type_ruleset[0];
            \}]
            \<div class="italic"\>The object covers the following body-parts:\</div\>
            \<ul\>
                \$(clist)
            \</ul\>
            \{? \| \$(op.base:transparency) \|\<div class="serious"\>This object is \<b\>transparent\</b\>, i.e. it will not cover other objects when worn (though it can be covered by other worn objects). Should it be transparent?\</div\>\|This object is \<b\>not transparent\</b\> and thus will cover (hide) any objects worn under it that that have a subset of the coverage listed above.\}
            \<br/\>
            \<a href="/Dev/View.sam?obj=\$(obj)\\\&element=Base:Clothing\\\&id=default\\\&homeurl=\$(ehomeurl)\\\&hometitle=\$(hometitle)\\\&homedisplay=1"\>Edit Coverage in Woe\</a\>\<br/\>
            \{? \| \$[\$object_type \&\& \$object_era \&\& \$coverage_type \&\& \$object_remainder] \|\|
            \<div class="serious"\>This object is not following the convention \<b\>Shared:clothing:[era]:[type]:[name]\</b\>.\</div\>
            \<sbr/\>
            \}
            \$[\$divclass = \$detected == \$coverage_type ? "" : "serious";
            \$detected_description = shared::."sys:shared:descriptions:coverage"[\$detected];
            \$coverage_type_description = shared::."sys:shared:descriptions:coverage"[\$coverage_type];]
            \<div class="\$(divclass)"\>
                The auto-scan considered this object to be of the \<b\>\$(detected)\</b\> type\{? equal \| \$(detected) \| \$(coverage_type) \|, which matches the name (see "Object Name" above)\|, but the woename indicates the object is of the \<b\>\$(coverage_type)\</b\> type!\} (\<b\>\$(detected)\</b\> objects are described as such: \<span class="warn"\>\$(detected_description)\</span\> These objects are typically \{? \| \$(applied_type_special) \|\|covered by\} \$(alist)\{? \| \$[\$coverage_type != \$detected] \|; \<b\>\$(coverage_type)\</b\> objects are described as such: \<span class="warn"\>\$(coverage_type_description)\</span\> These objects are typically \{? \| \$[\$othercoverage = shared::acquire_coverage_for_type(\$type: \$coverage_type);
\$otherx = sizeof(\$othercoverage);
\$olist = \$otherx \> 1 ? implode(\$othercoverage[..\$otherx-2], ", ") + " and " + \$othercoverage[\$otherx-1] : \$othercoverage[0];
return \$acquired_type_special;] \|\|covered by\} \$(olist)\|\}). \{? equal \| \$(detected) \| \$(coverage_type) \|\| \{? \| \$[\$object_type \&\& \$object_era \&\& \$coverage_type \&\& \$object_remainder] \|\$[\$propose = "Shared" + (\$object_type ? ":" + \$object_type : "") + (\$object_era ? ":" + \$object_era : "") + (\$detected ? ":" + \$detected : "") + (\$object_remainder ? ":" + \$object_remainder : "");]\<br/\>\<zact propose="\$(propose)" obj="\$(obj)"\>Rename the object to \$(propose)\<action\>\$[Call(\$\{Lib:objects\}, "rename", \$object: Obj(\$obj), \$newname: \$propose); shared::."sys:shared:unproofed" = map_indices(arr_to_set(shared::."sys:shared:unproofed" - (\{ \$obj \})) + ([ \$propose : 1 ]));]\<redirect propob="\$(this)" prop="index" ob="\$(propose)"/\>\</action\>\</zact\>\|\}\}
            \</div\>
            \<sbr/\>
            \{? \| \$(autokay) \|
                \<zact aspect="coverage" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, coverage makes sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:detail_adjectives">
         X[S] \\\<!---
            Detail adjectives
        ---\\\>
        \$[\$detref = \$detail == "default" ? "prime" : \$detail;
        \$aspect = \$detail + "-adjectives";
        \$dref = NewNRef(\$op, \$detail);
        \$dsum = UnSAM(\$dref."detail:description:brief") + " " +
                UnSAM(\$dref."detail:description:look") + " " +
                UnSAM(\$dref."detail:description:examine");]
        \{? \| \$[Get(\$object, "sys:shared:proof:" + \$aspect)] \|
            \<div class="bigd"\>\<b\>Do the adjectives in the \$(detref) detail make sense?\</b\>\</div\>
            \$[\$desc = "The " + \$detref + " detail adjectives were proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Do the adjectives in the \$(detref) detail make sense?\</b\>\</div\>
            \$[\$autokay = TRUE;
            \$object.unproofed++;
            \$tsize = 0;
            if (typeof(\$traits) == T_MAPPING) \{
                int i;
                \$tlist = map_indices(\$traits);
                \$tsize = sizeof(\$tlist);
                \$defmap = ([ ]);
                \$defaults = (\{ \});
                for (i = 0; i \< \$tsize; i++) \{
                    \$def = Str(Get(\$op, "trait:" + \$tlist[i]));
                    if (\$def != "") \$defaults += (\{ \$def \});
                    \$defmap[\$def] = \$tlist[i];
                \}
            \} else \{
                \$autokay = FALSE;
                \$defmap = ([ ]);
                \$defaults = (\{ "[NO TRAITS MAP!]" \});
            \}
            \{
                int i;
                if (catch(\$adjs = \$dref."detail:adjectives")) \$adjs = (\{ \});
                if (catch(\$adjsl = arr_to_set(\$dref."detail:adjectives:local"))) \$adjsl = ([ ]);
                \$content = (\{ (\{ "Adjectives in " + \$detref + " detail", "" \}) \});
                \$adjx = sizeof(\$adjs);
                \$found = FALSE;
                \$hyphenadjs = (\{ \});
                \$apostradjs = (\{ \});
                \$spaceadjs = (\{ \});
                for (i = 0; i \< \$adjx; i++) \{
                    if (!\$defmap[\$adjs[i]]) \{
                        \$content += (\{ (\{ "\<b\>" + \$adjs[i] + "\</b\> \<i\>" + (\$detail == "default" ? Str(\$object_name) : \$detail) + "\</i\>", (!\$adjsl[\$adjs[i]] ? "[UrInherited]" : "\<span class='link' onclick='change_arrmap(\\"adjective\\", \\"details:" + \$detail + ":adjective:" + url_encode(\$adjs[i]) + "\\", 0);'\>Delete\</span\>") \}) \});
                        if (contains(\$adjs[i], "-")) \{
                            \$hyphenadjs += (\{ \$adjs[i] \});
                        \}
                        if (contains(\$adjs[i], "'")) \{
                            \$apostradjs += (\{ \$adjs[i] \});
                            \$autokay = FALSE;
                        \}
                        if (contains(\$adjs[i], " ")) \{
                            \$spaceadjs += (\{ \$adjs[i] \});
                            \$autokay = FALSE;
                        \}
                        if (\$adjs[i] == "pair") \{
                            \$pairisadjective = TRUE;
                        \}
                        \$found = TRUE;
                    \}
                \}
                \$hyphenadjx = sizeof(\$hyphenadjs);
                \$apostradjx = sizeof(\$apostradjs);
                \$spaceadjx = sizeof(\$spaceadjs);
                \$aanone = \$apostradjx != 1;
                \$sanone = \$spaceadjx != 1;
                if (!\$found) \$content += (\{ (\{ "[none]", "" \}) \});
            \}]
            \<div class="italic"\>The following adjectives are used in the \$(detref) detail.
                \<ul\>
                    \<li\>Look for colors, materials, or conditions that defy the defaults (\$[implode(\$defaults, ", ")]) in the adjectives in this object.\</li\>
                    \<li\>Look for adjectives that don't make sense or don't appear in any of the descriptions.\</li\>
                \</ul\>
            \</div\>
            \{? \| \$(apostradjx) \|
                \<div class="warn"\>
                    The adjective\$[\$aanone ? "s":""] \$[implode(\$apostradjs, ", ")] \$[\$aanone ? "have apostrophes in them" : "has an apostrophe"], which is illegal. The parser cannot handle that kind of adjective usage, and \$[\$aanone ? "these adjectives":"this adjective"] must be fixed before this detail can be proofed.
                \</div\>
                \<sbr/\>
            \|\}
            \{? \| \$(spaceadjx) \|
                \<div class="warn"\>
                    The adjective\$[\$sanone ? "s":""] \$[implode(\$spaceadjs, ", ")] \$[\$aanone ? "have SPACES in them" : "has a SPACE"], which is illegal. Note that if a detail has the adjectives 'red' and 'wool' it is possible to interact with it as 'red wool'; thus, it is never necessary to have a single adjective with spaces in it. \$[\$aanone ? "These adjectives":"This adjective"] must be fixed before this detail can be proofed.
                \</div\>
                \<sbr/\>
            \|\}
            \{? \| \$(pairisadjective) \|
                \<div class="serious"\>
                    The adjective "pair" is used in this object, but UrClothingPair is not a parent of this object.
                \</div\>
            \|\}
            \$[html::table(\$padding: 3, \$style: "border: solid 1px #555;")]
            \<div class="italic"\>Look for any missing adjectives that are listed in a description, but are not a trait. Remember, some adjectives are automatically created when an individual object is spawned. They do not appear here, but should be checked before final proofing takes place.\</div\>
            \{? \| \$[\$detail == "default"] \|\$(this.sam:display-prime)\|
                \<b\>examine:\</b\>
                \$[int i;
                if (!\$tsize) \$tsize = 0;
                for (i = 0; i \< \$tsize; i++) \{
                    SetVar(\$tlist[i], Get(\$op, "trait:" + \$tlist[i]));
                \}
                return ::parse(\$sam: \$dtsexam != "" ? \$dtsexam : \$dtslook, \$filter: \$repcs);]
            \}
            \$[if (catch(\$spnames = \$dref."detail:snames" + \$dref."detail:pnames")) \$spnames = (\{ \});
                \$wordlist = map_indices(arr_to_set(explode(lower_case(replace_strings(\$dsum, "\|", " ", "/", " ", "\<", " ", "\>", " ", "\\n", " ", "\{", " ", "\}", " ", "=", " ", "(", " ", ")", " ", ",", " ", ".", " ", ":", " ", "'", " ", "?", " ", "!", " ", "\\"", " ")), " ")));

                if (\$detref != "prime") \{
                    catch(\$wordlist += \$op."detail:snames");
                \}

                \$wordlist -= ((\{ "", "\$", "/\>", "/\>\|\}", "1", "\<describe-prop", "=", "a", "about", "above", "across", "against", "an", "and", "are", "around", "at", "atop", "be", "before", "behind", "below", "beneath", "beside", "both", "by", "can", "cap", "capitalize", "close", "closely", "color", "concerning", "condition", "describe-prop", "down", "embroidery", "everything", "fit", "for", "from", "front", "has", "have", "her", "his", "how", "in", "inside", "into", "is", "it", "item", "its", "look", "made", "manner", "material", "men", "more", "near", "nearby", "next", "nil", "no", "object", "of", "on", "onto", "out", "over", "pair", "pattern", "regarding", "s", "shape", "sleeves", "slightly", "stand", "strip", "style", "symbol", "than", "the", "their", "them", "then", "these", "they", "thing", "this", "to", "top", "toward", "towards", "trait", "under", "up", "upon", "using", "was", "what", "which", "with", "within", "women", "worn", "x[s]", "you", "\{", "\|", "\|\}" \}) + \$adjs + \$spnames);

                \$content = (\{ (\{ "Other words in Descriptions", "" \}) \});
                \{
                    int i, ix;
                    ix = sizeof(\$wordlist);
                    \$adjrep = ([ ]);
                    for (i = 0; i \< ix; i++) \{
                        \$content += (\{ (\{ "\<b\>" + \$wordlist[i] + "\</b\> \<i\>" + (\$detail == "default" ? Str(\$object_name) : \$detail) + "\</i\>", "\<span class='link' onclick='change_arrmap(\\"adjective\\", \\"details:" + \$detail + ":adjective:" + \$wordlist[i] + "\\", 1);'\>Make adjective\</span\>" \}) \});
                        \$adjrep[strlen(\$wordlist[i])] = Arr(\$adjrep[strlen(\$wordlist[i])]) + (\{ \$wordlist[i], "\<u\>" + \$wordlist[i] + "\</u\>" \});
                    \}
                    \$adjrep = flatten(reverse(map_values(\$adjrep)));
                \}]
            \$[html::table(\$padding: 3, \$style: "border: solid 1px #555;")]
            \{? \| \$(hyphenadjx) \|
                \<sbr/\>
                \<div class="serious"\>
                    The adjective\$[\$hyphenadjx != 1 ? "s":""] \$[implode(\$hyphenadjs, ", ")] \$[\$hyphenadjx != 1 ? "have" : "has"] a hyphen in \$[\$hyphenadjx != 1 ? "them" : "it"]. This is fine, but you may consider also/instead using two different adjectives.
                \</div\>
            \|\}
            \<div class="italic"\>Are there any close synonyms to these adjectives that should be added?\</div\>
            \<ul\>
                \<zform ob="\$(ob)" detail="\$(detail)"\>
                    \<action\>
                        \{? \| \$(newadj) \|\$[Set(Obj(\$ob), "details:" + \$detail + ":adjective:" + \$newadj, TRUE);"";]\|\}
                        \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                    \</action\>
                    \<input name="newadj" class="field" size="10" maxlength="15"/\> \\\| \<input type="submit" class="submit" value="Add adjective"/\>
                \</zform\>
            \</ul\>
            \{? \| \$(autokay) \|
                \<zact aspect="\$(aspect)" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, \$(detref) detail adjectives make sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:detail_descriptions">
         X[S] \\\<!---
            Detail descriptions
        ---\\\>
            \$[\$autokay = TRUE;

            \$badkeys = ([ "clean":1 ]);
            \$badkeyx = map_sizeof(\$badkeys);

            \$isprime = \$detail == "default";
            \$detref = \$isprime ? "prime" : \$detail;
            \$aspect = \$detref + "-descriptions";
            \$dref = \$isprime ? \$op : NewNRef(\$op, \$detail);
            if (\$isprime) \{
                \$dtbrief = \$dbrief;
                \$dtlook = \$dlook;
                \$dtexam = \$dexam;
                \$dtpbrief = \$dpbrief;
                \$dtworn = \$dworn;
                \$dtsbrief = \$sbrief;
                \$dtslook = \$slook;
                \$dtsexam = \$sexam;
                \$dtspbrief = \$spbrief;
                \$dtsworn = \$sworn;
                \$dtsum = \$sum;
            \} else \{
                catch(\$dtbrief = \$dref."detail:description:brief");
                catch(\$dtlook = \$dref."detail:description:look");
                catch(\$dtexam = \$dref."detail:description:examine");
                catch(\$dtpbrief = \$dref."detail:description:pbrief");
                catch(\$dtworn = \$dref."detail:description:worn");
                \$dtsbrief = typeof(\$dtbrief) == T_OBJECT ? dump_value(\$dtbrief) : Str(\$dtbrief);
                \$dtslook = typeof(\$dtlook) == T_OBJECT ? dump_value(\$dtlook) : Str(\$dtlook);
                \$dtsexam = typeof(\$dtexam) == T_OBJECT ? dump_value(\$dtexam) : Str(\$dtexam);
                \$dtspbrief = typeof(\$dtpbrief) == T_OBJECT ? dump_value(\$dtpbrief) : Str(\$dtpbrief);
                \$dtsworn = typeof(\$dtworn) == T_OBJECT ? dump_value(\$dtworn) : Str(\$dtworn);
                \$dtsum = Str(\$dtsbrief) + " " + Str(\$dtslook) + " " + Str(\$dtsexam) + " " + Str(\$dtspbrief) + " " + Str(\$dtsworn);
            \}
            \$errpbrief = \$dtspbrief == "clothing" \|\| \$dtspbrief == "clothings";
            \$duppbrief = !\$errpbrief \&\& \$dtspbrief == "clothes" \&\& \$op."sys:shared:classifier:urclothing";
            \$warnpbrief = !\$errpbrief \&\& !\$duppbrief \&\& \$dtspbrief != "";
            \$warnworn = \$dtsworn == "";
            \$warnpair = \$isprime \&\& !\$op."sys:shared:classifier:urclothingpair" \&\& contains(\$dtsum, "pair");
            \$warndef = \$dref."detail:definite";
            \$xyz = strlen(\$dtsbrief) \> 4 ? strip(\$dtsbrief[4..]) : \$dtsbrief;
            \$seriousdef = \$warndef \&\& (strlen(\$xyz) \> 4 \&\& \$xyz[..3] != "the ");
            \$errdef = \$warndef \&\& ((strlen(\$xyz) \> 1 \&\& (\$xyz[..1] == "a " \|\| \$xyz[..1] == "A ")) \|\| (strlen(\$xyz) \> 2 \&\& (\$xyz[..2] == "an " \|\| \$xyz[..2] == "An ")));
            \$errndef = !\$warndef \&\& strlen(\$xyz) \> 3 \&\& \$xyz[..3] == "the ";

            \$warnkeywords = map_sizeof(\$badkeys - explode(replace_strings(\$dtsbrief, ", ", " ", ".", " "), " ")) \< \$badkeyx;
            \$autokay \&= !\$errpbrief \&\& !\$errdef \&\& !\$errndef;
            \$descs = (\$dtbrief ? (\{ "brief" \}) : (\{ \})) +
                     (\$dtlook ? (\{ "look" \}) : (\{ \})) +
                     (\$dtexam ? (\{ "exam" \}) : (\{ \})) +
                     (\$dtpbrief ? (\{ "pbrief" \}) : (\{ \})) +
                     (\$dtworn ? (\{ "worn" \}) : (\{ \}));
            \$noaan = ([ "pbrief" : TRUE ]);
            \$seecap = ([ "look" : TRUE, "examine" : TRUE ]);
            \$dotissuesfor = ([ "brief":1, "pbrief":1, "worn":1 ]);]
        \{? \| \$[Get(\$object, "sys:shared:proof:" + \$detref + "-descriptions")] \|
            \<div class="bigd"\>\<b\>Are the descriptions in the \$(detref) detail sensible?\</b\>\</div\>
            \$[\$desc = "The " + \$detref + " detail descriptions were proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Are the descriptions in the \$(detref) detail sensible?\</b\>\</div\>
            \$[\$object.unproofed++;]
            \{? \| \$(warnpair) \|
                \<div class="serious"\>
                    The description for this object indicates that it is a \<b\>pair\</b\> of something, but it is not using the UrClothingPair UrParent. This is recommended.
                \</div\>
                \<sbr/\>
            \|\}
            \{? \| \$(warnkeywords) \|
                \<div class="serious"\>
                    Some of the descriptions for this object contains \<b\>hardcoded\</b\> attributes, such as "clean". Whether the object is clean or not should be indicated by the "trait:condition" property, and be dynamic; it should not be a preset property in the object. Recommend editing this detail's description in Woe.
                \</div\>
                \<sbr/\>
            \|\}
            \{? \| \$(warnworn) \|
                \<div class="serious"\>
                    There is no \<b\>worn\</b\> description in this object. Worn descriptions are useful when you want a different brief to be displayed when you look at someone wearing the object.
                \</div\>
                \<sbr/\>
            \|\}
            \{? \| \$(warndef) \|
                \<div class="serious"\>
                    This \{? \| \$(isprime) \|object\|detail\} is a "definite article", meaning "a" and "an" are not added to the brief of it. Definite article is good for e.g. \{? \| \$(isprime) \|"the Excalibur" style objects, or pair-style objects which are not described in "a pair of" form; "pants" (definite) versus "a pair of pants" (non-definite).\|"the sleeves of a shirt" style details\}.
                \</div\>
                \{? \| \$(errdef) \|
                    \<sbr/\>
                    \<div class="warn"\>
                        This detail is a definite article and starts with "a" or "an", which is not acceptable. The \$(detail) detail should most likely NOT be a definite article!
                    \</div\>
                \|
                \{? \| \$(seriousdef) \|
                    \<sbr/\>
                    \<div class="serious"\>
                        This definite article detail does not begin with "the". Most likely invalid, unless in the case of e.g. "pants".
                    \</div\>
                \|\}
                \}
            \|\}
            \{? \| \$(errndef) \|
                \<sbr/\>
                \<div class="warn"\>
                    This detail is not a definite article, but its brief starts with "the". This will come out as "a the ...", and that's not proper English.
                \</div\>
            \|\}
            \<div class="italic"\>There are \$[desc_cardinal(sizeof(\$descs))] descriptions using these traits. Shown are the default values, an alternative adjective starting with a consonant, and an alternative adjective starting with a vowel. Please confirm that briefs are not capitalized, sentences are properly capitalized, and the a/an/the articles before adjectives and nouns look ok.\</div\>
            \<for var="d" val="\$(descs)"\>
                \<b\>\$[capitalize(\$d == "exam" ? "examine" : \$d)]:\</b\>
                \<ul\>
                    \<li\>\<b\>default:\</b\>
                    \$[int i;
                        if (!\$tsize) \$tsize = 0;
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], Get(\$op, "trait:" + \$tlist[i]));
                        \}
                        return ::parse(\$sam: GetVar("dts" + \$d), \$filter: \$repcs, \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$postproc: \$postproc_aan);]
                        \<sbr/\>
                        \{? \| \$[!\$noaan[\$d]] \|
                        \<b\>a:\</b\>
                    \$[int i;
                        \$defmap = ([ "fit" : "stylish", "symbol" : "trefoil", "color" : "blue", "material" : "wool", "condition" : "clean" ]);
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], \$defmap[\$tlist[i]] ? \$defmap[\$tlist[i]] : "c" + \$tlist[i]);
                        \}
                        return ::parse(\$sam: GetVar("dts" + \$d), \$filter: \$repcs, \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$postproc: \$postproc_aan);]
                        \<sbr/\>
                        \<b\>an:\</b\>
                    \$[int i;
                        \$defmap = ([ "fit" : "oppressive", "symbol" : "apple", "color" : "orange", "material" : "ivory", "condition" : "ink-stained" ]);
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], \$defmap[\$tlist[i]] ? \$defmap[\$tlist[i]] : "a" + \$tlist[i]);
                        \}
                        return ::parse(\$sam: GetVar("dts" + \$d), \$filter: \$repcs, \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$postproc: \$postproc_aan);]
                        \|\}
                    \</li\>
                \</ul\>
            \</for\>
            \{? \| \$(op.parseissues) \|\<div class="serious"\>Possible errors in descriptions were found by the auto-checker. Hold your mouse over the highlighted text above for info about errors detected. Click on a highlighted part to see the text in a dialog window.\</div\>\$[\$op.parseissues = FALSE;]\|\}
            \<p\>
            \<a href="Edit?ob=\$(obj)\\\&detail=\$(detail)"\>Modify these descriptions\</a\>
            \</p\>
            \<div class="italic"\>Some traits can be unset, and the object should still look fine. Material and color must be set, but all the others are optional. Do these descriptions look fine?\</div\>
            \<for var="d" val="\$(descs)"\>
                \<b\>\$[capitalize(\$d == "exam" ? "examine" : \$d)]:\</b\>
                \<ul\>
                    \<li\>\<b\>default:\</b\>
                    \$[int i;
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], Get(\$op, "trait:" + \$tlist[i]));
                        \}
                        return ::parse(\$sam: GetVar("dts" + \$d), \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$filter: \$repcs);]
                        \<sbr/\>
                        \<b\>all:\</b\>
                    \$[int i;
                        \$defmap = ([ "fit" : "stylish", "symbol" : "trefoil", "color" : "blue", "material" : "wool", "condition" : "clean" ]);
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], \$defmap[\$tlist[i]] ? \$defmap[\$tlist[i]] : "a" + \$tlist[i]);
                        \}
                        return ::parse(\$sam: GetVar("dts" + \$d), \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$filter: \$repcs);]
                        \<sbr/\>
                        \<b\>no condition:\</b\>
                    \$[int i;
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], \$tlist[i] == "material" \|\| \$tlist[i] == "color" ? \$defmap[\$tlist[i]] ? \$defmap[\$tlist[i]] : "a" + \$tlist[i] : nil);
                        \}
                        if (!\$tlist) \$tlist = (\{ \});
                        return ::parse(\$sam: GetVar("dts" + \$d), \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$filter: \$repcs);]
                        \<sbr/\>
                        \<for var="x" val="\$(tlist)"\>
                            \{? \| \$[\$x != "material" \&\& \$x != "color" \&\& \$x != "condition"] \|
                            \<b\>no \$(x):\</b\>
                    \$[int i;
                        for (i = 0; i \< \$tsize; i++) \{
                            SetVar(\$tlist[i], \$tlist[i] != \$x ? \$defmap[\$tlist[i]] ? \$defmap[\$tlist[i]] : "a" + \$tlist[i] : nil);
                        \}
                        return ::parse(\$sam: GetVar("dts" + \$d), \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d], \$filter: \$repcs);]
                        \<sbr/\>
                            \|\}
                        \</for\>
                    \</li\>
                \</ul\>
            \</for\>
            \<p\>
            \{? \| \$(op.parseissues) \|\<div class="serious"\>Possible errors in descriptions were found by the auto-checker. Hold your mouse over the highlighted text above for info about errors detected. Click on a highlighted part to see the text in a dialog window.\</div\>\$[\$op.parseissues = FALSE;]\|\}
            \<sbr/\>
            \<a href="Edit?ob=\$(obj)\\\&detail=\$(detail)"\>Modify these descriptions\</a\>
            \</p\>
            \{? \| \$(errpbrief) \|
                \<div class="warn"\>
                    The PBrief set in this object is \$(dtspbrief), which is incorrect. The correct PBrief is clothes, which is already set in UrClothing. Please delete it.
                \</div\>
            \|\}
            \{? \| \$(warnpbrief) \|
                \<div class="serious"\>
                    The PBrief is set in this object. This is fine, but please note that PBriefs should primarily be used for objects that should stand out in a pile, such as a large or obvious clothing object, or for objects that use the clothing system but are not clothes, for instance, a rug.
                \</div\>
            \|\}
            \<sbr/\>
            \{? \| \$(autokay) \|
                \<zact udat="\$(UDat.name)" aspect="\$(aspect)" obj="\$(obj)"\>Aye, \$(detref) descriptions make sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:detail_names">
         X[S] \\\<!---
            Detail names
        ---\\\>
        \$[\$detref = \$detail == "default" ? "prime" : \$detail; \$aspect = \$detail + "-names";]
        \{? \| \$[Get(\$object, "sys:shared:proof:" + \$aspect)] \|
            \<div class="bigd"\>\<b\>Do the \$(detref) singular and plural names make sense?\</b\>\</div\>
            \$[\$desc = "The " + \$detref + " singular/plural names were proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Do the \$(detref) singular and plural names make sense?\</b\>\</div\>
            \$[\$autokay = TRUE;
            \$object.unproofed++;
            \{
                int i;

                \$invalidpnames = (\{ "clothings", "headwears" \});

                \$dref = NewNRef(\$op, \$detail);
                if (catch(\$snamesl = arr_to_set(\$dref."detail:snames:local"))) \$snamesl = ([ ]);
                if (catch(\$pnamesl = arr_to_set(\$dref."detail:pnames:local"))) \$pnamesl = ([ ]);
                if (catch(\$snames = \$dref."detail:snames")) \$snames = (\{ \});
                if (catch(\$pnames = \$dref."detail:pnames")) \$pnames = (\{ \});
                \$parent = \$object."core:ur:parent";
                if (\$parent) \{
                    int i, ix;
                    \$pref = NewNRef(\$parent, \$detail);
                    if (catch(\$psn = \$pref."detail:snames")) \$psn = (\{ \});
                    if (catch(\$ppn = \$pref."detail:pnames")) \$ppn = (\{ \});
                    \$psdups = map_indices(\$snamesl) \& \$psn;
                    \$ppdups = map_indices(\$pnamesl) \& \$ppn;
                    if (ix = sizeof(\$psdups)) \{
                        \$snamesl -= \$psdups;
                        for (i = 0; i \< ix; i++) Set(\$dref, "detail:sname:" + \$psdups[i], FALSE);
                    \}
                    if (ix = sizeof(\$ppdups)) \{
                        \$pnamesl -= \$ppdups;
                        for (i = 0; i \< ix; i++) Set(\$dref, "detail:pname:" + \$ppdups[i], FALSE);
                    \}
                \}
                \$hassname = map_sizeof(\$snamesl) ? TRUE : FALSE;
                \$haspname = map_sizeof(\$pnamesl) ? TRUE : FALSE;
                \$autokay \&= (sizeof(\$snames) + sizeof(\$pnames)) \> 0;
                \$aspnames = \$snames \& \$pnames;
                \$spnames = arr_to_set(\$aspnames);
                \$spnamex = sizeof(\$aspnames);
                \$errpnames = \$invalidpnames \& \$pnames;
                \$errpnamex = sizeof(\$errpnames);
                \$autokay \&= !\$errpnamex;
                \$snamex = sizeof(\$snames);
                \$pnamex = sizeof(\$pnames);
                \$scontent = (\{ (\{ "SName", "" \}) \});
                \$pcontent = (\{ (\{ "PName", "" \}) \});
                for (i = 0; i \< \$snamex; i++) \{
                    \$scontent += (\{ (\{ (\$spnames[\$snames[i]] ? "\<span style='color: #990; font-weight: bold;'\>" + \$snames[i] + "\</span\>" : \$snames[i]), (!\$snamesl[\$snames[i]] ? "[UrInherited]" : "\<span class='link' onclick='change_arrmap(\\"SName\\", \\"details:" + \$detail + ":sname:" + \$snames[i] + "\\", 0);'\>Remove\</span\>") \}) \});
                \}
                for (i = 0; i \< \$pnamex; i++) \{
                    \$pcontent += (\{ (\{ (\$spnames[\$pnames[i]] ? "\<span style='color: #990; font-weight: bold;'\>" + \$pnames[i] + "\</span\>" : \$pnames[i]), (!\$pnamesl[\$pnames[i]] ? "[UrInherited]" : "\<span class='link' onclick='change_arrmap(\\"PName\\", \\"details:" + \$detail + ":pname:" + \$pnames[i] + "\\", 0);'\>Remove\</span\>") \}) \});
                \}
            \}]
            \<div class="italic"\>The following names are used in the \$(detref) detail:\</div\>
            \{? \| \$[\$detail == "default"] \|\$(this.sam:display-prime)\|
                \<b\>examine:\</b\>
                \$[int i;
                if (!\$tsize) \$tsize = 0;
                for (i = 0; i \< \$tsize; i++) \{
                    SetVar(\$tlist[i], Get(\$op, "trait:" + \$tlist[i]));
                \}
                return ::parse(\$sam: \$dtsexam != "" ? \$dtsexam : \$dtslook, \$filter: \$repcs);]
            \}
            \{? \| \$(hassname) \|\|\<div class="warn"\>There are no local SNames in this detail!\</div\>\}
            \{? \| \$(haspname) \|\|\<div class="warn"\>There are no local PNames in this detail!\</div\>\}
            \{? \| \$(spnamex) \|\<div class="warn"\>There is a word duplicated in both PName and SName. In general, favor only using the PName over SName when a word belongs in both, especially in 'pair of' type objects.\</div\>\|\}
            \{? \| \$(errpnamex) \|\<div class="warn"\>There are invalid PNames in this object -- these must be removed before the object can be proofed: \$[implode(\$errpnames, ", ")].\</div\>\|\}
            \<table border="0"\>
                \<tr\>\<td valign="top"\>
                    \$[html::table(\$content: \$scontent, \$padding: 3, \$style: "border: solid 1px #555;")]
                \</td\>\<td valign="top"\>
                    \$[html::table(\$content: \$pcontent, \$padding: 3, \$style: "border: solid 1px #555;")]
                \</td\>\</tr\>
                \<tr\>
                \<zform ob="\$(ob)" detail="\$(detail)"\>
                    \<action\>
                        \{? \| \$(newsname) \|\$[Set(Obj(\$ob), "details:" + \$detail + ":sname:" + \$newsname, TRUE);"";]\|\}
                        \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                    \</action\>
                    \<td valign="top"\>
                        \<input name="newsname" size="10"/\> \\\| \<input type="submit" class="submit" value="Add SName"/\>
                    \</td\>
                \</zform\>
                \<zform ob="\$(ob)" detail="\$(detail)"\>
                    \<action\>
                        \{? \| \$(newpname) \|\$[Set(Obj(\$ob), "details:" + \$detail + ":pname:" + \$newpname, TRUE);"";]\|\}
                        \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                    \</action\>
                    \<td valign="top"\>
                        \<input name="newpname" size="10"/\> \\\| \<input type="submit" class="submit" value="Add PName"/\>
                    \</td\>
                \</zform\>
                \</tr\>
            \</table\>
            \{? equal \| \$(detail) \| default \|
                \<sbr/\>
                \$[\$content = (\{ (\{ "Suggested Names", "Type", "" \}) \});
                    \{
                        int i, ix;
                        string *s, *p;
                        s = Arr(\$other_snames) - (\$snames+\$pnames);
                        p = Arr(\$other_pnames) - (\$snames+\$pnames) - \$invalidpnames;
                        ix = sizeof(s);
                        for (i = 0; i \< ix; i++) \{
                            \$content += (\{ (\{ "\<b\>" + s[i] + "\</b\>", "SName", "\<span class='link' onclick='change_arrmap(\\"SName\\", \\"details:" + \$detail + ":sname:" + s[i] + "\\", 1);'\>Make SName\</span\>" \}) \});
                        \}
                        ix = sizeof(p);
                        for (i = 0; i \< ix; i++) \{
                            \$content += (\{ (\{ "\<b\>" + p[i] + "\</b\>", "PName", "\<span class='link' onclick='change_arrmap(\\"PName\\", \\"details:" + \$detail + ":pname:" + p[i] + "\\", 1);'\>Make PName\</span\>" \}) \});
                        \}
                    \}]
                \{? \| \$[sizeof(\$content) \> 1] \|
                    \<div class="italic"\>
                        The following snames and pnames were found in similarly named objects. They may be appropriate for this object:
                    \</div\>
                    \$[html::table(\$padding: 3, \$style: "border: solid 1px #555;")]
                    \<sbr/\>
                \|\}
            \|\}
            \{? \| \$(autokay) \|
                \<zact aspect="\$(aspect)" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, \$(detref) names make sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:item_name">
         X[S] \\\<!---
Name checks
---\\\>
        \$[::test_item_name();]
    \{? \| \$(object.sys:shared:proof:item-name) \|
        \<div class="bigd"\>\<b\>Is the woename of this object correct?\</b\>\</div\>
        \$[\$aspect = "item-name"; \$desc = "The object name was proofed";]\$(this.sam:message-sensible)
    \|
        \<div class="big"\>\<b\>Is the woename of this object correct?\</b\>\</div\>
        \$[\$object.unproofed++;]
        \<div class="italic"\>
            The classification categories should be correct, the woe name should be descriptive and make the object easily identifiable. The least significant part of the name should be the rightmost.
        \</div\>
        \<b\>It appears to be:\</b\>
        \<ul\>
            \$(appearance)
        \</ul\>
        \<p\>
            \<zform obj="\$(obj)"\>
                \<action\>
                    \$[if (\$newname) \{
                        \$err = catch(Call(\$\{Lib:objects\}, "rename", \$object: Obj(\$obj), \$newname: \$newname));
                        if (!\$err) \{
                            shared::."sys:shared:proofed" -= (\{ \$obj \});
                            shared::."sys:shared:proofed" += (\{ \$newname \});
                            \$obj = \$newname;
                        \}
                    \}]
                    \<redirect propob="\$(this)" prop="index" ob="\$(obj)" err="\$(err)"/\>
                \</action\>
            \<input name="newname" size="60" value="\$(obj)" class="field"/\> \\\| \<input type="submit" value="Rename" class="submit"/\>
            \</zform\>
        \</p\>
        \{? \| \$(name_conventional) \|\|
        \<div class="serious"\>This object is not following the convention \<b\>\$(name_convention)\</b\>.\</div\>
        \<sbr/\>
        \}
        \{? \| \$(era_data) \|
        \<div class="info"\>
            \$(era_data)
        \</div\>
        \|\}
        \{? \| \$[\$object_type \&\& \$object_era \&\& \$coverage_type \&\& \$object_remainder] \|
        \<sbr/\>
        \<div style="display: none; border: solid #000 2px; background: #eee; padding: 3px; position: absolute; width: 80%; left: 10%;" id="erasdiv"\>
            \<center\>\<b\>Eras selector:\</b\>\</center\>
            \<zform ob="\$(ob)" object_type="\$(object_type)" object_era="\$(object_era)" coverage_type="\$(coverage_type)" object_remainder="\$(object_remainder)"\>
                \<action\>
                    \$[if (\$newera) \{
                        \$newname = "Shared:" +
                            \$object_type + ":" +
                            \$newera + ":" +
                            \$coverage_type + ":" +
                            \$object_remainder;
                        \$err = catch(Call(\$\{Lib:objects\}, "rename", \$object: Obj(\$ob), \$newname: \$newname));
                        if (!\$err) \$ob = \$newname;
                    \}]
                    \<redirect propob="\$(this)" prop="index" ob="\$(ob)" err="\$(err)"/\>
                \</action\>
                \<ul\>
                \<for var="era" val="\$(erasarr)"\>
                    \<li\>\$[ParseXML("\<input " + (\$era == \$object_era ? "checked='1' ":"") + "type=\\"radio\\" name=\\"newera\\" value=\\"" + \$era + "\\"/\>")] \<b\>\$(era)\</b\> \\\&mdash; \$[\$erasmap[\$era]]\</li\>
                \</for\>
                \</ul\>
                \<input type="submit" class="submit" value="Set era"/\>
            \</zform\>
        \</div\>
        \<sbr/\>
        \<span class="link" onclick="toggle_visible('erasdiv');"\>Change the era for this object.\</span\>
        \|\}
        \<br/\>
        \{? \| \$(autokay) \|
            \<zact aspect="item-name" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, object name makes sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
        \|
            \$(msg_there_were_errors)
        \}
    \}
      </Core:Property>
      <Core:Property property="test:item_traits">
         X[S] \\\<!---
            object traits
        ---\\\>
            \$[\$autokay = TRUE;
            \$descs = (\$dbrief ? (\{ "brief" \}) : (\{ \})) + (\$dlook ? (\{ "look" \}) : (\{ \})) + (\$dexam ? (\{ "exam" \}) : (\{ \}));
            \$repcs = (\{ "\<describe-props", "\<proofing:describe-props", "\</describe-props\>", "\</proofing:describe-props\>" \});
            if (typeof(\$traits) == T_MAPPING) \{
                int i, ix;
                \$tlist = map_indices(\$traits);
                \$usedlist = (\{ \});
                ix = sizeof(\$tlist);
                \$tsize = ix;
                for (i = 0; i \< ix; i++) \{
                    /* if (contains(\$sum, "trait:" + \$tlist[i])) [[Ignoring this check for now.]] */
                    \$usedlist += (\{ "trait:" +\$tlist[i] \});
                    \$repcs += (\{ "\$(This", "\$(this", "\$(this.trait:" + \$tlist[i] + ")", "\$(" + \$tlist[i] + ")", "\<describe-prop what=\\"trait:" + \$tlist[i] + "\\"/\>", "\$[common::aan(\$what: \$(" + \$tlist[i] + ")?\$(" + \$tlist[i] + "):\\"  \\")]", "\<describe-prop what=\\"trait:" + \$tlist[i] + "\\" cap=\\"1\\"/\>", "\$[capitalize(common::aan(\$what: Str(\$(" + \$tlist[i] + ")?\$(" + \$tlist[i] + "):\\"  \\")))]" \});
                \}
            \}
            if (\$usedlist \&\& sizeof(\$usedlist)) \{
                int i, ix;
                \$usedlist = (\{ "trait:color", "trait:material", "trait:condition" \}) + (\$usedlist - (\{ "trait:color", "trait:material", "trait:condition" \}));
                \$flags = ([ "trait:color" : "required/default set",
                            "trait:material" : "required/default set",
                            "trait:condition" : "required/default optional",
                            "" : "optional/default optional" ]);
                \$mustnil = ([ "trait:condition" : TRUE ]);
                ix = sizeof(\$usedlist);
                \$content = (\{ (\{ "Trait", "Default", "Flags", "" \}) \});
                \$nilwarn = "";
                for (i = 0; i \< ix; i++) \{
                    \$def = Get(\$op, \$usedlist[i]);
                    if (\$def \&\& \$mustnil[\$usedlist[i]]) \$nilwarn += "\<br/\>\<div class='serious'\>The " + \$usedlist[i] + " trait is not nil, and is supposed to be nil in non-morphs.\</div\>";
                    \$content += (\{ (\{ \$usedlist[i], \$def ? \$def : "\<i\>nil\</i\>", \$flags[\$usedlist[i]] ? \$flags[\$usedlist[i]] : \$flags[""], "\<span class='link' onclick=\\"change_value('property', '" + \$usedlist[i] + "');\\"\>Change\</span\> \\\| \<span class='link' onclick='delete_property(\\"Okay to clear the default value for " + \$usedlist[i] + "?\\", \\"" + \$usedlist[i] + "\\", 1);'\>Clear\</span\>" \}) \});
                \}
                \$usedres = html::table(\$padding: 3, \$style: "border: solid 1px #555;");
                if (sizeof(\$usedlist - (\{ "trait:color", "trait:material", "trait:condition" \})) != sizeof(\$usedlist) - 3) \{
                    \$usedres += "\<br/\>\<div class='warn'\>\<b\>This object is not using all three required traits -- color, material, and condition:\</b\>\</div\>\<ul\>";
                    if (!member("trait:condition", \$usedlist)) \$usedres += "\<li\>This object is missing the \$(this.trait.condition) trait. By convention, this is added typically only to the examine description, either before the first adjective (i.e. \\"a dirty green wool dress.\\"), or as a comment phrase after the noun (i.e. \\"a green wool dress, which appears to be dirty.\\"). Click \<a href=\\"DUMMY\\"\>E\</a\> to edit this detail.\</li\>";
                    if (!member("trait:color", \$usedlist)) \$usedres += "\<li\>This object is missing the \$(this.trait.color) trait. By convention, this should be in all descriptions. It is typically the first adjective in the brief description (i.e. \\"green dress\\") and look description (i.e. \\"a green wool dress\\"). Click \<a href=\\"DUMMY\\"\>E\</a\> to edit this detail.\</li\>";
                    if (!member("trait:material", \$usedlist)) \$usedres += "\<li\>This object is missing the \$(this.trait.material) trait. By convention, this should be at least in the look and examine descriptions, but can optionally be in the brief if the material type is obvious and prominent. It is typically the second adjective in the look description (i.e. \\"a green wool dress\\"). Click \<a href=\\"DUMMY\\"\>E\</a\> to edit this detail.\</li\>";
                    \$usedres += "\</ul\>";
                    \$autokay = FALSE;
                \}
            \} else \{
                \$usedres = \$traits ? "ERROR: This object is not using any traits!" : "ERROR: This object has no traits map!";
                \$autokay = FALSE;
            \}]
        \{? \| \$(object.sys:shared:proof:item-traits) \|
            \<div class="bigd"\>\<b\>Are the object traits and their defaults sensible?\</b\>\</div\>
            \$[\$aspect = "item-traits";\$desc = "The object traits were proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Are the object traits and their defaults sensible?\</b\>\</div\>
            \$[\$object.unproofed++;]
            \<div class="italic"\>The following traits are used in this object. Please confirm that the default values are reasonable. In general, these master objects will default to the color white and the material cotton, however, you should choose other values if those are very atypical choices, for instance "white cotton sweater" is very atypical but "brown wool sweater" is much more common.\</div\>
            \$(usedres)
            \$(nilwarn)
            \<sbr/\>
            \{? \| \$(autokay) \|
                \<zact aspect="item-traits" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, object traits and their defaults look okay!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:mold_traits">
         X[S] \\\<!---
            Mold traits
        ---\\\>
            \$[\$autokay = TRUE;
            \$moldsource = \$op."core:ur:parent";
            if (contains(name(\$moldsource), "Shared:Local:") \&\& \$moldsource."core:ur:parent") \$moldsource = \$moldsource."core:ur:parent";
            \$descs = (\$dbrief ? (\{ "brief" \}) : (\{ \})) + (\$dlook ? (\{ "look" \}) : (\{ \})) + (\$dexam ? (\{ "exam" \}) : (\{ \}));
            \$repcs = (\{ "\<describe-props", "\<proofing:describe-props" \});
            if (typeof(\$traits) == T_MAPPING) \{
                int i, ix;
                \$tlist = map_indices(\$traits);
                \$usedlist = (\{ \});
                ix = sizeof(\$tlist);
                \$tsize = ix;
                for (i = 0; i \< ix; i++) \{
                    if (contains(\$sum, "trait:" + \$tlist[i])) \$usedlist += (\{ "trait:" +\$tlist[i] \});
                    \$repcs += (\{ "\$(this.trait:" + \$tlist[i] + ")", "\$(" + \$tlist[i] + ")", "\<describe-prop what=\\"trait:" + \$tlist[i] + "\\"/\>", "\$[common::aan(\$what: \$" + \$tlist[i] + "?\$" + \$tlist[i] + ":\\"  \\")]", "\<describe-prop what=\\"trait:" + \$tlist[i] + "\\" cap=\\"1\\"/\>", "\$[capitalize(common::aan(\$what: Str(\$" + \$tlist[i] + "?\$" + \$tlist[i] + ":\\"  \\")))]" \});
                \}
            \}
            if (\$usedlist \&\& sizeof(\$usedlist)) \{
                int i, ix;
                \$usedlist = (\{ "trait:color", "trait:material", "trait:condition" \}) + (\$usedlist - (\{ "trait:color", "trait:material", "trait:condition" \}));
                \$flags = ([ "trait:color" : "required/default set",
                            "trait:material" : "required/default set",
                            "trait:condition" : "required/default optional",
                            "" : "optional/default optional" ]);
                ix = sizeof(\$usedlist);
                \$content = (\{ (\{ "Trait", "Morph Default", "UrParent Default", "Flags", "" \}) \});
                for (i = 0; i \< ix; i++) \{
                    \$def = Get(\$op, \$usedlist[i]);
                    \$urdef = Get(\$moldsource, \$usedlist[i]);
                    \$content += (\{ (\{ \$usedlist[i], \$def ? \$def : "\<i\>nil\</i\>", \$urdef ? \$urdef : "\<i\>nil\</i\>", \$flags[\$usedlist[i]] ? \$flags[\$usedlist[i]] : \$flags[""], "\<span class='link' onclick=\\"change_value('property', '" + \$usedlist[i] + "');\\"\>Change\</span\> \\\| \<span class='link' onclick='delete_property(\\"Okay to clear the default value for " + \$usedlist[i] + "?\\", \\"" + \$usedlist[i] + "\\", 1);'\>Clear\</span\>" \}) \});
                \}
                \$usedres = html::table(\$padding: 3, \$style: "border: solid 1px #555;") + "[\<a href='Index?ob=" + name(\$moldsource) + "#item_traits'\>open UrParent\</a\> \&rarr; " + name(\$moldsource) + "]\<br/\>";
                if (sizeof(\$usedlist - (\{ "trait:color", "trait:material", "trait:condition" \})) != sizeof(\$usedlist) - 3) \{
                    \$usedres += "\<br/\>\<div class='warn'\>\<b\>This object is not using all three required traits -- color, material, and condition:\</b\>\</div\>\<ul\>";
                    if (!member("trait:condition", \$usedlist)) \$usedres += "\<li\>This object is missing the \$(this.trait.condition) trait. By convention, this is added typically only to the examine description, either before the first adjective (i.e. \\"a dirty green wool dress.\\"), or as a comment phrase after the noun (i.e. \\"a green wool dress, which appears to be dirty.\\"). Click \<a href=\\"DUMMY\\"\>E\</a\> to edit this detail.\</li\>";
                    if (!member("trait:color", \$usedlist)) \$usedres += "\<li\>This object is missing the \$(this.trait.color) trait. By convention, this should be in all descriptions. It is typically the first adjective in the brief description (i.e. \\"green dress\\") and look description (i.e. \\"a green wool dress\\"). Click \<a href=\\"DUMMY\\"\>E\</a\> to edit this detail.\</li\>";
                    if (!member("trait:material", \$usedlist)) \$usedres += "\<li\>This object is missing the \$(this.trait.material) trait. By convention, this should be at least in the look and examine descriptions, but can optionally be in the brief if the material type is obvious and prominent. It is typically the second adjective in the look description (i.e. \\"a green wool dress\\"). Click \<a href=\\"DUMMY\\"\>E\</a\> to edit this detail.\</li\>";
                    \$usedres += "\</ul\>";
                    \$autokay = FALSE;
                \}
            \} else \{
                \$usedres = \$traits ? "ERROR: This object is not using any traits!" : "ERROR: This object has no traits map!";
                \$autokay = FALSE;
            \}]
        \{? \| \$(object.sys:shared:proof:item-traits) \|
            \<div class="bigd"\>\<b\>Are the object traits and their defaults sensible?\</b\>\</div\>
            \$[\$aspect = "item-traits";\$desc = "The object traits were proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Are the object traits and their defaults sensible?\</b\>\</div\>
            \$[\$object.unproofed++;]
            \$[\$display_real_traits = TRUE;]\$(this.sam:display-prime)\$[\$display_real_traits = nil;]
            \<div class="italic"\>The following traits are used in this detail. Please confirm that the default values are reasonable.\</div\>
            \$(usedres)
            \<sbr/\>
            \{? \| \$(autokay) \|
                \<zact aspect="item-traits" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, object traits and their defaults look okay!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:physicals">
         X[S] \\\<!---
Physical properties
---\\\>
        \{? \| \$(object.sys:shared:proof:physicals) \|
            \<div class="bigd"\>\<b\>Are physical properties sane?\</b\>\</div\>
            \$[\$aspect = "physicals";\$desc = "The physical properties were proofed";]\$(this.sam:message-sensible)
        \|
            \<div class="big"\>\<b\>Are physical properties sane?\</b\>\</div\>
            \$[/*
               * Do some guesswork to find problems, and to describe this intelligibly
               */
            object refob;
            string reffun;

            \$autokay = TRUE;
            if (\$(test-handler-map)["physical-\>reference"]) \{
                refob = \$op;
                reffun = \$(test-handler-map)["physical-\>reference"];
            \} else \{
                refob = shared::;
                reffun = "reference";
            \}
            \$object.unproofed++;
            \$rdensity = \$op."base:intrinsicdensity";
            \$rcapacity = \$op."base:intrinsiccapacity";
            \$rmass = \$op."base:intrinsicmass";
            \$sdensity = shared::define_density(\$density: \$rdensity, \$type: "cloth");
            if (\$sdensity == "[NOTHING]") \$sdensity = shared::define_density(\$density: \$rdensity);
            \$smass = shared::define_mass(\$mass: \$rmass, \$type: \$glob_obtype);
            if (\$smass == "[NOTHING]") \$smass = "(one of) " + shared::define_mass(\$mass: \$rmass);
            \$scapacity = \$rcapacity ? shared::define_capacity(\$capacity: \$rcapacity, \$type: \$glob_obtype) : nil;
            \$refmass = Call(refob, reffun, \$value: \$rmass, \$subject: "mass", \$type: \$glob_obtype);
            \$refdensity = Call(refob, reffun, \$value: \$rdensity, \$subject: "density", \$type: \$glob_obtype);
            if (\$rcapacity) \$refcapacity = Call(refob, reffun, \$value: \$rcapacity, \$subject: "capacity", \$type: \$glob_obtype);
            \$volume = \$op."base:actualvolume";
             /* deprecated (feet and gallons below) */
            \$feet3 = format_float(\$volume * 0.035314667, 2);
            \$gallons = format_float(\$volume * 0.264172051, 2);
            if (\$rcapacity) \{
                \$mulcap = \$rcapacity * 1000.0;
                \$capacitydtmwarn = (\$mulcap / \$volume) \> 0.9;
                \$capacitytoosmall = (\$mulcap / \$volume) \< 0.1;
                \$verb2 = \$op."base:verb2";
                \$verb3 = \$op."base:verb3";
                \$diverges = (\$verb2 != "contain") \|\| (\$verb3 != "contains");
                \$flex = \$op."base:flexible";
                /* Certain types of items demand a capacity less than 1.0 */
                if (\$(test-physical-capacity-cap)) \{
                    \$capacitytoobigerr = \$rcapacity \>= 1.0;
                    \$capacitytoobigwarn = !\$capacitytoobigerr \&\& \$rcapacity \>= 0.5;
                    \$autokay \&= !\$capacitytoobigerr;
                \}
            \}
            \$disp = (!\$(test-physical-ban-capacity) \|\| !\$scapacity)
                \&\&
                    (!\$(test-physical-mass-1) \|\| (Int(\$rmass*10.0) == 10));
            if (\$(test-physical-ban-capacity)) \{
                if (\$scapacity) \{
                    \$autokay = FALSE;
                    \$maynothavecapacityerr = TRUE;
                \}
            \}
            if (\$(test-physical-mass-1)) \{
                /* We do Int(x*10.0) to avoid getting a 'nuh-uh, 1.000000000000000001 ain't 1.0!' response from the system. */
                if ((Int(\$rmass*10.0) != 10)) \{
                    \$autokay = FALSE;
                    \$mass1err = TRUE;
                \}
            \}]
            \{? \| \$(maynothavecapacityerr) \|
                \<div class="serious"\>Objects of this type may not have capacity.\</div\>
            \|\}
            \{? \| \$(mass1err) \|
                \<div class="serious"\>\{? \| \$(test-physical-mass-1-reasoning) \|\$(test-physical-mass-1-reasoning)\|Objects of this type must have mass set to exactly 1.0, no more, no less.\}\</div\>
            \|\}
            \{? \| \$(disp) \|
                \{? \| \$[\$(test-physical-mass-1) \|\| \$(test-physical-ban-capacity)] \|
                    \<div class="info"\>
                        \<em\>There are rules for this object type (\$(test-obtype)):\</em\>
                        \<ul\>
                            \{? \| \$(test-physical-ban-capacity) \|\<li\>Object does not have capacity \\\&mdash; good.\</li\>\|\}
                            \{? \| \$(test-physical-mass-1) \|\<li\>Object's mass is 1.0 \\\&mdash; good.\</li\>\|\}
                        \</ul\>
                    \</div\>
                \|\}
            \|\}
            \{? \| \$[\$disp \&\& !\$(test-physical-spawn-style)] \|
            \<div class="italic"\>Check to see if the object has the correct mass\{? \| \$(scapacity) \|, density and capacity\| and density\}.\</div\>
            \<b\>The following table displays the various values in "human readable" format, both in english and metric system:\</b\>
            \<br/\>
            \<table cellpadding="2" cellpadding="2" style="margin-left: 7%; font-size: 10pt; border: solid #555 1px;"\>
                \<tr\>\<td/\>\<td\>\<b\>Metric:\</b\>\</td\>\<td\>\<b\>English:\</b\>\</td\>\</tr\>
                \<tr\>
                    \<td\>\<b\>Weight (Mass)\</b\>\</td\>
                    \{? \| \$(test-physical-mass-1) \|
                        \<td colspan="2"\>\<em\>defined at spawn time\</em\>\</td\>
                    \|
                        \<td\>\$[shared::calc_weights(\$weight: \$rmass, \$convention: "metric")]\</td\>
                        \<td\>\$[shared::calc_weights(\$weight: \$rmass, \$convention: "english")]\</td\>
                    \}
                \</tr\>
                \{? \| \$(test-physical-mass-1) \|
                    \\\<!-- no volume message for forced mass 1.0 objects --\\\>
                \|
                    \<tr\>
                        \<td\>\<b\>Collapsed, empty volume\</b\>\</td\>
                        \<td\>\$[shared::calc_capacities(\$capacity: \$volume, \$convention: "metric")]\</td\>
                        \<td\>\$[shared::calc_capacities(\$capacity: \$volume, \$convention: "english")]\</td\>
                    \</tr\>
                    \\\<!-- deprecated: \<b\>It has a volume of \$(volume) cubic decimeters (\$(feet3) cubic feet, or \$(gallons) gallons).\</b\> --\\\>
                \}
                \{? \| \$(rcapacity) \|
                    \<tr\>
                        \<td\>\<b\>Capacity\</b\>\</td\>
                        \<td\>\$[shared::calc_capacities(\$capacity: \$rcapacity, \$convention: "metric")]\</td\>
                        \<td\>\$[shared::calc_capacities(\$capacity: \$rcapacity, \$convention: "english")]\</td\>
                    \</tr\>
                \|\}
            \</table\>
            \<sbr/\>
            \<b\>This object has the...\</b\>
            \<ul\>
                \{? \| \$(test-physical-mass-1) \|
                    \\\<!-- no examples for forced mass 1.0 items --\\\>
                \|
                    \<li\>... mass of \<span class="warn"\>\$(smass)\</span\>, and it is related by reference as such:\<ul\>\<li\>\<span class="warn"\>\$(refmass)\</span\>\</li\>\</ul\> (\<a href="https://troll.skotos.net/twiki/bin/view/Builders/MassValues"\>more information\</a\>);\</li\>
                \}
                \<li\>... density of \<span class="warn"\>\$(sdensity)\</span\>, and it is related by reference as such:\<ul\>\<li\>\<span class="warn"\>\$(refdensity)\</span\>\</li\>\</ul\> (\<a href="https://twiki.skotos.net/twiki/bin/view/Builders/DensityValues"\>more information\</a\>);\</li\>
                \{? \| \$(scapacity) \| \<li\>... capacity of \<span class="warn"\>\$(scapacity)\</span\>, and it is related by reference as such:\<ul\>\<li\>\<span class="warn"\>\$(refcapacity)\</span\>\</li\>\</ul\> (\<a href="https://twiki.skotos.net/twiki/bin/view/Builders/ContainerValues"\>more information\</a\>)\</li\>\|\}
            \</ul\>
            \{? \| \$(capacitydtmwarn) \|\<span class="warn"\>The object's capacity is close to the volume of the object, which tends to be wrong.\</span\>\<sbr/\>\|\}
            \{? \| \$(capacitytoobigerr) \|\<div class="warn"\>This object is clothing, but its capacity is over one cubic meter, which is way too high.\</div\>\|\}
            \{? \| \$(capacitytoobigwarn) \|\<div class="serious"\>This object is clothing, and its capacity is over a half cubic meter, which is a little large (possible, but not very common).\</div\>\|\}
            \{? \| \$(capacitytoosmall) \|\<div class="serious"\>This object has capacity, but the capacity seems a little low (less than 10% of the object's compacted volume).\</div\>\|\}
            \{? \| \$(test-physical-mass-1) \|
                \\\<!-- we don't warn about density/mass being 1.0, or about whether the object would float or sink, when there is a forced mass 1.0 --\\\>
            \|
                \{? \| \$[\$rdensity == 1.0] \|\<span class="warn"\>The density of this object is 1.0\</span\>\<sbr/\>\|\}
                \{? \| \$[\$rmass == 1.0 \&\& \$rdensity == 1.0] \|\<span class="warn"\>The mass and density of this object are both 1.0.\</span\>\<sbr/\>\|\}
                \<b\>It would \{? \| \$[\$op."base:intrinsicdensity" \< 1.0] \|float\|sink\}.\</b\>\<sbr/\>
            \}
            \|\}
            \{? \| \$(diverges) \|\<div class="serious"\>This object is not using the standard verb2/verb3 values for container descriptions; the standard is "contain"/"contains"; the object is using "\$(verb2)"/"\$(verb3)".
            \<br/\>
            E.g. \$[Describe(\$op)]. \{? \| \$(verb3) \|It \$(verb3) some fluff.\|You see some fluff here.\}
            \</div\>\|\}
            \{? \| \$(flex) \|\<div class="serious"\>The object is flexible. Flexible means the object is like a plastic bag (it can be squished together so it takes less space), as opposed to a wooden trunk (which, unsurprisingly perhaps, can't be squished together to take less space).\</div\>\|\}
            \<div class="italic"\>Check the link in the Woe-View if you are unsure about valid bulk values.\</div\>
            \$[\$detail = nil; \$element = "base:bulk";]
            \<insert page="/Dev/View.sam"/\>
            \{? \| \$(disp) \|
            \$[\$element = "base:container";]
            \<div class="italic"\>Capacity should be 'nothing' unless this object can contain stuff. Exceptions exist: when an object is a parent of objects which may be containers, the object should have a capacity and maxweight of 1. Then again, you shouldn't be proofing quasi-objects like UrClothingPair and the like.\</div\>
            \<insert page="/Dev/View.sam"/\>
            \<sbr/\>
            \{? \| \$(test-physical-spawn-style) \|
                \\\<!-- objects of this type cannot be reference objects, since they require mass/density = 1.0 --\\\>
            \|
                \{? \| \$(object.sys:shared:reference-object) \|
                    \<div class="info"\>
                    This is a reference object, which has been confirmed by \$(object.sys:shared:reference-object-by) that the physical properties (weight, density, etc.) are correct, and thus it is used as a reference and displayed in examples for other objects.
                \<zact udat="\$(UDat.name)" obj="\$(obj)"\>Click here\<action\>\$[Obj(\$obj)."sys:shared:reference-object" = nil;]\<redirect propob="\$(this)" prop="index" ob="\$(obj)"/\>\</action\>\</zact\> if you believe this object's values are incorrect.
                    \</div\>
                \|
                    \<div class="info"\>
                    Optional and extra-credit: If you have weighed, in real life, an object of precisely this kind, and confirmed that the physical properties (weight, density, etc.) are all correct, then you can mark this object as a reference object, which means the proof tool will display it in examples for other objects. This is, of course, optional. \<zact udat="\$(UDat.name)" obj="\$(obj)"\>Click here\<action\>\$[Obj(\$obj)."sys:shared:reference-object" = TRUE;Obj(\$obj)."sys:shared:reference-object-by" = \$udat;]\<redirect propob="\$(this)" prop="index" ob="\$(obj)"/\>\</action\>\</zact\> if you've confirmed this object's physical properties by weighing an object in real life.
                    \</div\>
                \}
            \}
            \|\}
            \<br/\>
            \{? \| \$(autokay) \|
                \<zact aspect="physicals" udat="\$(UDat.name)" obj="\$(obj)"\>Aye, physical properties make sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:vessels_descriptions">
         X[S] \\\<!---
Food/drink vessels have special descriptions, namely 'type'.
---\\\>
\$[/* */
int i;
string desc, s;
mixed v;

\$autokay = TRUE;

\$detail = "default";
\$dref = \$object;
\$aspect = "vessel-descriptions";

\$description_type = (\{ "brief", "examine", "look", "type" \});
\$description_types = sizeof(\$description_type);

\$description_required = ([ "type" : 1 ]);

\$dtsum = "";
\$descs = (\{ \});
\$nonlocals = ([ ]);
\$uniques = 0;
for (i = 0; i \< \$description_types; i++) \{
    desc = \$description_type[i];
    catch(SetVar("dt" + desc, Get(\$dref, "detail:description:" + desc)));
    catch(\$haslocal = Get(\$dref, "detail:description:" + desc + ":local"));

    v = GetVar("dt" + desc);
    if (!\$haslocal \&\& v) \{
        object o;
        mixed x;

        x = nil;
        o = \$object;
        while (o \&\& !x) \{
            o = o."core:ur:parent";
            if (o) catch(x = Get(o, "detail:description:" + desc + ":local"));
        \}
        if (!o) \{
            catch(error("In proofer, while attempting to locate the inheritance for " + dump_value(\$object) + "'s default detail (vessels descriptions), there was a non-local description (" + dump_value(desc) + ") whose origin could not be determined."));
        \}
        \$nonlocals[desc] = o;
    \}
    SetVar("dts" + desc, typeof(v) == T_OBJECT ? dump_value(v) : Str(v));
    s = GetVar("dts" + desc);
    \$dtsum += " " + s;
    \$autokay \&= !\$description_required[i] \|\| s != "";
    if (v) \{
        \$descs += (\{ desc \});
        if (\$haslocal) \$uniques++;
    \}
\}

\$seecap = ([  ]);
\$dotissuesfor = ([ "brief":1, "type":1 ]);]
\{? \| \$[Get(\$object, "sys:shared:proof:" + \$aspect)] \|
    \<div class="bigd"\>\<b\>Are the vessel-specific descriptions in the object sensible?\</b\>\</div\>
    \$[\$desc = "The vessel descriptions were proofed";]\$(this.sam:message-sensible)
\|
    \<div class="big"\>\<b\>Are the vessel-specific descriptions in the object sensible?\</b\>\</div\>
    \$[\$object.unproofed++;]
    \<div class="italic"\>There are \$[desc_cardinal(sizeof(\$descs))] vessel-specific descriptions.\</div\>
    \<ul\>
        \<for var="d" val="\$(descs)"\>
            \<li\>
                \<b\>\$[capitalize(\$d)]\{? \| \$[\$nonlocals[\$d]] \| \$[\$nlref = name(\$nonlocals[\$d]);] [\<a title="Hop to \$(nlref)" href="/Dev/View.sam?obj=\$(nlref)\\\&homedisplay=1\\\&homeurl=\$(ehomeurl)\\\&hometitle=\$(hometitle)"\>inherited\</a\>]\|\}:\</b\>
                \$[::parse(\$sam: GetVar("dts" + \$d), \$filter: (\{ \}), \$capcheck: \$seecap[\$d], \$endindot: !\$dotissuesfor[\$d], \$dotissue: \$dotissuesfor[\$d])]
            \</li\>
        \</for\>
    \</ul\>
    \\\<p\\\>
        \<a href="Edit?ob=\$(obj)\\\&detail=\$(detail)"\>Modify these descriptions\</a\>
    \\\</p\\\>
    \{? \| \$(autokay) \|
        \<zact aspect="\$(aspect)" obj="\$(obj)"\>Aye, vessel descriptions make sense!\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
    \|
        \$(msg_there_were_errors)
    \}
\}
      </Core:Property>
      <Core:Property property="test:woe_notes">
         X[S] \\\<!---
            Woe Notes
        ---\\\>
        \{? \| \$(object.sys:shared:proof:woe-notes) \|
            \<div class="bigd"\>\<b\>Woe Notes\</b\>\</div\>
            \$[\$aspect = "woe-notes";\$desc = "Woe notes were proofed";]\$(this.sam:message-sensible)
            \$[/*\<sbr/\>
            \<div class="info"\>
                \$[replace_strings(\$infonote, "\\n", "\<br/\>")]
            \</div\>*/"";]
        \|
            \<div class="big"\>\<b\>Woe Notes\</b\>\</div\>
            \$[\$autokay = TRUE;
            \$object.unproofed++;]
            \<div class="italic"\>\{? \| \$(object.prooflimited) \|The +objectinfo note for morphs does not have the same requirements as the one for "real" objects. An example of a morph +objectinfo note goes:\<br/\>
            \$[\$x = Get(this, "example:mold:" + \$glob_obtype); return \$x ? \$x : "\<div class=\\"serious\\"\>No mold example property found for \\"" + \$glob_obtype + "\\"!\</div\>"]
            \|
            The +objectinfo note should at minimum contain a little about what makes this object unique, any non-standard traits it supports, any any special merry scripts or reactions. Important attribution information should be listed (which could include who originally made it, from what game is it derived, and what object it was originally derived from).\<br/\>
            \$[\$x = Get(this, "example:regular:" + \$glob_obtype); return \$x ? \$x : "\<div class=\\"serious\\"\>No regular example property found for \\"" + \$glob_obtype + "\\"!\</div\>"]
            \}
            \</div\>
            \$[\$autokay \&= \$infonote \&\& !\$proofnotes;]
        \<sbr/\>
        \<div style="display: none; border: solid #000 2px; background: #eee; padding: 3px; position: absolute; left: 10%;" id="revdiv"\>
            \<center\>\<b\>Revisions:\</b\>\</center\>
            \$[int i, ix;
            mixed rev, *revtable;
            rev = Arr(\$op.revisions);
            ix = sizeof(rev);
            revtable = (\{ (\{ "Date", "Account", "Action" \}) \});
            for (i = 0; i+2 \< ix; i += 3) \{
                revtable += (\{ (\{ ctime(rev[i]), (typeof(rev[i+1]) == T_STRING ? capitalize(rev[i+1]) : "[" + ascii_typeof(rev[i+1]) + "]"), rev[i+2] \}) \});
            \}
            return html::table(\$content: revtable, \$padding: 3, \$style: "border: solid 1px #555;");]
        \</div\>
        \<sbr/\>
        \<span class="link" onclick="toggle_visible('revdiv');"\>Toggle revisions history.\</span\>
            \<zform infonid="\$(infonid)" ob="\$(ob)"\>
                \<action\>
                    \<z uname="\$(UDat.Name)"\>
                    \$[\$op = Obj(\$ob);
                    if (!\$infonid) \{
                        \$infonid = (\$op."notes:cat:+objectnotes:note:user" = \$uname);
                    \}
                    Set(\$op, "notes:cat:+objectnotes:note:" + \$infonid + ":user", \$uname);
                    Set(\$op, "notes:cat:+objectnotes:note:" + \$infonid + ":text", \$newnote);]
                    \</z\>
                    \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                \</action\>
                \{? \| \$(infonote) \|\|\<div class="error"\>No +objectinfo note is currently in place.\</div\>\}
                \<textarea name="newnote" style="width: 100%; border-width: 1px;" rows="5"\>\$(infonote)\</textarea\>
                \<sbr/\>
                \<input type="submit" class="submit" value="Update +objectinfo note"/\>
            \</zform\>
            \{? \| \$[\$content \&\& sizeof(\$content) \> 1] \|
                \<div class="italic"\>There are \$[desc_cardinal(\$tproof)] proofing note\$[\$tproof != 1 ? "s" : ""], and \$[desc_cardinal(\$tother)] other woe note\$[\$tother != 1 ? "s" : ""] in this object. You should resolve any 'Open' proofing notes before 'Closing' them. Delete any other notes that are no longer applicable, or copy info into the +objectinfo note.\</div\>
                \$[html::table(\$padding: 3, \$style: "border: solid 1px #555;")]
            \|
                \<i\>There are no notes in this object.\</i\>
            \}
            \<sbr/\>
            \<zform ob="\$(ob)"\>
                \<action\>
                    \<z uname="\$(UDat.Name)"\>
                    \$[int i;
                    \$op = Obj(\$ob);
                    i = \$op."notes:cat:proofing:note:user" = \$uname;
                    Set(\$op, "notes:cat:proofing:note:" + i + ":text", \$notectt);]
                    \</z\>
                    \<redirect propob="\$(this)" prop="index" ob="\$(ob)"/\>
                \</action\>
                \<input name="notectt" class="field" size="50"/\> \\\| \<input type="submit" class="submit" value="Add Woe Note"/\>
            \</zform\>
            \{? \| \$(autokay) \|
                \<zact aspect="woe-notes" udat="\$(UDat.name)" obj="\$(obj)"\>The +objectinfo note makes sense, and all proofing notes are closed.\<action\>\$(this.sam:action-aspect-proofed)\</action\>\</zact\>
            \|
                \$(msg_there_were_errors)
            \}
        \}
      </Core:Property>
      <Core:Property property="test:woe_objectnote">
         X[S] \\\<!---
            Woe Objectnote (readonly)
        ---\\\>
        \$[::compute_woe_notes();]
        \{? \| \$(infonote) \|
            \<div class="info"\>
                \$[replace_strings(\$infonote, "\\n", "\<br/\>")]
            \</div\>
            \<sbr/\>
        \|\}
        \<div class="info"\>
            This object is an UrChild of \<a href="?ob=\$(father)"\>\$(father)\</a\>.
            \{? \| \$(parentinfonote) \|
                \$[replace_strings(\$parentinfonote, "\\n", "\<br/\>")]
        \|\}
        \</div\>
      </Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1206030300
      </Core:Property>
      <Core:Property property="{sub_rev}">15</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
