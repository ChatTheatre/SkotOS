<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="10" maxweight="100" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="pile"/>
            <Base:SName sname="refuse-pile"/>
            <Base:SName sname="trash-pile"/>
            <Base:SName sname="refusepile"/>
            <Base:SName sname="trashpile"/>
            <Base:SName sname="refuse"/>
            <Base:SName sname="trash"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="piles"/>
            <Base:PName pname="refuse-piles"/>
            <Base:PName pname="trash-piles"/>
            <Base:PName pname="refusepiles"/>
            <Base:PName pname="trashpiles"/>
            <Base:PName pname="refuses"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="refuse"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             refuse pile
          </Base:Description>
          <Base:Description type="look">
             $[Int(this."trash:bigmap-size") < 1000 ? ({ "A small", "A medium-sized", "A large", "A huge", "An enormous" })[Int(this."trash:bigmap-size")/200] : "An enormous"] refuse pile, containing about $[Int(this."trash:bigmap-size") < 100 ? "a hundred" : desc_cardinal(Int(this."trash:bigmap-size") / 100) + " hundred"] items of various kind.<sbr/>
[OOC: You can search the pile or toss things in the pile.]
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trash:contain">
         0
      </Core:Property>
      <Core:Property property="export:trash:destroyer">
         0
      </Core:Property>
      <Core:Property property="export:trash:receive-trigger">
         "receive"
      </Core:Property>
      <Core:Property property="export:trash:taker">1</Core:Property>
      <Core:Property property="merry:inherit:react:place-where">
         \<Lib:trash\>
      </Core:Property>
      <Core:Property property="merry:inherit:react:zthrow-where">
         \<Lib:trash\>
      </Core:Property>
      <Core:Property property="merry:lib:receive">
         X[M] /*
 * D=Receive \$item trigger code.
 *
 * This code is called in the refuse piles to check if something was "launched" into it or if it was added physically.
 * In the former case, a message about it falling from the slide is emitted.
 */
if (\$item."trash:taken-by" != name(this)) \{
    EmitIn(this."base:environment", "Something noisily falls from the slide in the south wall into the refuse pile.");
\}
      </Core:Property>
      <Core:Property property="merry:lib:searching">
         X[M] /*
 * D=Search through a pile.
 */
constant ITEM = \$(bigmap-indice);
int i;
mapping found;

if (\$actor.searching_refuse) \{
    EmitTo(\$actor, "You're already searching through " + Describe(this, nil, nil, 3) + ".");
    return FALSE;
\}

if (!NRefsEqual(\$actor."base:proximity", this)) \{
    Social(\$actor, "move", nil, nil, "to", this);
    \$delay(2, FALSE, "25bf");
\}

EmitTo(\$actor, "You begin to rummage through " + Describe(this, nil, nil, 3) + " in hunt for something of use.");
EmitIn(\$actor."base:environment", Describe(\$actor) + " begins to rummage through " + Describe(this, nil, nil, 3) + " in hunt for something of use.", \$actor);
\$actor.searching_refuse = TRUE;
\$delay(15 + random(15), FALSE, "ec1d");
\$actor.searching_refuse = nil;

/* Grab 3 random objects, if found, and give to actor. */
trash::bigmap_set(\$bigmap: this."trash:items");

found = ([ ]);
for (i = 0; i \< 3; i++) \{
    if (trash::bigmap_get_random() \< 1 \|\| typeof(ITEM) != T_OBJECT) \{
        i = 3;
    \} else \{
        if (!found[ITEM] \&\& trash::validate(\$item: ITEM)) \{
            trash::restore(\$what: ITEM);
            found += ([ ITEM : 1]);
            if ((ITEM."base:environment" = \$actor) != GENERIC_SUCCESS) \{
                ITEM."base:environment" = \$actor."base:environment";
            \}
        \}
    \}
\}

if (map_sizeof(found)) \{
    this."trash:bigmap-size" -= map_sizeof(found);
    EmitTo(\$actor, "You find " + Describe(map_indices(found), nil, nil, STYLE_NONPOSS) + "!");
    EmitIn(\$actor."base:environment", Describe(\$actor) + " finds " + Describe(map_indices(found), nil, nil, STYLE_NONPOSS) + "!", \$actor);
\} else \{
    EmitTo(\$actor, "You find nothing.");
    EmitIn(\$actor."base:environment", Describe(\$actor) + " finds nothing.", \$actor);
\}
      </Core:Property>
      <Core:Property property="merry:lib:tick">
         X[M] /*
 * D=Tick tick.
 */

while (TRUE) \{

    \$emit = \$"\{\{A\{ sticky black\| black\| sticky\|n\} ichor\|Some \{sticky \|\}\{black \|\}\{slime\|sludge\}\} \{slowly \|\}\{drips\|dribbles\|oozes\} out \{from\|of\|from the bottom of\} the \{refuse\|refuse pile\|pile\|pile of refuse\}\|A \{smell\|stench\|stink\} rises from the refuse\{\{ pile\|\} and assaults \{you\|your senses\}\|\}\|\{Some of the refuse\|Bits of trash\} in the pile \{falls\|slips\|slides\|tumbles\} \{down\|down the side\|\} \{as the pile shifts and resettles\|in a small avalanche\}\{, \{bearing\|offering\|carrying\} \{to you \|\}a \{fresh\|new\} stench\|\}\}.";

    if (\$once)
        return \$emit;

    \$delay(300 + random(180), FALSE, "70b3");

    /* stop emiting if this object is in the nil */
    if (!this."base:environment") \{
        return FALSE;
    \}

    /* stop emitting if there are already delay()s pending in this object */
    if (sizeof(this."core:delays")) \{
        return FALSE;
    \}

    EmitIn(this."base:environment", UnSAM(\$emit));
\}
      </Core:Property>
      <Core:Property property="merry:react:search-dob">
         X[M] /*
 * D=Search through a pile.
 */
return ::searching();
      </Core:Property>
      <Core:Property property="merry:react:search-iob">
         X[M] /*
 * D=Search through a pile.
 */
return ::searching();
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1121720965, "zwoc", "E", 1121721043, "zwoc", "E", 1121721882, "zwoc", "P", 1121721897, "zwoc", "P", 1121722192, "zwoc", "P", 1121722317, "zwoc", "P", 1121726574, "zwoc", "P", 1121726694, "zwoc", "X", 1121728730, "zwoc", "P", 1121728770, "zwoc", "S", 1121728869, "zwoc", "P", 1121728907, "zwoc", "P", 1121728948, "zwoc", "P", 1121728979, "zwoc", "P", 1121728984, "zwoc", "P", 1121729181, "zwoc", "P", 1121805935, "zwoc", "E", 1121895342, "zwoc", "E", 1121895705, "zwoc", "E", 1121899179, "zwoc", "E", 1122678053, "christophera", "X", 1122685203, "zwoc", "P", 1122756573, "zwoc", "E", 1124109118, "zwoc", "P", 1124109349, "zwoc", "P", 1124109357, "zwoc", "P", 1124109538, "zwoc", "P", 1125604470, "zwoc", "P" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="volition">0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1121899095" state="Open" user="zwoc">
           The example refuse pile. This object is used among other things in Castle Marrach as the main target for trash tossed in the refuse chute(s) and/or handed to servants. The refuse pile describes how much refuse is in it at the moment, it can be searched (search pile) and people can toss things into it.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
