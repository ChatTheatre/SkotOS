<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="15"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="false" inside="true" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="chute"/>
            <Base:SName sname="opening"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="chutes"/>
            <Base:PName pname="openings"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="garbage"/>
          <Base:Adjective adjective="open"/>
          <Base:Adjective adjective="refuse"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the refuse chute
          </Base:Description>
          <Base:Description type="examine">
             A crude metal chute built into the stone wall. Anything put into it rapidly slides away into darkness.
          </Base:Description>
          <Base:Description type="look">
             A metal chute open through the stone of the wall. A small sign next to it reads 'REFUSE ONLY: Servants will burn discarded items in the furnace.'
          </Base:Description>
          <Base:Description type="writing">
             REFUSE ONLY: Servants will burn discarded items in the furnace.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="sign" prime="true" def="true" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="true" on="false" inside="false" near="true" over="true" behind="false" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="sign"/>
            <Base:SName sname="writing"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="writings"/>
            <Base:PName pname="signs"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="chute"/>
          <Base:Adjective adjective="refuse"/>
          <Base:Adjective adjective="small"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the small sign next to the refuse chute
          </Base:Description>
          <Base:Description type="look">
             The small sign next to the refuse chute reads - 'REFUSE ONLY: Servants will burn discarded items in the furnace.'
          </Base:Description>
          <Base:Description type="pnames">
             writings
          </Base:Description>
          <Base:Description type="writing">
             REFUSE ONLY: Servants will burn discarded items in the furnace.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Shared:sys:trash:chute-garbage
 Maintainer:    LSP Geist
 Email:         geist@marrach.skotos.net
 Revision:      1.5
 Generated:     Sun Sep 28 02:53:04 2008 on Castle Marrach
 Last revision: Sat Jul 19 11:19:03 2008 by tomdowd (P)



(Do not modify #list# -- it is automatically constructed.)


----------------------------------------------------------------------------------------------------------------
 lib:placing             (M) Garbage chute example, derived from StoryPlotter Geist's garbage chute in Castle
                             Marrach.
 react-post:place-where  (M) Garbage chute example, derived from StoryPlotter Geist's garbage chute in Castle
                             Marrach.
 react-post:zthrow-where (M) Garbage chute example, derived from StoryPlotter Geist's garbage chute in Castle
                             Marrach.
----------------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="export:trash:contain">
         0
      </Core:Property>
      <Core:Property property="export:trash:destroyer">
         0
      </Core:Property>
      <Core:Property property="export:trash:expire-time">
         0
      </Core:Property>
      <Core:Property property="export:trash:taker">1</Core:Property>
      <Core:Property property="merry:lib:placing">
         X[M] /*
 * D=Garbage chute example, derived from StoryPlotter Geist's garbage chute in Castle Marrach.
 *
 * Items put in the chute will expire immediately. The master chute does not have the "trash:send" reference set,
 * simply because there will be different refuse piles in which items put in the chute will end up.
 */
constant DESC_STYLE = STYLE_NONPOSS \| STYLE_DEFINITE;
int i, ix;

if(\$what)
   \{
   ix = sizeof(\$what);
   \}
   else
   \{
   return FALSE;
   \}

/* Check if chute accepts more items. */
if (this."trash:size-cap") \{
    /* Chutes always redirect somewhere. */
    int size;
    size = Int(this."trash:send"."trash:bigmap-size");
    if (size \> this."trash:size-cap") \{
        /* Put items on floor. */
        for (i = 0; i \< ix; i++) \{
            NRefOb(\$what[i])."base:environment" = this."base:environment";
            NRefOb(\$what[i])."base:proximity" = this;
        \}
        /* Emit about it. */
        EmitIn(\$actor."base:environment", Describe(this, nil, nil, 3) + " is full! " + capitalize(Describe(\$what, nil, nil, 3)) + " fall" + (sizeof(\$what) \> 1 ? "" : "s") + " to the floor nearby.");
    \}
\}

/* Check which items were moved successfully. */
for (i = 0; i \< ix; i++) \{
    if (NRefOb(\$what[i])."base:environment" != this)
        \$what[i] = nil;
\}
\$what -= (\{ nil \});

if (sizeof(\$what)) \{
    /* Signal to trash system to discard items. */
    trash::discard(\$taker: this);

    /* Emit the message. */
    EmitTo(\$actor, "You watch " + Describe(\$what, nil, nil, DESC_STYLE) + " slide away into darkness.");
    EmitIn(\$actor."base:environment", Describe(\$actor)+" watches " + Describe(\$what, nil, nil, DESC_STYLE) + " slide away into darkness.", \$actor);
\}
      </Core:Property>
      <Core:Property property="merry:react-post:place-where">
         X[M] /*
 * D=Garbage chute example, derived from StoryPlotter Geist's garbage chute in Castle Marrach.
 *
 * Items put in the chute will expire immediately. The master chute does not have the "trash:send" reference set,
 * simply because there will be different refuse piles in which items put in the chute will end up.
 */
::placing();
      </Core:Property>
      <Core:Property property="merry:react-post:zthrow-where">
         X[M] /*
 * D=Garbage chute example, derived from StoryPlotter Geist's garbage chute in Castle Marrach.
 *
 * Items put in the chute will expire immediately. The master chute does not have the "trash:send" reference set,
 * simply because there will be different refuse piles in which items put in the chute will end up.
 */
::placing();
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1107207825, "sorcha", "E", 1119816787, "tomdowd", "P", 1119817029, "tomdowd", "K", 1119817309, "tomdowd", "E", 1119817631, "tomdowd", "P", 1119817713, "tomdowd", "P", 1119818085, "tomdowd", "K", 1119818259, "tomdowd", "E", 1119818295, "tomdowd", "E", 1119818489, "tomdowd", "P", 1119818735, "tomdowd", "P", 1119818791, "tomdowd", "P", 1119818827, "tomdowd", "P", 1119818887, "tomdowd", "P", 1119819163, "tomdowd", "P", 1119819209, "tomdowd", "P", 1119819290, "tomdowd", "P", 1119819400, "tomdowd", "P", 1119819466, "tomdowd", "P", 1119819569, "tomdowd", "P", 1119819618, "tomdowd", "P", 1119819683, "tomdowd", "P", 1119819777, "tomdowd", "P", 1119819801, "tomdowd", "P", 1119819844, "tomdowd", "P", 1119819864, "tomdowd", "P", 1119819908, "tomdowd", "P", 1119819962, "tomdowd", "P", 1119820101, "tomdowd", "P", 1119820144, "tomdowd", "P", 1119820212, "tomdowd", "P", 1119820280, "tomdowd", "P", 1119820291, "tomdowd", "P", 1119820362, "tomdowd", "P", 1119820583, "tomdowd", "P", 1119820620, "tomdowd", "P", 1119820670, "tomdowd", "P", 1119821076, "tomdowd", "P", 1119821201, "tomdowd", "P", 1119821599, "tomdowd", "P", 1119821877, "tomdowd", "P", 1119821887, "tomdowd", "P", 1119821942, "tomdowd", "P", 1119822047, "tomdowd", "P", 1119822174, "tomdowd", "P", 1119822323, "tomdowd", "P", 1119822345, "tomdowd", "P", 1119822461, "tomdowd", "P", 1119822529, "tomdowd", "P", 1119822587, "tomdowd", "P", 1119822658, "tomdowd", "P", 1119822704, "tomdowd", "P", 1119822815, "tomdowd", "P", 1119822874, "tomdowd", "P", 1119822976, "tomdowd", "P", 1119823357, "tomdowd", "P", 1119823381, "tomdowd", "P", 1119823428, "tomdowd", "P", 1119823447, "tomdowd", "P", 1119823499, "tomdowd", "P", 1119823565, "tomdowd", "K", 1119823653, "tomdowd", "K", 1119823697, "tomdowd", "E", 1119823713, "tomdowd", "E", 1119823787, "tomdowd", "E", 1119826866, "tomdowd", "P", 1119826956, "tomdowd", "P", 1119827001, "tomdowd", "E", 1119836307, "tomdowd", "K", 1119836381, "tomdowd", "P", 1119909261, "christophera", "E", 1121794390, "zwoc", "P", 1121794451, "zwoc", "P", 1121794467, "zwoc", "P", 1121794562, "zwoc", "X", 1121794718, "zwoc", "P", 1121806804, "zwoc", "E", 1121808765, "zwoc", "P", 1121899362, "zwoc", "E", 1122847325, "zwoc", "P", 1122847341, "zwoc", "P", 1124759255, "zwoc", "E", 1131992375, "???", "P", 1131992504, "???", "P", 1131992525, "???", "P", 1131992809, "???", "P", 1216480743, "tomdowd", "P", 1223120539, "???", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1223120539
      </Core:Property>
      <Core:Property property="sys:sync:proposing-revision">
         1216480743
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="{author}">"LSP Geist"</Core:Property>
      <Core:Property property="{email}">
         "geist@marrach.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1216480743
      </Core:Property>
      <Core:Property property="{sub_rev}">5</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1121899272" state="Open" user="zwoc">
           The example garbage chute, derived from LSP Geist's Marrach chute. The chute is mounted in a wall someplace, and when something is put into it, the item falls through into some appropriate object. The "trash:send" property must be set to the object reference of some appropriate spawn (for instance a refuse pile) or the chute itself will chuck the trash into the no-site zone.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
