<object clone="/base/obj/thing" owner="Reverse">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Local:food/drinks:UrConsumable)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="true" tight="true" capacity="1" maxweight="1" verb2="contain" verb3="contains"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="true" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="true"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames/>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? | $[!sizeof(this."base:inventory")] |empty |}$(this.detail:description:type){? | $[sizeof(this."base:inventory") && this."base:inventory"[0]."sys:shared:consumable:must-be-contained"] | of $(this.base:inventory.0.detail:description:name)|}
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             {? | $(this.base:inventory.size) |$(this.base:inventory.0.detail:description:scent)|{? | $(this.sys:shared:drink:last-content) |It has the lingering scent of $(this.sys:shared:consume:last-content.detail:description:name).|It has no smell.}}
          </Base:Description>
          <Base:Description type="react-post:sense/smell-iob">
             {? | $(this.base:inventory.size) |$(this.base:inventory.0.detail:description:scent)|{? | $(this.sys:shared:drink:last-content) |It has the lingering scent of $(this.sys:shared:consume:last-content.detail:description:name).|It has no smell.}}
          </Base:Description>
          <Base:Description type="type">vessel</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:     Shared:food/drinks:UrVessel
 Maintainer: Kalle Alm
 Email:      kalle@mortalis.skotos.net
 Rev:        1.1
 Generated:  Sun Jan 13 03:14:38 2008
 Last rev.:  Thu Jan 10 07:58:18 2008 by ??? (R)



(Do not modify #list#. Automatically constructed property.)


-----
-----

*/
      </Core:Property>
      <Core:Property property="export:potable:noslay">
         1
      </Core:Property>
      <Core:Property property="export:sys:proofing:auto:name">
         "food/drinks[vessel]"
      </Core:Property>
      <Core:Property property="export:sys:shared:consumable:vessel">
         1
      </Core:Property>
      <Core:Property property="export:sys:shared:food/drink:vessel">
         1
      </Core:Property>
      <Core:Property property="merry:lib:proof:autocheck">
         X[M] /*
 * D=Autocheck vessel (consumables) object \$obptr and set the (already stringified) \$xresult appropriately. Additionally set \$xpanes to a list of the tests to run, as a string array.
 */
\{
    int retval;
    string s;
    object ur;

    /*
     * These features exist in the shared consumable system (see UrFoodAndDrink for food/drink-specific properties):
     *     MISCELLANEOUS
     *   - sys:shared:consume:closed (01) - is the vessel closed? i.e. can someone empty the vessel without holding it?
     *   - UrParent should be one of Shared:food/drinks:sizes:**
     *     DESCRIPTIONS
     *   - like normal! should be NO 'name', 'scent', 'taste' desc types
     *
     * Beyond the above, it functions just like a regular shared item, with traits and such.
     */

    \$xresult = "";

    \$xresult += "\<b\>Does this object have a prime detail, named \\"default\\"?\</b\> ";
    s = NRefDetail(\$obptr);
    retval = FALSE;
    if (!s \|\| s == "") \{
        \$xresult += " no prime detail at all!\\n";
    \} else if (s != "default") \{
        \$xresult += " prime detail name is not \\"default\\", it's \\"" + s + "\\"!\\n";
    \} else \{
        retval = TRUE;
    \}

    if (!retval) return FALSE;

    \$xresult += "check\\n\<b\>Does the prime detail have descriptions of type 'name', 'scent', and/or 'taste'?\</b\> ";
    retval = TRUE;
    if (UnSAM(\$obptr."detail:description:name") != "") \{ retval = FALSE; \$xresult += "it has name; "; \}
    if (UnSAM(\$obptr."detail:description:scent") != "") \{ retval = FALSE; \$xresult += "it has scent; "; \}
    if (UnSAM(\$obptr."detail:description:taste") != "") \{ retval = FALSE; \$xresult += "it has taste; "; \}
    if (!retval) \{
        \$xresult += "someone made a vessel, thinking it was food or a drink! Vessels should NOT have name, scent, or taste!\\n";
        return FALSE;
    \}

    \$xresult += "no; good!\\n\<b\>Does this object inherit from one of the predefined sizes (Shared:food/drinks:sizes:*)?\</b\> ";
    for (ur = \$obptr."core:ur:parent"; ur \&\& sscanf(name(ur), "Shared%sfood/drinks:sizes:%s", s, s) != 2; ur = ur."core:ur:parent");
    if (!ur) \{
        \$xresult += "\<span class='note'\>nope (this is recommended, but not obligatory)\</span\>\\n";
    \} else \{
        \$xresult += "it does\\n";
    \}

    \$xresult += "\<b\>Does this object have an environment? It shouldn't.\</b\> ";
    if (\$obptr."base:environment" == nil) \$xresult += "check\\n"; else \{
        \$xresult += "it does!\\n";
        return FALSE;
    \}
    \$xresult += "\<b\>Is this item potable and edible (it should be both)?\</b\> ";
    if (!\$obptr."base:edible") \{
        \$xresult += "it isn't edible -- if the vessel ends up containing food, people won't be able to type 'eat my [vessel]'!!\\n";
        return FALSE;
    \}
    if (!\$obptr."base:potable") \{
        \$xresult += "it isn't potable -- if the vessel ends up containing a liquid, people won't be able to type 'drink my [vessel]'!!\\n";
        return FALSE;
    \}
    \$xresult += "check\\n";
    \$xresult += "\<b\>Default stance...\</b\> ";
    if (\$obptr."base:defaultstance" != 0) \{
        \$stances = (\{ "none", "crouch", "kneel", "lie", "sit", "stand", "hang", "float" \});
        \$xresult += "\<span style='color: yellow;'\>" + \$stances[\$obptr."base:defaultstance"] + "\</span\>\\n";
    \} else \{
        \$xresult += "none\\n";
    \}
    \$xresult += "\<b\>Gender:\</b\> ";
    if (\$obptr."base:gender") \{
        \$xresult += (\{ nil, "male", "female" \})[\$obptr."base:gender"] + "!\\n";
        return FALSE;
    \}
    \$xresult += "neutral\\n\<b\>No volition:\</b\> ";
    if (\$obptr."base:volition") \{
        \$xresult += "has volition!\\n";
        return FALSE;
    \}
    \$xresult += "check\\n\<b\>Not a weapon:\</b\> ";
    if (\$obptr."base:weapon") \{
        \$xresult += "is a weapon!\\n";
        return FALSE;
    \}
    \$xresult += "check\\n";
    \$auto_details = TRUE;

    /*
     * Create the list of panes to use in this proofing.
     */
    \$xpanes =
        (\{ "vessels_descriptions", "physicals", "all_details" \});

    return TRUE;
\}
      </Core:Property>
      <Core:Property property="merry:react-post:examine-what">
         X[M] /*
 * D=Describe scent of the contents of an object, when looking at it, if actor is close enough.
 */
\{
    constant DS = (\{ nil, nil, STYLE_NONPOSS \| STYLE_DEFINITE \});
    object p, t, f;

    if (!sizeof(this."base:inventory")) return TRUE;
    f = this."base:inventory"[0];

    if (!f."detail:description:scent") return TRUE;

    t = this."base:holder";
    if (!t) t = this;
    if (t == \$actor) \{
        p = \$actor;
    \} else \{
        for (p = t;
                p \&\&
                p."base:proximity" != \$actor \&\&
                !member(\$actor, p."base:proximates");
             p = (p."base:proximity" ? NRefOb(p."base:proximity") : nil)) \{
            /* if (\$actor."udat:host") EmitTo(\$actor, dump_value(p) + " =\> " + (p ? dump_value(p."base:proximity") : "[isnil]")); */
        \}
    \}

    if (!p) \{
        EmitTo(\$actor, "You are too far away to smell the " + UnSAM(f."detail:description:name") + "'s scent.");
        return TRUE;
    \}
    EmitTo(\$actor, "You can smell the " + UnSAM(f."detail:description:name") + ": " + UnSAM(f."detail:description:scent"));
\}
      </Core:Property>
      <Core:Property property="merry:react-post:look-what">
         X[M] /*
 * D=Describe scent of the contents of an object, when looking at it, if actor is close enough.
 */
\{
    constant DS = (\{ nil, nil, STYLE_NONPOSS \| STYLE_DEFINITE \});
    object p, t, f;

    if (!sizeof(this."base:inventory")) return TRUE;
    f = this."base:inventory"[0];

    if (!f."detail:description:scent") return TRUE;

    t = this."base:holder";
    if (!t) t = this;
    if (t == \$actor) \{
        p = \$actor;
    \} else \{
        for (p = t;
                p \&\&
                p."base:proximity" != \$actor \&\&
                !member(\$actor, p."base:proximates");
             p = (p."base:proximity" ? NRefOb(p."base:proximity") : nil)) \{
            /* if (\$actor."udat:host") EmitTo(\$actor, dump_value(p) + " =\> " + (p ? dump_value(p."base:proximity") : "[isnil]")); */
        \}
    \}

    if (!p) \{
        EmitTo(\$actor, "You are too far away to smell the " + UnSAM(f."detail:description:name") + "'s scent.");
        return TRUE;
    \}
    EmitTo(\$actor, "You can smell the " + UnSAM(f."detail:description:name") + ": " + UnSAM(f."detail:description:scent"));
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1199726900, "zwoc", "S", 1199969898, "???", "R", 1200338076, "zwoc", "E", 1200338192, "zwoc", "E", 1200338203, "zwoc", "E", 1200384616, "???", "R", 1201013119, "zwoc", "S", 1201013128, "zwoc", "S", 1201013179, "zwoc", "EED", 1201013294, "zwoc", "EED", 1201013342, "zwoc", "EED", 1201013552, "zwoc", "EED", 1201013611, "zwoc", "EED", 1201013834, "zwoc", "EED", 1201015307, "zwoc", "EED", 1203945141, "zwoc", "E", 1204561543, "zwoc", "E", 1204561557, "zwoc", "E", 1205164928, "zwoc", "E", 1205164966, "zwoc", "E", 1205235337, "zwoc", "X", 1205235574, "zwoc", "E", 1205235612, "zwoc", "E", 1205235790, "zwoc", "E", 1205236266, "zwoc", "EED", 1205236289, "zwoc", "EED", 1205236758, "zwoc", "EED", 1205236865, "zwoc", "EED", 1205236877, "zwoc", "EED", 1205236885, "zwoc", "EED", 1205236970, "zwoc", "EED", 1205236995, "zwoc", "EED", 1205237008, "zwoc", "EED", 1205237095, "zwoc", "EED", 1205237112, "zwoc", "EED", 1205249949, "zwoc", "X", 1205249983, "zwoc", "EED", 1205250039, "zwoc", "EED", 1205250247, "zwoc", "EED", 1205250383, "zwoc", "EED", 1205250409, "zwoc", "EED", 1205250430, "zwoc", "EED", 1205250435, "zwoc", "EED", 1205250465, "zwoc", "EED", 1205250843, "zwoc", "EED", 1205415875, "zwoc", "E", 1205845047, "zwoc", "EED", 1205845058, "zwoc", "EED", 1223108078, "zwoc", "P", 1223108139, "zwoc", "P", 1223108164, "zwoc", "P", 1223108229, "zwoc", "P", 1223108280, "zwoc", "P", 1223179169, "tonyd", "P", 1223184179, "???", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1223184179
      </Core:Property>
      <Core:Property property="sys:sync:proposing-revision">
         1223179169
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1199969898
      </Core:Property>
      <Core:Property property="{sub_rev}">1</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1204561543" state="Open" user="zwoc">
           This object parents all shared vessels. UrLiquid parents all shared drinks, and UrFood parents all shared foods.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
