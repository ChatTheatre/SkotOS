<object clone="/base/obj/thing" owner="Reverse">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst></Base:DrinkMessageFirst>
      <Base:DrinkMessageThird></Base:DrinkMessageThird>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst></Base:DieMessageFirst>
      <Base:DieMessageThird></Base:DieMessageThird>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="vessel"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="vessels"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             $(this.detail:description:type)
          </Base:Description>
          <Base:Description type="look">
             <describe-props cap="1" target="$(this)" which="detail:description:type"/>.
          </Base:Description>
          <Base:Description type="type">vessel</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:     Shared:food/drinks:UrVessel
 Maintainer: Kalle Alm
 Email:      kalle@mortalis.skotos.net
 Rev:        1.2
 Generated:  Sun Oct  1 03:14:30 2006
 Last rev.:  Wed Aug 23 15:03:13 2006 by zwoc (E)



(Do not modify #list#. Automatically constructed property.)


-----------------------------------------------------------------------------------------------------------------------
 lib:consume                    (M) Relay for shared_drink::consume() which additionally checks if there IS a drink
                                    to drink, and such.
 react-desc:act/drink/all-dob   (M) Attempt to drink it all. This is akin to (max) 10 gulps. If the character wants
                                    to truly empty the drink and it holds more than 10 gulps worth, they'd have to
                                    empty it, not finish it.
 react-desc:act/drink/small-iob (M) Drink 1 unit.
 react-desc:act/drink/std-from  (M) Drink 4 units.
 react-desc:act/drink/std-iob   (M) Drink 4 units.
 react-desc:act/drink/std-what  (M) Drink 4 units.
 react-desc:eat-what            (M) Eat 4 units.
 react-desc:empty-dob           (M) Turn cup upside down and run from mommy. Container/liquid-insensitive (same code
                                    for both liquid and vessel).
 react-desc:gobble-what         (M) Eat it all (or attempt to).
 react-desc:nibble-dob          (M) Eat 1 unit.
 react-desc:nibble-iob          (M) Eat 1 unit.
 react-desc:refill-dob          (M) Refill container from appropriate container in room or in actor's inventory
                                    (e.g. wine glass from held wine bottle).  Container/consumable insensitive.
 react:take                     (M) Prevent somebody from taking a liquid with their hands.
-----------------------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="export:edible:handle-self">
         1
      </Core:Property>
      <Core:Property property="export:potable:noslay">
         1
      </Core:Property>
      <Core:Property property="export:sys:shared:is-shared">
         1
      </Core:Property>
      <Core:Property property="merry:lib:consume">
         X[M] /*
 * D=Relay for shared_consumable::consume() which additionally checks if there IS a consumable to consume, and such. Takes \$style (string) which can be "drinkable" or "edible".
 */
if (!sizeof(this."base:inventory")) \{
    EmitTo(\$actor, Describe(this, nil, nil, STYLE_NONPOSS \| STYLE_DEFINITE) + " is empty.");
    return FALSE;
\}
if (\$style \&\& !Get(this."base:inventory"[0], "sys:shared:consume:" + \$style)) \{
    EmitTo(\$actor, "You can't -- it's not " + \$style + ".");
    return FALSE;
\}
return shared_consumable::consume(\$what: this."base:inventory"[0]);
      </Core:Property>
      <Core:Property property="merry:react-desc:act/drink/all-dob">
         X[M] /*
 * D=Attempt to drink OR EAT (despite the property name) it all. This is akin to (max) 10 gulps. If the character wants to truly empty the drink/food and it holds more than 10 gulps worth, they'd have to empty it, not finish it.
 */
::consume(\$amount: 40);
      </Core:Property>
      <Core:Property property="merry:react-desc:act/drink/small-iob">
         X[M] /*
 * D=Drink 1 unit.
 */
::consume(\$amount: 1, \$style: "drinkable");
      </Core:Property>
      <Core:Property property="merry:react-desc:act/drink/std-from">
         X[M] /*
 * D=Drink 4 units.
 */
::consume(\$amount: 4, \$style: "drinkable");
      </Core:Property>
      <Core:Property property="merry:react-desc:act/drink/std-iob">
         X[M] /*
 * D=Drink 4 units.
 */
::consume(\$amount: 4, \$style: "drinkable");
      </Core:Property>
      <Core:Property property="merry:react-desc:act/drink/std-what">
         X[M] /*
 * D=Drink 4 units.
 */
::consume(\$amount: 4, \$style: "drinkable");
      </Core:Property>
      <Core:Property property="merry:react-desc:eat-what">
         X[M] /*
 * D=Eat 4 units.
 */
::consume(\$amount: 4, \$style: "edible");
      </Core:Property>
      <Core:Property property="merry:react-desc:empty-dob">
         X[M] /*
 * D=Turn cup upside down and run from mommy. Container/liquid-insensitive (same code for both liquid and vessel).
 *
 * Note that the empty code targets appropriately, so we don't have to care about that here.
 */
if (this."sys:shared:consume:closed" \&\& this."base:holder" != \$actor) \{
    EmitTo(\$actor, "You cannot empty " + Describe(this, nil, nil, STYLE_NONPOSS \| STYLE_DEFINITE) + " because it is closed and you are not holding it in your hands.");
    return nil;
\}
shared_consumable::empty(\$what: this);
      </Core:Property>
      <Core:Property property="merry:react-desc:gobble-what">
         X[M] /*
 * D=Eat it all (or attempt to).
 */
::consume(\$amount: 40, \$style: "edible");
      </Core:Property>
      <Core:Property property="merry:react-desc:munch-dob">
         X[M] /*
 * D=Eat 1 unit.
 */
::consume(\$amount: 1, \$style: "edible");
      </Core:Property>
      <Core:Property property="merry:react-desc:munch-iob">
         X[M] /*
 * D=Eat 1 unit.
 */
::consume(\$amount: 1, \$style: "edible");
      </Core:Property>
      <Core:Property property="merry:react-desc:nibble-dob">
         X[M] /*
 * D=Eat 1 unit.
 */
::consume(\$amount: 1, \$style: "edible");
      </Core:Property>
      <Core:Property property="merry:react-desc:nibble-iob">
         X[M] /*
 * D=Eat 1 unit.
 */
::consume(\$amount: 1, \$style: "edible");
      </Core:Property>
      <Core:Property property="merry:react-desc:refill-dob">
         X[M] /*
 * D=Refill container from appropriate container in room or in actor's inventory (e.g. wine glass from held wine bottle).  Container/consumable insensitive.
 */
constant THE = STYLE_DEFINITE \| STYLE_NONPOSS;
object   item, container, refiller, holder;
int      potential;

if (this."sys:shared:consume") \{
    item      = this;
    container = this."base:environment";
\} else \{
    container = this;
    if (sizeof(container."base:inventory")) \{
        item = container."base:inventory"[0]."core:ur:parent";
    \} else \{
        item      = this."sys:shared:consume:last-content";
        potential = TRUE;
    \}
    if (!item \&\& !\$iob) \{
        EmitTo(\$actor, "I'm not sure what " + Describe(container, nil, \$actor) + " contained so I can't actually refill it. Try [ refill " + Describe(container, nil, nil, THE) + " from PLACE ].");
        return FALSE;
    \}
\}
if (item \&\& !item."sys:shared:consumable") \{
    EmitTo(\$actor, "You can't refill " + Describe(item, nil, \$actor) + ".");
    return FALSE;
\}
if (container."sys:shared:consume:closed") \{
    EmitTo(\$actor, Describe(container, nil, \$actor) + " cannot be refilled because it is closed.");
    return FALSE;
\}

if (\$iob) \{
    /* A source was specified. */
    refiller = NRefOb(\$iob[0]);
\} else \{
    refiller = shared_consumable::find_source_for(\$what: item, \$where: \$actor."base:environment");
    if (!refiller) \{
        /* Let's try the actor's inventory then. */
        refiller = shared_consumable::find_source_for(\$what: item, \$where: \$actor);
    \}
    if (!refiller) \{
        EmitTo(\$actor, "There is nothing in here (or in your hands) that can be used to refill " + Describe(container, nil, nil, THE) + ".");
        return FALSE;
    \}
\}

/* Make sure the refiller refills appropriately. */
if (refiller == container) \{
    EmitTo(\$actor, "You could theoretically do that, but it wouldn't be right of you to do so.");
    return FALSE;
\}
if (!sizeof(refiller."base:inventory")) \{
    EmitTo(\$actor, Describe(refiller, nil, nil, THE) + " does not contain anything that can be filled into " + Describe(container, nil, \$actor) + ".");
    return FALSE;
\}
if (item \&\& !potential \&\& refiller."base:inventory"[0]."core:ur:parent" != item) \{
    EmitTo(\$actor, Describe(refiller, nil, nil, THE) + " does not contain " + item."detail:description:name" + ".");
    return FALSE;
\}
holder = refiller."base:holder";
if (holder \&\& holder."base:volition" \&\& holder != \$actor) \{
    if (\$actor."base:proximity" != holder \&\& holder."base:proximity" != \$actor) \{
        EmitTo(\$actor, "You must approach " + Describe(holder) + " in order to do that.");
        return FALSE;
    \}
\}

if (shared_consumable::consumable_transfer(\$from: refiller, \$into: container)) \{
    /* Transfer was successful. */
    EmitTo(\$actor, "You refill " + Describe(container, nil, \$actor) + " from " + Describe(refiller, nil, nil, THE) + "." + (\$emptied ? " " + capitalize(Describe(refiller, nil, nil, THE)) + " is now empty." : ""));
    EmitIn(\$actor."base:environment", Describe(\$actor) + " refills " + Describe(container, \$actor) + " from " + Describe(refiller, \$actor) + "." + (\$emptied ? " " + capitalize(Describe(refiller, nil, nil, THE)) + " is now empty." : ""), \$actor);
\}
      </Core:Property>
      <Core:Property property="merry:react:take">
         X[M] /*
 * D=Prevent somebody from taking a liquid with their hands.
 */
if (!this."sys:shared:consumable:liquid" \&\& !this."sys:shared:consumable:liquid-food") return TRUE;

EmitTo(\$actor, "Try as you might, " + Describe(this, nil, nil, STYLE_DEFINITE) + " evades your attempt to pick it up. It might be because it's " + (this."sys:shared:consumable:liquid" ? "a liquid" : "not very solid") + ", but you're not sure.");
EmitIn(\$actor."base:environment", Describe(\$actor) + " tries to take " + Describe(this, nil, nil, STYLE_NONPOSS \| STYLE_DEFINITE) + " out of " + Describe(this."base:environment", \$actor) + " with " + \$actor."base:possessive" + " bare hands. A failed experiment, obviously.", \$actor);
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1154941017, "zwoc", "E", 1154941061, "zwoc", "E", 1154941381, "zwoc", "E", 1154954469, "zwoc", "EED", 1154954710, "zwoc", "EED", 1154954783, "zwoc", "EED", 1154954807, "zwoc", "EED", 1154955087, "zwoc", "EED", 1154955093, "zwoc", "EED", 1154955121, "zwoc", "EED", 1154956320, "zwoc", "EED", 1154956406, "zwoc", "EED", 1154957612, "zwoc", "EED", 1154957673, "zwoc", "EED", 1154958699, "zwoc", "E", 1154958715, "zwoc", "E", 1154958832, "zwoc", "E", 1154958889, "zwoc", "S", 1154959029, "zwoc", "EED", 1154959055, "zwoc", "EED", 1154959061, "zwoc", "EED", 1154959110, "zwoc", "EED", 1154959151, "zwoc", "EED", 1154959166, "zwoc", "EED", 1154966427, "zwoc", "EED", 1154966685, "zwoc", "E", 1154966713, "zwoc", "E", 1154966767, "zwoc", "E", 1154968745, "zwoc", "EED", 1154970234, "zwoc", "E", 1154970669, "zwoc", "E", 1154970795, "zwoc", "E", 1154970805, "zwoc", "E", 1154973315, "zwoc", "EED", 1154973363, "zwoc", "EED", 1154973754, "zwoc", "EED", 1154973769, "zwoc", "EED", 1154973902, "zwoc", "EED", 1154973976, "zwoc", "EED", 1156177337, "zwoc", "X", 1156177486, "zwoc", "E", 1156178515, "zwoc", "X", 1156178531, "zwoc", "X", 1156178643, "zwoc", "X", 1156178931, "zwoc", "E", 1156178959, "zwoc", "E", 1156235337, "zwoc", "E", 1156237198, "zwoc", "E", 1156239622, "zwoc", "E", 1156239720, "zwoc", "EED", 1156239735, "zwoc", "EED", 1156239751, "zwoc", "EED", 1156239796, "zwoc", "EED", 1156239990, "zwoc", "EED", 1156240001, "zwoc", "EED", 1156240034, "zwoc", "EED", 1156240514, "zwoc", "E", 1156240546, "zwoc", "E", 1156240571, "zwoc", "E", 1156347077, "zwoc", "E", 1156357060, "zwoc", "E", 1156358890, "zwoc", "X", 1156358924, "zwoc", "E", 1156358941, "zwoc", "E", 1156358952, "zwoc", "E", 1156358993, "zwoc", "E", 1156359244, "zwoc", "E", 1156359338, "zwoc", "E", 1156359355, "zwoc", "E", 1156359430, "zwoc", "S", 1156359749, "zwoc", "E", 1156359765, "zwoc", "E", 1156359771, "zwoc", "E", 1156359793, "zwoc", "E", 1161679222, "zwoc", "S", 1199726831, "zwoc", "R", 1199969897, "???", "R", 1199987152, "zwoc", "E", 1199987300, "zwoc", "E", 1199987384, "zwoc", "X", 1199987390, "zwoc", "X", 1199987490, "zwoc", "E", 1199987518, "zwoc", "E", 1200338043, "zwoc", "E", 1201162117, "???", "R", 1204643986, "zwoc", "E", 1204643993, "zwoc", "E", 1204650541, "zwoc", "E", 1204650617, "zwoc", "E", 1204650972, "zwoc", "E", 1204650987, "zwoc", "E", 1204651002, "zwoc", "E", 1204811886, "zwoc", "E", 1205233406, "zwoc", "EED", 1205234437, "zwoc", "E", 1205234509, "zwoc", "E", 1205234546, "zwoc", "E", 1205234827, "zwoc", "E", 1205235396, "zwoc", "E", 1205235491, "zwoc", "E", 1205235563, "zwoc", "E", 1205235565, "zwoc", "E", 1205236685, "zwoc", "E", 1206030491, "zwoc", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1201162117
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1156359793
      </Core:Property>
      <Core:Property property="{sub_rev}">2</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
