<object clone="/base/obj/thing" owner="Reverse">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Local:food/drinks:UrFoodAndDrink)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="true"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="food"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="foods"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">
             piece of $(this.detail:description:name)
          </Base:Description>
          <Base:Description type="look">
             A piece of $[strip(UnSAM(this."detail:description:name"))].
          </Base:Description>
          <Base:Description type="name">food</Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             $(this.detail:description:scent)
          </Base:Description>
          <Base:Description type="react-post:sense/smell-iob">
             $(this.detail:description:scent)
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:     Shared:food/drinks:UrFood
 Maintainer: Kalle Alm
 Email:      kalle@mortalis.skotos.net
 Rev:        1.1
 Generated:  Sun Oct  1 03:06:10 2006
 Last rev.:  Wed Aug 23 15:09:15 2006 by zwoc (E)



(Do not modify #list#. Automatically constructed property.)


------------------------------------------------
 lib:consume (M) Relay for shared_food::eat().
------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="export:sys:shared:consumable:food">
         1
      </Core:Property>
      <Core:Property property="export:sys:shared:consumable:gets-old">
         1
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:edible">
         1
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:emit-actor">
         X[S] You \{? \| \$(take-bite) \|\$(take-bite)\|take a bite of\} \<describe what="\$(what)" looker="\$(actor)"/\>. \$(taste)
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:emit-others">
         X[S] \<describe what="\$(actor)"/\> \{? \| \$(takes-bite) \|\$(takes-bite)\|takes a bite of\} \<describe what="\$(what)" actor="\$(actor)"/\>.
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:finish-actor">
         X[S] You \{eat the rest of\|finish\} \<describe what="\$(what)" looker="\$(actor)"/\>. \$(taste)
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:finish-others">
         X[S] \<describe what="\$(actor)"/\> \{eats the rest of\|finishes\} \<describe what="\$(what)" actor="\$(actor)"/\>.
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:take">
         ([ "bite":"take a bite of", "default":"take a bite of", "munch":"munch on", "nibble":"nibble on", "taste":"taste" ])
      </Core:Property>
      <Core:Property property="export:sys:shared:consume:takes">
         ([ "bite":"takes a bite of", "default":"takes a bite of", "munch":"munches on", "nibble":"nibbles on", "taste":"tastes" ])
      </Core:Property>
      <Core:Property property="export:sys:shared:food">
         1
      </Core:Property>
      <Core:Property property="merry:lib:consume">
         X[M] /*
 * D=Relay for shared_food::eat().
 */
return shared_consumable::consume(\$what: this);
      </Core:Property>
      <Core:Property property="merry:lib:import_kin">
         X[M] /*
 * D=Import kin \$item, meaning a child whose UrParent should be me. In this case that means I am importing food of some kind, e.g. Generic, MGeneric, static, etc.
 */
\{
    if (!\$item) error("missing \$item in call to import_kin()");

    if (\$item."trait:taste" \&\& \$item."trait:look" \&\& \$item."trait:brief") \{
        /* Generic (no specific way of checking unfortunately, so we do some guesswork). */
        return ::import_kin_generic();
    \}

    /* XXX: MGeneric importing is not implemented at this point. */
    if (0) \{
        if (typeof(\$item."alteration:dictionary") == T_MAPPING) \{
            /* MGeneric. */
            return ::import_kin_mgeneric();
        \}
    \}

    /* XXX: Static importing is not implemented at this point. */
    error("static importing of food items is not implemented; only Generic items can be imported at this point");

    /* Static. */
    return ::import_kin_static();
\}
      </Core:Property>
      <Core:Property property="merry:lib:import_kin_generic">
         X[M] /*
 * D=Import Generic object. This function does not take into consideration alterations made to an item. It is not applicable for converting in-game items.
 *
 * Properties and examples
 *
 * Property:          F/D: Example:
 * trait:liquid       D    "cider"
 * trait:superbrief   *    "goblet" (drink);                  "roll" (food)
 * trait:taste        *    "A sweet, fruity flavor." (drink); "A succulent, herb-infused flavor." (food)
 * trait:brief        F    "peacock slice"
 * trait:examine      F    blablabla
 * trait:look         F    blablabla
 * trait:old:brief    F    "moldy herb chicken"
 * trait:old:examine  F    blablabla
 * trait:old:look     F    blablabla
 * trait:old:variant  F    "moldy"    \<-- sname addition, presumably
 * trait:smell        F    "The smell of roasted chicken and herbs fills your nose."
 *
 * (since this is FOOD, all items marked D above will be ignored)
 */
\{
    mapping star;
    string  superbrief, taste, smell, *dets, *ble;
    string  brief, examine, look, aged_brief, aged_examine, aged_look, aged_adjective;
    int     i, ix, j;
    mixed   v;

    /* Scavenge! */
    superbrief     = \$item."trait:superbrief";
    taste          = \$item."trait:taste";
    smell          = \$item."trait:smell";
    brief          = \$item."trait:brief";
    examine        = \$item."trait:examine";
    look           = \$item."trait:look";
    aged_brief     = \$item."trait:old:brief";
    aged_examine   = \$item."trait:old:adjective";
    aged_look      = \$item."trait:old:look";
    aged_adjective = \$item."trait:old:variant";

    /* Sweep out all initial properties. */
    shared::clear_by_array(\$item: \$item, \$array: shared::."generic:list:initials");

    /* And bilbo. */
    shared::clear_bilbo(\$item: \$item);

    /* Kill the rest of the initial properties. */
    shared::clear_by_array(\$item: \$item, \$array: shared::."generic:list:useful-initials");

    /* Do some core prop clean up as well, which may catch some initial props on the way. */
    star = \$item."*";
    shared::clear_by_array(\$item: \$item, \$array: map_indices
                           (prefixed_map(star, "#") +
                            prefixed_map(star, "trait:")) +
                           (\{ "zcnt", "volition", "generic" \}));

    /*
     * Set us to the new UrParent. We don't do this until now to prevent a
     * bunch of trait setprop-posts from triggering unnecessarily.
     */
    \$item."core:ur:parent" = this;

    /* Try to recreate the brief, look, exam. */
    \$item."detail:description:brief" = (brief);
    \$item."detail:description:look" = (look);
    \$item."detail:description:examine" = (examine);
    \$item."detail:description:name" = (superbrief);
    \$item."detail:description:taste" = (taste);
    \$item."detail:description:scent" = (smell);
    \$item."detail:description:brief-aged" = (aged_brief);
    \$item."detail:description:look-aged" = (aged_look);
    \$item."detail:description:examine-aged" = (aged_examine);
    \$item."detail:description:adjective-aged" = (aged_adjective);

    /* Try to recreate the remaining details' briefs, looks, and examines. */
    dets = \$item."base:details:local" - (\{ "default" \});
    ix   = sizeof(dets);
    ble  = (\{ "brief", "look", "examine" \});
    for (i = 0; i \< ix; i++) \{
        for (j = 0; j \< 3; j++) \{
            v = Get(\$item, "details:" + dets[i] + ":description:" + ble[j]);
            if (typeof(v) == T_ARRAY) v = mixed_to_ascii(v)[5..];
            if (typeof(v) == T_STRING) \{
                Set(\$item, "details:" + dets[i] + ":description:" + ble[j], ParseXML(replace_strings(v, "\$(this.trait:brief)", brief)));
            \}
        \}
    \}
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1156180836, "zwoc", "E", 1156237966, "zwoc", "E", 1156238156, "zwoc", "E", 1156358699, "zwoc", "E", 1156358767, "zwoc", "E", 1156358782, "zwoc", "E", 1156359263, "zwoc", "E", 1156360155, "zwoc", "E", 1199986760, "zwoc", "E", 1200330662, "???", "R", 1200336072, "zwoc", "E", 1203944344, "zwoc", "EED", 1203944425, "zwoc", "EED", 1203944573, "zwoc", "EED", 1203944673, "zwoc", "EED", 1203944844, "zwoc", "X", 1204561459, "zwoc", "E", 1204561516, "zwoc", "E", 1204629456, "zwoc", "EED", 1204629518, "zwoc", "EED", 1204629538, "zwoc", "EED", 1204631353, "zwoc", "EED", 1204631363, "zwoc", "EED", 1204631753, "zwoc", "E", 1204631762, "zwoc", "E", 1204632458, "zwoc", "E", 1204633277, "zwoc", "E", 1204649323, "zwoc", "E", 1204716810, "zwoc", "EED", 1204717341, "zwoc", "EED", 1204722328, "zwoc", "EED", 1204722412, "zwoc", "EED", 1204827339, "zwoc", "E", 1204827358, "zwoc", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1200330662
      </Core:Property>
      <Core:Property property="volition">0</Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1156360155
      </Core:Property>
      <Core:Property property="{sub_rev}">1</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1204561459" state="Open" user="zwoc">
           This object parents all shared foods. UrLiquid parents all shared drinks, and UrVessel parents all shared vessels.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
