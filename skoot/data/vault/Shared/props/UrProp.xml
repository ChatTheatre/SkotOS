<object clone="/base/obj/thing" owner="Reverse">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:     Shared:prop:UrProp
 Maintainer: Kalle Alm
 Email:      kalle@mortalis.skotos.net
 Rev:        1
 Generated:  Sun Feb 18 11:05:20 2007



(Do not modify #list#. Automatically constructed property.)


------------------------------------------------------------------------------------------------------------
 lib:import_kin      (M) Import kin \$item, meaning a child whose UrParent should be me. In this case that
                         means I am importing a prop of some kind.
 lib:proof:autocheck (M) Autocheck prop \$obptr and set the (already stringified) \$xresult appropriately.
 lib:proof:detail    (M) Proof a detail \$detail with NRef \$ref.
------------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="export:sys:proofing:auto:name">
         "prop"
      </Core:Property>
      <Core:Property property="export:sys:shared:classifier:urprop">
         1
      </Core:Property>
      <Core:Property property="export:sys:shared:expand_extend">
         1
      </Core:Property>
      <Core:Property property="merry:inherit:lib:expand_extension">
         \<Shared:sys:CoreObject\>
      </Core:Property>
      <Core:Property property="merry:inherit:lib:spawn:may-spawn">
         \<Shared:sys:Core\>
      </Core:Property>
      <Core:Property property="merry:lib:import_kin">
         X[M] /*
 * D=Import kin \$item, meaning a child whose UrParent should be me. In this case that means I am importing a prop of some kind.
 */
if (!\$item) error("missing \$item in call to import_kin()");

if (\$item.generic == "true") \{
    /* Generic. */
    return ::import_kin_generic();
\}

/* Static. */
return ::import_kin_static();
      </Core:Property>
      <Core:Property property="merry:lib:import_kin_generic">
         X[M] error("not implemented");
      </Core:Property>
      <Core:Property property="merry:lib:import_kin_static">
         X[M] error("not implemented");
      </Core:Property>
      <Core:Property property="merry:lib:proof:autocheck">
         X[M] /*
 * D=Autocheck prop \$obptr and set the (already stringified) \$xresult appropriately.
 */
int retval;
string s;

retval = TRUE;

\$xresult = "";

\$xresult += "\<b\>Does this object have default values for the properties?\</b\> ";
if (typeof(\$obptr."traits:adj-map") != T_MAPPING) \{
        retval = FALSE;
        \$xresult += " no traits:adj-map...";
\}
if (!retval) \{
        \$xresult += "\\n";
        return FALSE;
\}
\$xresult += "check\\n\<b\>Does this object have a prime detail, named \\"default\\"?\</b\> ";
s = NRefDetail(\$obptr);
retval = FALSE;
if (!s \|\| s == "") \$xresult += " no prime detail at all!\\n"; else
if (s != "default") \$xresult += " prime detail name is not \\"default\\", it's \\"" + s + "\\"!\\n"; else
retval = TRUE;

if (!retval) return FALSE;
\$xresult += "check\\n\<b\>Does this object have an environment? It shouldn't.\</b\> ";
if (\$obptr."base:environment" == nil) \$xresult += "check\\n"; else \{
        \$xresult += "it does!\\n";
        return FALSE;
\}
\$xresult += "\<b\>Is a grandchild, and only has default properties different?\</b\> ";
if (shared_clothing::is_morph(\$item: \$obptr)) \{
        /* If it is, ... */
        object p;
        string *x, pname, pnoera, onoera;
        int pnlen, olen;

        \$xresult += "yes\\n\<b\>Is its name abiding by the conventions for morph items?\</b\> ";
        \$obptr.prooflimited = TRUE;

        /* ... which == "parentname, hyphen, identifier"? Or so.
         * No! Era should not be included. */
        p = \$obptr."core:ur:parent";
        if (p."core:ur:parent" \&\& contains(name(p), "Shared:Local:")) p = p."core:ur:parent";
        \$xtypename = "clothing: morph";
        pname = name(p);
        /* Produce names without era. */
        x = explode(pname, ":");
        pnoera = (sizeof(x) \> 3 ? implode(x-(\{x[2]\}), ":") : pname);
        x = explode(\$obj, ":");
        onoera = (sizeof(x) \> 3 ? implode(x-(\{x[2]\}), ":") : \$obj);
        olen = strlen(onoera);
        pnlen = strlen(pnoera);
        if (pnlen \>= olen \|\|
            onoera[..pnlen-1] != pnoera \|\|
            (onoera[pnlen] != '-' \&\&
             onoera[pnlen] != '/')
            ) \{
                \$xresult += "no; name should be [parent-name]-[style], e.g. accessories:belt-dress\\n";
                return FALSE;
        \}
        \$xresult += "yes\\n\<b\>Has the UrParent been proofed?\</b\> ";
        if (p \&\& !p."sys:shared:proofed") \{
                \$xresult += "no! Recommend that the UrParent is proofed first! [\<a href='?ob=" + pname + "'\>proof UrParent\</a\> \&rarr; " + pname + "]\\n";
                return FALSE;
        \}
        \$xresult += "yes\\n\<b\>Is the woename based on traits in the object?\</b\> ";
        \{
                string *names, *traits;
                int i, ix;
                names = explode(onoera[pnlen+1..], "-");
                traits = map_indices(Map(\$obptr."traits:adj-map"));
                ix = sizeof(traits);
                for (i = 0; i \< ix; i++) \{
                        traits[i] = Get(\$obptr, "trait:" + traits[i]);
                \}
                traits -= (\{ nil \});
                if (sizeof(names - traits) \> 0) \{
                        if (member("unknown", (names - traits))) \{
                                \$xresult += "no! This item is a morphed, but not yet renamed item!";
                        \} else \{
                                \$xresult += "no! (" + (names - traits)[0] + " is not a part of a trait value for this item)";
                        \}
                        return FALSE;
                \}
        \}
        \$xresult += "yes\\n\<b\>Is this morph's parent also a morph?\</b\> ";
        if (shared_clothing::is_morph(\$item: contains
             (name
              (\$obptr."core:ur:parent"),
              "Shared:Local:")
             ? \$obptr."core:ur:parent"."core:ur:parent"
             : \$obptr."core:ur:parent")) \{
                \$xresult += "yes! morphs should inherit directly from the main object, not from another morph\\n";
                return FALSE;
        \}
        \$xresult += "no\\n";
\} else \{
        \$xresult += "no\\n";
\}
\$xresult += "\<b\>Is this item edible/potable?\</b\> ";
if (\$obptr."base:edible") \{
        \$xresult += "it is edible!\\n";
        return FALSE;
\}
if (\$obptr."base:potable") \{
        \$xresult += "it is potable (drinkable)!\\n";
        return FALSE;
\}
\$xresult += "no\\n";
\$xresult += "\<b\>Default stance...\</b\> ";
if (\$obptr."base:defaultstance" != 0) \{
        \$stances = (\{ "none", "crouch", "kneel", "lie", "sit", "stand", "hang", "float" \});
        \$xresult += "\<span style='color: yellow;'\>" + \$stances[\$obptr."base:defaultstance"] + "\</span\>\\n";
\} else \{
        \$xresult += "none\\n";
\}
\$xresult += "\<b\>Gender:\</b\> ";
if (\$obptr."base:gender") \{
        \$xresult += (\{ "neutral", "male", "female" \})[\$obptr."base:gender"] + "!\\n";
        return FALSE;
\}
\$xresult += "neutral\\n\<b\>No volition:\</b\> ";
if (\$obptr."base:volition") \{
        \$xresult += "has volition!\\n";
        return FALSE;
\}
\$xresult += "check\\n\<b\>Not a weapon:\</b\> ";
if (\$obptr."base:weapon") \{
        \$xresult += "is a weapon!\\n";
        return FALSE;
\}
\$xresult += "check\\n";

\$auto_details = TRUE;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:proof:detail">
         X[M] /*
 * D=Proof a detail \$detail with NRef \$ref.
 */
\$result = "\<b\>Mustn't be abstract:\</b\> ";
if (\$ref."detail:abstract") \{
        \$result += "it is!\\n";
        return FALSE;
\}
\$result += "isn't\\n\<b\>Mustn't have a face:\</b\> ";
if (\$ref."detail:face") \{
        \$result += "it has a face!\\n";
        return FALSE;
\}
\$result += "doesn't\\n\<b\>Mustn't be hidden:\</b\> ";
if (\$ref."detail:hidden") \{
        \$result += "it is hidden!\\n";
        return FALSE;
\}
\$result += "isn't\\n\<b\>Mustn't have luminosity:\</b\> ";
if (\$ref."detail:luminosity" \> 0.0) \{
        \$result += "it does! (" + \$ref."detail:luminosity" + ")\\n";
        return FALSE;
\}
\$result += "doesn't\\n\<b\>Mustn't have exit properties:\</b\> ";
if (\$ref."detail:exit:dest" \|\| sizeof(\$ref."detail:exit:directions")) \{
        \$result += "it has exit properties! (" + dump_value(\$ref."detail:exit:dest") + " / " + dump_value(\$ref."detail:exit:directions") + ")";
        return FALSE;
\}
\$result += "doesn't\\n\<b\>Is at least one of this detail's snames/pnames referenced from the prime?\</b\> ";
if (!\$detref[\$detail]) \{
        \$result += "no, it's not!\\n";
        return FALSE;
\}
\$result += "yes\\n";

return TRUE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1171813405, "zwoc", "E", 1171814356, "zwoc", "EED", 1171814368, "zwoc", "EED", 1171814411, "zwoc", "EED", 1171814419, "zwoc", "EED", 1171814429, "zwoc", "EED", 1171814441, "zwoc", "EED", 1171814612, "zwoc", "EED", 1171814684, "zwoc", "EED", 1171814760, "zwoc", "EED", 1171817656, "zwoc", "S", 1171817878, "zwoc", "S", 1171818542, "zwoc", "S", 1171822063, "zwoc", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:shared:no-proofing">
         1
      </Core:Property>
      <Core:Property property="sys:shared:object:morph">
         0
      </Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
