<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.5" density="0.6"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="true" on="false" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="torch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="torches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="cedar"/>
          <Base:Adjective adjective="unlit"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? not | $(this.trait:flame:flammable) | spent} {? | $(this.trait:flame) |flaming } torch
          </Base:Description>
          <Base:Description type="examine">
             {? | $(this.trait:flame:flammable) |{? | $(this.trait:flame) | A lit cedar torch, the top of which is a cloth burning with a warm reddish flame. A fragrant smoke rises up. | An unlit torch, made of fragrant cedar wood. An oily cloth is tied around the top of the shaft.} | A spent cedar torch, the shaft of which is but charcoal. } {? | $(this.trait:flame:remains) | $(this.trait:flame:remains)}
          </Base:Description>
          <Base:Description type="look">
             {? | $(this.trait:flame:flammable) | {? | $(this.trait:flame) | A lit torch burning with a warm reddish flame.   | A torch is unlit but ready. An oily cloth is tied around the top of the shaft. } | A spent torch. }{? | $(this.trait:flame:remains) | $(this.trait:flame:remains)}
          </Base:Description>
          <Base:Description type="pbrief">
             {? not | $(this.trait:flame:flammable) | spent} {? | $(this.trait:flame) |flaming } torches
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             {? | $(this.trait:flame) | The torch smells of oily smoke and a faint scent of burning cedar wood. | {? | $(this.trait:flame:remains) | The torch smells of burnt cedar. |The torch smells of freshly cut cedar.}}
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             {? | $(this.trait:flame) | The torch tastes of scorched wood and hot mineral oil. | The torch tastes of {? | $(this.trait:flame:remains) | charcoal and mineral oil. | wood and mineral oil.} }
          </Base:Description>
          <Base:Description type="react-post:sense/taste-iob">
             {? | $(this.trait:flame) | The torch tastes of scorched wood and hot mineral oil. | The torch tastes of {? | $(this.trait:flame:remains) | charcoal and mineral oil. | wood and mineral oil.} }
          </Base:Description>
          <Base:Description type="react-post:sense/touch-dob">
             The torch feels roughly cut from the wood and should be easy to grip. {? | $(this.trait:flame) | The flame rising from the cloth above your hand feels quite hot. }
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="flame" prime="false" def="false" abstract="false" hidden="true" luminosity="5" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="false" under="false" on="false" inside="false" near="true" over="false" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="flame"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="flames"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="cedar"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">flame</Base:Description>
          <Base:Description type="examine">
             A flame rising from cloth burning at the of a cedar torch. A fragrant smoke rises up.
          </Base:Description>
          <Base:Description type="look">
             A warm reddish flame at the top of a torch.
          </Base:Description>
          <Base:Description type="pbrief">flames</Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The flame of the torch smells of smokey hot oil with a faint scent of burning cedar wood.
          </Base:Description>
          <Base:Description type="react-pre:sense/taste-dob">
             The flame is too hot to $(verb).
          </Base:Description>
          <Base:Description type="react-pre:sense/taste-iob">
             The flame is too hot to $(verb).
          </Base:Description>
          <Base:Description type="react-pre:sense/touch-dob">
             The flame is too hot to $(verb).
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="smoke" prime="false" def="true" abstract="false" hidden="true" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="true" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="smoke"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="smoke"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="cedar"/>
          <Base:Adjective adjective="fragrant"/>
          <Base:Adjective adjective="oily"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             the smoke
          </Base:Description>
          <Base:Description type="examine">
             The oily smoke is rising from the flames of a torch, smelling of cedar.
          </Base:Description>
          <Base:Description type="look">
             Smoke is rising from a burning torch.
          </Base:Description>
          <Base:Description type="pbrief">smoke</Base:Description>
          <Base:Description type="react-desc:sense/touch-dob">
             You $(verb) $(adverb) toward the smoke of the torch, and $(verb) nothing.
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The smoke smells of oily with a faint scent of burning cedar wood.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The smoke from the torch tastes somewhat like smokey burning oil.
          </Base:Description>
          <Base:Description type="react3-desc:sense/touch-dob">
             <describe what="$(actor)" cap="1"/> $(vob.verb:third) $(adverb) toward the smoke of a torch.
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties>
      <Base:InitialProperty property="trait:flame:flammable">
         1
      </Base:InitialProperty>
    </Base:InitialProperties>
    <Core:Properties>
      <Core:Property property="export:trait:flammable">
         1
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /* Standard Flame Scripts    */
/* act-start                 */
/* Example by ChristopherA   */

   /* The item has just been spawned, so set flame off so that */
   /* the setprop-post:trait:flame can handle initialization   */
   /* of hidden details and set adjectives properly. This is   */
   /* required because details can't be unhidden if they are   */
   /* hidden in the ur-parent first. Instead, you must spawn   */
   /* the object and then hide the details in the ur-child.    */
   Set( this, "trait:flame", FALSE);

   /* Set some initial properties that these scripts need. You */
   /* could set this in InitialProperties, but this keeps the  */
   /* initialization with the code.                            */
   Set(this, "trait:flame:flammable", TRUE);
   Set(this, "trait:flame:tick_cnt", 0);

   /* There is no need to return TRUE; in an act-start         */
      </Core:Property>
      <Core:Property property="merry:react-post:extinguish-dob">
         X[M] /* Standard Flame Scripts    */
/* react-post:extinguish-dob */
/* Example by ChristopherA   */

   /* If flame-off was set during the reaction, turn trait:flame   */
   /* off and let setprop-post:trait:flame handle cleaning things. */
   /* Note: we do this in react-post so that things look clean     */
   /* during normal processing of the react:extinguish-dob signal, */
   /* e.g. you don't get the result "You extinguish the unlit      */
   /* torch." when it isn't actually unlit yet.                    */
   if ( Get(this,"trait:flame-off") )\{
      Set( this, "trait:flame", FALSE);
      Set( this, "trait:flame-off", FALSE);
      /* Now show everyone that a flame has gone out.              */
      EmitTo (\$actor, "The top of " + Describe(\$this, \$actor, \$actor) + " smothers out with a sputter.\\n");
      EmitIn(Get(\$actor, "base:environment"), "The top of " + Describe(\$this) + " smothers out with a sputter.\\n", \$actor);
   \}

  /* This is a react-post, so no need to return TRUE; */
      </Core:Property>
      <Core:Property property="merry:react-post:light-dob">
         X[M] /* Standard Flame Scripts   */
/* react-post:light-dob     */
/* Example by ChristopherA  */

   /* If flame-on was set during the reaction, turn trait:flame on */
   /* and let setprop-post:trait:flame handle cleaning things up.  */
   /* Note: we do this in react-post so that things look clean     */
   /* during normal processing of the react:light-dob signal,      */
   /* e.g. you don't get the result "You light the flaming torch." */
   /* when it isn't actually flaming yet.                          */
   if ( Get(this,"trait:flame-on") )\{
      Set( this, "trait:flame", TRUE);
      Set( this, "trait:flame-on", FALSE);
      /* Now show everyone that a flame has appeared.              */
      EmitTo (\$actor, "The top of " + Describe(\$this, \$actor, \$actor) + " crackles alight.\\n");
      EmitIn(Get(\$actor, "base:environment"), "The top of " + Describe(\$this) + " crackles alight.\\n", \$actor);
   \}

   /* This is a react-post, so no need to return TRUE; */
      </Core:Property>
      <Core:Property property="merry:react-post:place-what">
         X[M] /* Standard Flame Scripts    */
/* react-post:drop-what      */
/* Example by ChristopherA   */
if (\$actor."skotos:creator" == "zell") \{
  EmitTo(\$actor, "ARGS: " + dump_value(args));
\}

   /* If the item is currently lit ... */
   if ( Get(this,"trait:flame") )\{

      /* If the item is not near anything (not very often, but it happens) don't try to get proximity */
      if ( Get( this, "base:proximity") ) \{
         EmitTo(\$actor, "After you drop " + Describe(\$this) + " " + \$this."base:prepositionstring" + " " + Describe(Get( this, "base:proximity")) + ", the flame goes out.\\n");
         EmitIn(Get( this, "base:environment"), "After " + Describe(\$actor) + " drops " + Describe(\$this) + " " + \$this."base:prepositionstring" + " " + Describe(Get( this, "base:proximity")) + ", the flame goes out.\\n", \$actor);
      \}

      /* The items is near something, so tell the actor and everyone else where the torch was dropped */
      else \{
         EmitTo(\$actor, "After you drop " + Describe(\$this) + " " + \$this."base:prepositionstring" + " here, the flame goes out.\\n");
         EmitIn(Get( this, "base:environment"), "After " + Describe(\$actor) + " drops " + Describe(\$this) + " " + \$this."base:prepositionstring" + " here, the flame goes out.\\n", \$actor);
      \}

      /* Let the setprop-post:trait:flame signal handle the rest */
      Set( this, "trait:flame", FALSE);
   \}

   /* ... the item must not be currently lit, so do nothing. */
   /* This is a react-post, so no need to return TRUE; */
      </Core:Property>
      <Core:Property property="merry:react:extinguish-dob">
         X[M] /* Standard Flame Scripts   */
/* react:extinguish-dob     */
/* Example by ChristopherA  */

   /* if a flame exists, let post-processing know, and then   */
   /* allow normal processing to continue                     */
   if ( Get(this,"trait:flame") )\{
      /* future spot for script to test if iob is a quencher. */
      Set( this, "trait:flame-off", TRUE);
      return TRUE;
   \}
   /* ... but if a flame doesn't exist, don't allow normal    */
   /* processing to continue.                                 */
   else \{
    EmitTo(\$actor, Describe(\$this) + " has already been extinguished.\\n");
    return FALSE;
   \}
      </Core:Property>
      <Core:Property property="merry:react:light-dob">
         X[M] /* Standard Flame Scripts    */
/* react:light-dob           */
/* Example by ChristopherA   */

   /* First test to see if the item is still flammable. */
   if ( Get(this,"trait:flame:flammable") )\{
      /* if a flame already exists, don't allow normal processing to continue */
      if ( Get(this,"trait:flame") )\{
         EmitTo(\$actor, Describe(\$this) + " is already lit.\\n");
         return FALSE;
      \}
      /* ...but if a flame doesn't exist, let post processing know,  */
      /* and then allow normal processing to continue.               */
      else \{
         /* test to see if actor is holding item */
         if ( (Get(this,"base:environment")) == \$actor ) \{
            Set( this, "trait:flame-on", TRUE);
            return TRUE;
         \}
         EmitTo(\$actor, "You must be holding " + Describe(this, \$actor) + " to " + \$verb + " it.\\n" );
         return FALSE;
      \}
   \}
   /* ...the item is not flammable anymore. Some day this may be    */
   /* handled by a light neoct verb.                                */
   else \{
      EmitTo(\$actor, "You attempt to " + \$verb + " " + Describe(\$this, \$actor, \$actor) + ", but it appears to not be flammable.\\n");
      EmitIn(Get(\$actor, "base:environment"), Describe(\$actor) + " attemps to " + \$verb + " " + Describe(\$this) + ",  but fails.\\n", \$actor);
return FALSE;
   \}
      </Core:Property>
      <Core:Property property="merry:setprop-post:trait:flame">
         X[M] /* Standard Flame Scripts    */
/* setprop-post:trait:flame  */
/* Example by ChristopherA   */

   if (\$(hook-property) != "trait:flame") return TRUE;

   /* If a flame exists...   */
   if ( Get(this,"trait:flame") )\{
      /* reveal the flame and change adjectives on the prime detail */
      Set( this, "details:flame:hidden", FALSE);
      Set( this, "details:smoke:hidden", FALSE);
      Set( this, "details:default:adjectives:flaming", TRUE);
      Set( this, "details:default:adjectives:lit", TRUE);
      Set( this, "details:default:adjectives:unlit", FALSE);

      /* if the torch has never been flamed before, scorch it.     */
      if ( ! (Get(this,"trait:flame:remains")) ) \{
         Set(this, "trait:flame:remains", "It is slightly scorched.");
      \}

      /* Now start the timer which will tick ever 450 seconds      */
      Set(this, "trait:flame:tick_id", Every("tick", 450));

   \}
   /* ... if a flame does not exist, then hide the flame and      */
   /* change adjectives on the prime detail.                      */
   else \{
      Set( this, "details:flame:hidden", TRUE);
      Set( this, "details:smoke:hidden", TRUE);
      Set( this, "details:default:adjectives:flaming", FALSE);
      Set( this, "details:default:adjectives:lit", FALSE);
      Set( this, "details:default:adjectives:unlit", TRUE);

      /* Now turn of the timer, so it will not tick. */
      Stop(Get(this, "trait:flame:tick_id"));
   \}

   /* This is a setprop-post, so no need to return TRUE; */
      </Core:Property>
      <Core:Property property="merry:timer:tick">
         X[M] /* Standard Flame Scripts    */
/* timer:tick                */
/* Example by ChristopherA   */

   /* timer:tick is called every X seconds (typically 60 or */
   /* 90 seconds) as set up in the Every() function in      */
   /* the setprop-post:trait:flame merry script.            */

   object env; object act; int tick;

   /* We've been triggered, so increment our tick count     */
   tick = Get(this, "trait:flame:tick_cnt") + 1;
   Set(this, "trait:flame:tick_cnt", tick);

   /* set some variables because timer:tick exists in an    */
   /* an environment where there are very few arguments     */
   /* and you can't rely on where the item. It could be     */
   /* on the floor, in someones bag in the nil, or in       */
   /* the hands of the person who lit it.                   */

   /* If we are being held, we want our environment output  */
   /* to be in the room of the person who is holding us.    */
   if (env = Get(this, "base:environment")) \{
    env = Get(env, "base:environment");
   \}

   /* If we are being held, we want our actor output        */
   /* to be the person holding us, or the room if the item  */
   /* has been dropped.                                     */
   act = this."base:environment";
   if (act."base:environment") \{
      /* actor has an environment, all is well */
      env = act."base:environment";
   \} else \{
      /* if act has no environment, we've been dropped and act = env! */
      env = act;
      act = nil;
   \}

   /* For each tick, do different things...                 */

   /* ...partially burn out the item                        */
   if (tick == 5) \{
     Set(this, "trait:flame:remains", "It is about half burned out");
   \}
   /* ...mostly burn out the item                           */
   if (tick == 10) \{
      Set(this, "trait:flame:remains", "It is almost burned out.");
   \}
   /* ...complete burn out the item                         */
   if (tick \>= 12) \{
      if ( act != nil ) \{
          EmitTo(act, Describe(this, nil, act) + " sputters out.\\n");
      \}
      if(this."base:environment") \{
         EmitIn(env, Describe(this, nil, nil) + " sputters out.\\n", act);
      \}
      Set(this, "trait:flame", FALSE);
      Set(this, "trait:flame:flammable", FALSE);
      Set(this, "trait:flame:remains", "It is completely burned out.");
      Set( this, "details:default:adjectives:spent", TRUE);
      /* stop us from ticking anymore                       */
      Stop(Get(this, "trait:flame:tick_id"));

      /* Now return false, but set up a delay so that       */
      /* this object can decay in 86400 seconds (1 day)     */
      \$delay(86400, FALSE, "4a8d");

      /* We have to re-establish our local variables, as    */
      /* they are incorrect after a delay.                  */
      Set(this, "trait:flame:tick_cnt", tick);
      if (env = Get(this, "base:environment")) \{
    env = Get(env, "base:environment");
      \}
      act = this."base:environment";
      if (act."base:environment") \{
         env = act."base:environment";
      \} else \{
         env = act;
         act = nil;
      \}

      /* If we are not in the nil, then tell people that    */
      /* we are disintegrating...                           */
      if ( act != nil ) \{
        EmitTo(act, Describe(this, nil, act) + " disintegrates from age.\\n");
     \}
      if (this."base:environment") \{
         EmitIn(env, Describe(this, nil, nil) + " disintegrates from age.\\n", act);
     \}
    /* Ok, we are done. Bye.                              */
      Slay(this);
      return FALSE;
   \}

   /* For every tick, there is a 30% chance of a random emit*/
   switch(random(10)) \{
      /* Again, if we are not in the nil, do the emits      */
    case 0: \{
            if ( act != nil ) \{
               EmitTo(act, "A trail of smoke wisps upwards through the air from " + Describe(this, nil, act) + ".\\n");
            \}
            if(this."base:environment") \{
            EmitIn(env, "A trail of smoke wisps upwards through the air from " + Describe(this, nil, nil) + ".\\n", act);
            \}
    \} break;
    case 1: \{
            if(this."base:environment") \{
               EmitTo(act, "There is a quiet fizzle of hot oil from " + Describe(this, nil, act) + ".\\n");
            \}
            if(this."base:environment") \{
               EmitIn(env, "There is a quiet fizzle of hot oil from " + Describe(this, nil, nil) + ".\\n", act);
            \}
    \} break;
    case 2: \{
            if(this."base:environment") \{
               EmitTo(act, capitalize(Describe(this, nil, act) + " flickers.\\n"));
            \}
            if(this."base:environment") \{
               EmitIn(env, capitalize(Describe(this, nil, nil) + " flickers.\\n"), act);
            \}
    \} break;
    default: break;
   \}
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1049681354, "christophera", "X", 1049704451, "christophera", "K", 1049704628, "christophera", "K", 1049704910, "christophera", "K", 1049704970, "christophera", "K", 1049704991, "christophera", "K", 1049705084, "christophera", "K", 1049705172, "christophera", "K", 1049705197, "christophera", "K", 1049705784, "christophera", "K", 1049705910, "christophera", "K", 1049706001, "christophera", "E", 1049706130, "christophera", "X", 1049706152, "christophera", "X", 1049706517, "christophera", "K", 1049706740, "christophera", "K", 1049706864, "christophera", "K", 1049707057, "christophera", "K", 1049707212, "christophera", "K", 1049707287, "christophera", "K", 1049707412, "christophera", "K", 1049707446, "christophera", "E", 1049707460, "christophera", "E", 1049707484, "christophera", "E", 1049707499, "christophera", "E", 1049708195, "christophera", "K", 1049708303, "christophera", "K", 1049783377, "christophera", "K", 1049783599, "christophera", "K", 1049783741, "christophera", "K", 1049783828, "christo\\n\\nphera", "K", 1049783840, "christophera", "K", 1049784029, "christophera", "K", 1049784144, "christophera", "K", 1049784173, "christophera", "K", 1049784203, "christophera", "K", 1049784445, "christophera", "K", 1049784689, "christophera", "K", 1049784754, "christophera", "K", 1049785893, "christophera", "K", 1049786409, "christophera", "K", 1049786447, "christophera", "K", 1049786514, "christophera", "K", 1049786550, "christophera", "K", 1049786714, "christophera", "K", 1049786751, "christophera", "K", 1049786888, "christophera", "K", 1049787008, "christophera", "K", 1049787278, "christophera", "E", 1049872597, "christophera", "E", 1049872979, "christophera", "E", 1049872992, "christophera", "E", 1049873036, "christophera", "E", 1049877259, "christophera", "E", 1050983726, "christophera", "E", 1050987697, "christophera", "E", 1051210495, "christophera", "X", 1082303175, "kargh", "E", 1082303219, "kargh", "E", 1082303979, "kargh", "P", 1082304172, "kargh", "P", 1096829602, "sorcha", "K", 1197726944, "sinvyrae", "E", 1199969903, "???", "R", 1200880153, "nino", "X", 1200880691, "nino", "E", 1200932776, "???", "R", 1201834577, "tomdowd", "E", 1201846838, "tomdowd", "E", 1204099978, "???", "R", 1206904394, "tomdowd", "E", 1206904417, "tomdowd", "E", 1206947522, "???", "R", 1274886330, "dalla", "E", 1274886397, "dalla", "E", 1274944391, "???", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1274944391
      </Core:Property>
      <Core:Property property="sys:sync:proposing-revision">
         1274886397
      </Core:Property>
      <Core:Property property="trait:flame">0</Core:Property>
      <Core:Property property="trait:flame:flammable">
         1
      </Core:Property>
      <Core:Property property="trait:flame:tick_cnt">
         0
      </Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="0" state="Open" user="christophera">
           A working torch, lightable, extinguishable, with luminosity, sense descriptions, random emits when lit, runs out in about 17-20 minutes, goes out if dropped, decays in a day if spent, etc. Completely functional, though still a bit a work in progress.
        </Notes:Note>
        <Notes:Note ix="1" state="Open" user="christophera">
           To Do: convert light/extinguish to neoct so that only flammable items can be lit, handle more synonyms of verbs, add more details, make it lightable only by iob from a flame detail in a room or an object that has a flame, more proximity checks, have flame go out if you put it in bag, more randomness OneOfs in messages, etc.
        </Notes:Note>
        <Notes:Note ix="1274886330" state="Open" user="dalla">
           CM Crowd: DO NOT SPAWN THIS OBJECT.
Use Marrach:Props:Misc:light:Torch instead.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
