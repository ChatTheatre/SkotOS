<object clone="/base/obj/thing" owner="TextIF">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="0.25" density="2.7"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="0" maxweight="0"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="true" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="true" against="true" under="false" on="false" inside="false" near="true" over="true" behind="true" before="true" beside="true"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="flashlight"/>
            <Base:SName sname="switch"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="flashlights"/>
            <Base:PName pname="switches"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="aluminum"/>
          <Base:Adjective adjective="metal"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             {? not | $(this.details:light:hidden) |lit } flashlight
          </Base:Description>
          <Base:Description type="examine">
             {? not | $(this.details:light:hidden) | A simple cylindrical flashlight with a dull aluminum shaft with a small switch on top. The bulb of the flashlight illuminates the room with a cold yellowish light.| An unlit flashlight, with a dull aluminum shaft with a small switch on top.}
          </Base:Description>
          <Base:Description type="look">
             {? not | $(this.details:light:hidden) | A flashlight shines with a cold yellow light. | A flashlight is unlit but ready.}
          </Base:Description>
          <Base:Description type="pbrief">
             {? not | $(this.details:light:hidden) |lit }flashlights
          </Base:Description>
          <Base:Description type="react-desc:extinguish-dob">
             {? not | $(this.details:light:hidden) | $[::toggle();]<skoot:mutated/> | The flashlight is already off. }
          </Base:Description>
          <Base:Description type="react-desc:light-dob">
             {? not | $(this.details:light:hidden) | The flashlight is already on. | $[::toggle();]<skoot:mutated/> }
          </Base:Description>
          <Base:Description type="react-post:sense/smell-dob">
             The flashlight has no obvious smell.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-dob">
             The flashlight tastes vaguely of metal.
          </Base:Description>
          <Base:Description type="react-post:sense/taste-iob">
             The flashlight tastes vaguely of metal.
          </Base:Description>
          <Base:Description type="react-post:sense/touch-dob">
             The flashlight is roughly cylindrical, is cool to touch, and should be easy to grip. {? not | $(this.details:light:hidden) | The light rising from the bulb also feels quite cool. }
          </Base:Description>
          <Base:Description type="react-post:switch-dob">
             $[::toggle();]<skoot:mutated/>
          </Base:Description>
          <Base:Description type="react-post:toggle-dob">
             $[::toggle();]<skoot:mutated/>
          </Base:Description>
          <Base:Description type="react3-post:switch-dob">
             {? not | $(this.details:light:hidden) |  The flashlight turns on. | The flashlight turns off.}
          </Base:Description>
          <Base:Description type="react3-post:toggle-dob">
             {? not | $(this.details:light:hidden) |  The flashlight turns on. | The flashlight turns off.}
          </Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
      <Base:Detail id="light" prime="false" def="false" abstract="false" hidden="false" luminosity="10" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="light"/>
            <Base:SName sname="bulb"/>
          </Base:SNames>
          <Base:PNames>
            <Base:PName pname="bulbs"/>
            <Base:PName pname="lights"/>
          </Base:PNames>
        </Base:Names>
        <Base:Adjectives>
          <Base:Adjective adjective="light"/>
        </Base:Adjectives>
        <Base:Descriptions>
          <Base:Description type="brief">
             light from a flashlight
          </Base:Description>
          <Base:Description type="examine">
             The bulb at the end of a flashlight casts out a cold yellowish light.
          </Base:Description>
          <Base:Description type="look">
             A yellowish light from a flashlight.
          </Base:Description>
          <Base:Description type="pbrief">lights</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:trait:light:lightable">
         1
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /*
 * Apologies about breaking the "no Merry" deal, but this is necessary to make the
 * menu item work correctly.
 */
this."detail:adjective:lit" = TRUE;
return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:toggle">
         X[M] /*
 * D=Toggle this flashlight on/off.
 */
if (this."details:light:hidden") \{
    EmitTo(\$actor, Describe(this, nil, \$actor) + " turns on.");
    EmitIn(\$actor."base:environment", Describe(this, nil, nil) + " turns on.", \$actor);
    this."detail:adjective:lit" = TRUE;
    this."details:light:hidden" = FALSE;
\} else \{
    EmitTo(\$actor, Describe(this, nil, \$actor) + " turns off.");
    EmitIn(\$actor."base:environment", Describe(this, nil, nil) + " turns off.", \$actor);
    this."detail:adjective:lit" = FALSE;
    this."details:light:hidden" = TRUE;
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1050387725, "christophera", "K", 1050387740, "christophera", "E", 1050388747, "christophera", "E", 1050388764, "christophera", "E", 1050388936, "christophera", "E", 1050388970, "christophera", "E", 1050389029, "christophera", "E", 1050389053, "christophera", "E", 1050389143, "christophera", "K", 1050389319, "christophera", "K", 1050389844, "christophera", "K", 1050389878, "christophera", "E", 1050389947, "christophera", "E", 1050390024, "christophera", "K", 1050390075, "christophera", "E", 1050390136, "christophera", "K", 1050390261, "christophera", "K", 1050390325, "christophera", "K", 1050390437, "christophera", "K", 1050390959, "christophera", "E", 1050391125, "christophera", "K", 1050391263, "christophera", "K", 1050391975, "christophera", "K", 1050392301, "christophera", "K", 1050427097, "christophera", "X", 1050427238, "christophera", "X", 1050430058, "christophera", "K", 1050983705, "christophera", "E", 1052187813, "johnathon", "K", 1052187856, "johnathon", "E", 1052187877, "johnathon", "K", 1052187952, "johnathon", "X", 1052187980, "johnathon", "X", 1149794247, "zwoc", "X", 1149794395, "zwoc", "E", 1149794552, "zwoc", "E", 1149794919, "zwoc", "EED", 1149794927, "zwoc", "EED", 1153390589, "zwoc", "E", 1153390815, "zwoc", "X", 1153391915, "zwoc", "E", 1153391960, "zwoc", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="0" state="Open" user="christophera">
           A simple flashlight, lightable, extinghishable, togglable. A demonstration of dynamic light by hiding a luminescent detail without using Merry scripts, instead only using signal descriptions SAM and inline Merry.
        </Notes:Note>
        <Notes:Note ix="1" state="Open" user="christophera">
           This demonstration isn't that suitable for a "real" flashlight. It doesn't have batteries and lasts indefinately.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
