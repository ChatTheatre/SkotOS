<object clone="/base/obj/thing" owner="Reverse">
  <Base:Thing>
    <Ur:UrObject urobject="OBJ(Shared:Local:food/drinks:UrConsumable)"/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="export:sys:proofing:auto:name">
         "food/drinks[edible]"
      </Core:Property>
      <Core:Property property="export:sys:shared:consumable">
         1
      </Core:Property>
      <Core:Property property="merry:act:start">
         X[M] /*
 * D=Spawn script for consumables.
 *
 * In the case of spawning drinks, and liquid foods -- we don't want people to mistakenly spawn these. Ever.
 * In the case of spawning food that gets old (spoils), we will be dealing with that as well.
 */
\{
    object env;

    if (this."sys:shared:consumable:gets-old") \{
        ::get_old();
    \}

    /* Make sure this *IS* liquid. */
    if (!this."sys:shared:consumable:must-be-contained") return TRUE;

    if (\$vob) return TRUE; /* \<== it's a verb action! why the hell is a piece of food acting? plots amaze me sometimes */

    /* Wait a few seconds, so we end up where we're supposed to end up. */
    \$delay(2, TRUE, "abcd");

    /* Now we see if we're in a tight container. */
    env = this."base:environment";
    if (!env) \{
        /* Special. We're nowhere. Uh. Byebyethen. */
        return nil;
    \}
    if (env."base:tight") \{
        /* It's tight, so we're good. */
        return nil;
    \}

    /*
     * So the container isn't tight. Someone spawned e.g. ale or pasta and meatsauce and expected it to be on a plate.
     * Since we have no way of knowing what plates they want to use etc. we COULD have been nice and spawned a plate,
     * put ourselves on/in it, and then handing that plate to \$actor, but that will result in them never knowing how to
     * properly spawn food.
     *
     * Also, we do not emit to audience, since that might reveal host powers.
     */
    if (this."base:environment"."udat:host") \{
        EmitTo(this."base:environment",
               "The " + UnSAM(this."detail:description:name") + " falls to the ground with a wet *splot*, since you didn't put it " + (this."sys:shared:consumable:liquid" ? "in a vessel" : "on a plate") + ". [Correct way to do this: +spawn a plate or vessel of sorts, then +fill my plate with " + name(this."core:ur:parent") + " (presuming you did spawn a plate)]\\n\\nOh, and don't worry, noone in the room with you saw that happening.");
    \} else \{
        EmitTo(this."base:environment",
               "There was a meta-world bug which resulted in a black hole's spontaneous instantiation in your close vicinity, leading to a chain reaction too long to describe, but the result being that the food that was in your hands a second ago was engulfed by the black hole in question, which promptly vanished thereafter..... You most likely want to tell staff about this.");
    \}
    if (name(this)[0] != '[' \&\& name(this)[0] != '/') error("named object claims it was spawned and was about to slay itself! (" + name(this) + ")");
    Slay(this);
\}
      </Core:Property>
      <Core:Property property="merry:lib:get_old">
         X[M] /*
 * D=Get old (rot, spoil, grow stale, etc.).
 */
\{
    object env;
    string aged;

    if (this."detail:description:brief-fresh") this."detail:description:brief" = this."detail:description:brief-fresh";
    if (this."detail:description:examine-fresh") this."detail:description:examine" = this."detail:description:examine-fresh";
    if (this."detail:description:look-fresh") this."detail:description:look" = this."detail:description:look-fresh";

    if (name(this)[0] != '[' \|\| !this."base:environment") return nil;

    \$delay(this."base:environment".foodbg ? 30 : 86400, FALSE, "abcd");

    aged = strip(UnSAM(this."detail:description:adjective-aged"));

    if (this."detail:description:brief-aged") this."detail:description:brief" = this."detail:description:brief-aged";
    if (this."detail:description:examine-aged") this."detail:description:examine" = this."detail:description:examine-aged";
    if (this."detail:description:look-aged") this."detail:description:look" = this."detail:description:look-aged";

    this."sys:shared:consumable:aged" = TRUE;

    if (this."detail:description:taste-aged") \{
        this."detail:description:taste" = this."detail:description:taste-aged";
    \} else \{
        this."detail:description:taste" = oneof("An awful", "A horrible", "A disgusting", "A sickening") + " " + (aged ? aged + " " : "") + "taste.";
    \}

    if (this."detail:description:scent-aged") \{
        this."detail:description:scent" = this."detail:description:scent-aged";
    \} else \{
        this."detail:description:scent" = oneof("An awful", "A horrible", "A disgusting", "A sickening") + " " + (aged ? aged + " " : "") + "scent.";
    \}

    if (this."detail:description:adjective-aged") \{
        Set(this, "detail:adjective:" + aged, TRUE);
    \}

    \$delay(this."base:environment".foodbg ? 30 : 86400, FALSE, "cdef");

    if (name(this)[0] != '[' \|\| !this."base:environment") return nil;

    for (env = this."base:environment"; env."base:environment"; env = env."base:environment");

    EmitIn(env, Describe(this) + " disintegrates from old age.");

    Slay(this);
\}
      </Core:Property>
      <Core:Property property="merry:lib:physical_reference">
         X[M] /*
 * D=Reference a drink or food item.
 */
return "TODO";
      </Core:Property>
      <Core:Property property="merry:lib:proof:autocheck">
         X[M] /*
 * D=Autocheck food and drink object \$obptr and set the (already stringified) \$xresult appropriately. Additionally set \$xpanes to a list of the tests to run, as a string array.
 */
\{
    string s;
    int retval;

    /*
     * These features exist in the shared consumable system (see UrVessel for vessel-specific properties):
     *     MISCELLANEOUS
     *   - sys:shared:consumable:liquid (01) - is it a liquid? if it is, people can't pick it up
     *   - sys:shared:consume:drinkable (01) - is this item potable?
     *   - sys:shared:consume:edible (01) - is this item edible?
     *   - sys:shared:consume:emit-actor (SAM) - emit to actor when consumed
     *   - sys:shared:consume:emit-others (SAM) - -'- others (in the room, observing actor's action of eating/drinking)
     *   - sys:shared:consume:finish-actor (SAM) - when finishing the last of the food/drink, emit this to actor
     *   - sys:shared:consume:finish-others (SAM) - -'- others
     *   - sys:shared:consume:spill-actor (SAM) - emit to actor when they spill (dump it on the ground)
     *   - sys:shared:consume:spill-others (SAM) - emit to others in the room
     *     DESCRIPTIONS
     *   - desc type 'name'
     *   - desc type 'scent'
     *   - desc type 'taste'
     *
     * Beyond the above, it functions just like a regular shared item, with traits and such.
     */

    \$(test-handler-map)["physical-\>reference"] = "physical_reference";

    \$xresult = "";

    \$xresult += "\<b\>Does this object have a prime detail, named \\"default\\"?\</b\> ";
    s = NRefDetail(\$obptr);
    retval = FALSE;
    if (!s \|\| s == "") \{
        \$xresult += " no prime detail at all!\\n";
    \} else if (s != "default") \{
        \$xresult += " prime detail name is not \\"default\\", it's \\"" + s + "\\"!\\n";
    \} else \{
        retval = TRUE;
    \}

    if (!retval) return FALSE;

    \$xresult += "check\\n\<b\>Does this object have an environment? It shouldn't.\</b\> ";
    if (\$obptr."base:environment" == nil) \$xresult += "check\\n"; else \{
        \$xresult += "it does!\\n";
        return FALSE;
    \}
    \$xresult += "\<b\>Is this item either edible OR potable?\</b\> ";
    s = (\$obptr."base:edible" ? "edible" + (\$obptr."base:potable" ? " \<span class='note'\>AND potable!\</span\> (acceptable; not recommended)" : "") : "") + (!\$obptr."base:edible" \&\& \$obptr."base:potable" ? "potable" : "");
    if (s == "") \{
        \$xresult += "it is NOT edible, and it is NOT potable, so it is NOT a food/drink object (it is probably a vessel; TODO=vessel proofer)\\n";
        return FALSE;
    \}
    \$xresult += "yes, it is " + s + "\\n";
    \$(test-physical-spawn-style) = s == "potable";
    \$(test-physical-ban-capacity) = s == "potable";
    \$xresult += "\<b\>Default stance...\</b\> ";
    if (\$obptr."base:defaultstance" != 0) \{
        \$stances = (\{ "none", "crouch", "kneel", "lie", "sit", "stand", "hang", "float" \});
        \$xresult += "\<span style='color: yellow;'\>" + \$stances[\$obptr."base:defaultstance"] + "\</span\>\\n";
    \} else \{
        \$xresult += "none\\n";
    \}
    \$xresult += "\<b\>Gender:\</b\> ";
    if (\$obptr."base:gender") \{
        \$xresult += (\{ nil, "male", "female" \})[\$obptr."base:gender"] + "!\\n";
        return FALSE;
    \}
    \$xresult += "neutral\\n\<b\>No volition:\</b\> ";
    if (\$obptr."base:volition") \{
        \$xresult += "has volition!\\n";
        return FALSE;
    \}
    \$xresult += "check\\n\<b\>Not a weapon:\</b\> ";
    if (\$obptr."base:weapon") \{
        \$xresult += "is a weapon!\\n";
        return FALSE;
    \}
    \$xresult += "check\\n\<b\>Not wearable:\</b\> ";
    if (sizeof(\$obptr."base:parts-covered")) \{
        \$xresult += "it IS wearable -- food should not be worn...!\\n";
        return FALSE;
    \}
    \$xresult += "check\\n";
    \$auto_details = TRUE;

    /*
     * Create the list of panes to use in this proofing.
     */
    \$xpanes =
        (\{ "consumables_descriptions", "physicals", "all_details" \});

    return TRUE;
\}
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052085, "-", "SYNC", 1156237182, "zwoc", "S", 1156357424, "zwoc", "E", 1156359256, "zwoc", "E", 1199726778, "zwoc", "R", 1199732069, "???", "R", 1199824741, "zwoc", "R", 1199866112, "???", "R", 1200336770, "zwoc", "E", 1200338861, "zwoc", "EED", 1200338894, "zwoc", "EED", 1200340408, "zwoc", "EED", 1200340416, "zwoc", "EED", 1200340484, "zwoc", "EED", 1200340585, "zwoc", "EED", 1200341332, "zwoc", "EED", 1200341341, "zwoc", "EED", 1200341349, "zwoc", "EED", 1200341357, "zwoc", "EED", 1200384615, "???", "R", 1200923075, "zwoc", "EED", 1200923129, "zwoc", "EED", 1200923149, "zwoc", "EED", 1200932773, "???", "R", 1201013137, "zwoc", "S", 1201013480, "zwoc", "EED", 1201013522, "zwoc", "EED", 1201013624, "zwoc", "EED", 1201013631, "zwoc", "EED", 1201015129, "zwoc", "EED", 1201015272, "zwoc", "EED", 1203937384, "zwoc", "EED", 1203937416, "zwoc", "EED", 1203937422, "zwoc", "EED", 1203937545, "zwoc", "EED", 1203939968, "zwoc", "EED", 1203939971, "zwoc", "EED", 1203940320, "zwoc", "EED", 1203943099, "zwoc", "EED", 1203943771, "zwoc", "EED", 1203943851, "zwoc", "EED", 1203944804, "zwoc", "E", 1204647501, "zwoc", "EED", 1204647509, "zwoc", "EED", 1204647540, "zwoc", "EED", 1204647584, "zwoc", "EED", 1204647967, "zwoc", "EED", 1204649430, "zwoc", "EED", 1204649449, "zwoc", "EED", 1204649642, "zwoc", "EED", 1204649916, "zwoc", "EED", 1204649924, "zwoc", "EED", 1204649937, "zwoc", "EED", 1204649970, "zwoc", "EED", 1204650036, "zwoc", "EED", 1204650172, "zwoc", "EED", 1204650312, "zwoc", "EED", 1204650427, "zwoc", "EED", 1204653827, "zwoc", "EED", 1204654004, "zwoc", "EED", 1204654080, "zwoc", "EED", 1204724923, "zwoc", "EED", 1204820503, "???", "R" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="sys:sync:clearing">0</Core:Property>
      <Core:Property property="sys:sync:imported">
         1200932773
      </Core:Property>
    </Core:Properties>
    <Notes:Notes>
      <Notes:Category cat="QA" catstate="Open">
        <Notes:Note ix="1200336751" state="Open" user="zwoc">
           Although it is named "Edible", it refers to eating and drinking. Thus, UrLiquid and UrFood both inherit from this object.
        </Notes:Note>
      </Notes:Category>
    </Notes:Notes>
  </Base:Thing>
</object>
