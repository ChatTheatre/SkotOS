<object clone="/usr/SkotOS/obj/meracha" owner="TextIF">
  <SkotOS:MerAcHa action_id="+mhelp_backup">
    <Core:PCProperties>
      <Core:Property property="merry:global:action">
         X[M] /*

  D=Merry Quick Reference helper.

  Syntax(es):

   +mhelp beginning_of_a_function
     If the function exists or if only one function beginning with the word exists, a little info snippet is displayed for it. If more than one entry exists, a list of these is returned. If none exist, so is said.

   +mhelp "+\<function_name_one_word\>"
     This will "start" the "editor" (many quotation marks there) for a new function reference. The user will then be prompted to write any amount of lines for the function in question and then simply end with a "." (in quotations), using the 'say' verb.
   Example:
   ---
   \> +mhelp "+map_values"
   Begun describing the merry function 'map_values()'.
   Please list the function syntax as "property_type property_name, ...", e.g. "mixed foo, string bar"
   \> "mapping m"
   Wrote syntax for function 'map_values()' as: map_values( mapping m ).
   Please describe the returned value(s) (if any). If none, simply type ""
   \> "Array reference to the values in the mapping, m.
   Wrote return value description for 'map_values()' as: Array reference to the values in the mapping, m.
   Refer to other related functions. Separate each reference with a comma.
   \> "map_indices, arr_to_set"
   Referring 'map_values()' with 2 other functions: map_indices and arr_to_set.
   General description of 'map_values()': When you're done, say "."
   \> "map_values takes a mapping and returns the values as an array.
   Wrote line #1.
   \> "E.g. map_values( ([ "foo" : "bar", "fruit" : "apple" ]) ) is (\{ "bar", "fruit" \})"
   Wrote line #2.
   \> "."
   Thank you! Your submission is appreciated.
   ---

   +mhelp "-\<function_name\>"
*/

string cmd;

if( !\$(dob:words) \&\& !\$evoke )\{

  EmitTo( \$actor, "Merry Quick Reference helper.\\n\\n- This function is used to get quick reference help for a specific merry function.\\n\\nTry: +mhelp EmitTo\\n\\nYou may also use +mhelp to add new/modify/remove existing references.\\nTo add/modify: +mhelp \\"+function_name_one_word\\"\\nTo delete: +mhelp \\"-function_name_one_word\\"" );
  EmitTo( \$actor, "\\nIf you wish to see a complete list of all available references, type: +mhelp list" );
  return FALSE;

\}

cmd = \$(dob:words) ? \$(dob:words)[0] : \$evoke[1..strlen(\$evoke)-2];

if( cmd == "list" )\{ /* want a list, then */

  EmitTo( \$actor, TAG( "Complete list of references:", "imp" ));
  \$db = \$\{Neoct:Data:mhelp\};
  \$refs = map_values( \$db.names );
  \$map = ([ ]);
  for( \$i = 0; \$i \< sizeof( \$refs ); \$i++ )\{
    \$letter = lower_case(\$refs[\$i][..0]);
    if( \$map[\$letter] ) \$map[\$letter] += (\{ \$refs[\$i] \});
      else \$map[\$letter] = (\{ \$refs[\$i] \});
  \}
  \$references = \$i;
  \$ind = map_indices( \$map );
  for( \$i = 0; \$i \< sizeof( \$ind ); \$i++ )\{
    \$val = \$map[\$ind[\$i]];
    \$and = \$res = "";
    for( \$j = 0; \$j \< sizeof( \$val ); \$j++ )\{
      \$res += \$and + UnSAM(ParseXML("\<acmd tag='command' cmd='+man \\\\" + \$val[\$j] + "\>\\\\" + \$val[\$j] + "\</acmd\>" ));
      \$and = \$j+2 == sizeof( \$val ) ? " and ":", ";
    \}
    EmitTo( \$actor, TAG( upper_case(\$ind[\$i])+": ", "syntax" )+\$res );
  \}
  EmitTo( \$actor, TAG( "Number of references: "+Str(\$references), "who" ));
  return FALSE;
\}

if( cmd == "twiki" ) \{ /* want a twikified list */

  Popup( \$actor, this, "html:twiki" );
  return FALSE;
\}

\$fun = strip( lower_case( cmd )); /* case insensitive */
if( strlen( \$fun ) \> 3 \&\& \$fun[strlen(\$fun)-3..] == "()" )
  \$fun = \$fun[..strlen(\$fun)-3];

if( \$fun[0..0] == "+" \|\| \$fun[0..0] == "-" )\{
  \$rfun = strip( \$evoke[2..strlen(\$evoke)-2] );
  if( strlen( \$rfun ) \> 3 \&\& \$rfun[strlen(\$rfun)-3..] == "()" )
    \$rfun = \$rfun[..strlen(\$rfun)-3];

  /* modify a reference */
  if( \$fun[0..0] == "+" )\{
    \$fun = \$fun[1..];

    \$db = \$\{Neoct:Data:mhelp\};
    \$db.functions[\$fun] = time();
    \$db.names[\$fun] = \$rfun;

    EmitTo( \$actor, "Begun describing the merry function '"+\$rfun+"()'." );
    Popup( \$actor, \$\{MOVED:20100215-040228:Neoct:Staff:Actions:mhelp\}, "html:edit", \$qfinalize: mixed_to_ascii( (\{ "string", "string", "string", "array_commas", "array_strings", "array_strings" \}) ), \$qactor: name( \$actor ), \$qsubject: \$fun, \$qtarget: "Data:DB:mhelp", \$qdesc: mixed_to_ascii( (\{ "Function syntax (e.g. 'string s, int i')", "Return value description", "Return property type (e.g. 'int')", "Related functions (comma-separated)", "Example code", "General description" \}) ), \$qname: mixed_to_ascii( (\{ "syntaxes", "returns", "retprops", "related", "examples", "description" \}) ), \$qtype: "(\{ 0, 0, 0, 0, 1, 1 \})"  );
/* ,  \$qval: mixed_to_ascii( (\{ \$db.syntaxes[\$fun], \$db.returns[\$fun], \$db.retprops[\$fun], \$db.related[\$fun], \$db.examples[\$fun], \$db.description[\$fun] \})) */
    /* EmitTo( \$actor, "Please list the function syntax as \\"property_type property_name, ...\\", e.g. \\"mixed foo, string bar\\""  ); */
  \} else \{

    \$fun = \$fun[1..];

    \$db = \$\{Neoct:Data:mhelp\};
    \$db.description -= (\{ \$fun \});
    \$db.examples -= (\{ \$fun \});
    \$db.functions -= (\{ \$fun \});
    \$db.names -= (\{ \$fun \});
    \$db.related -= (\{ \$fun \});
    \$db.retprops -= (\{ \$fun \});
    \$db.returns -= (\{ \$fun \});
    \$db.syntaxes -= (\{ \$fun \});

    EmitTo( \$actor, "Deleted all references to '"+\$fun+"'." );
  \}

\} else \{

  /* Fetch the complete list of functions. */
  \$db = copy( \$\{Neoct:Data:mhelp\}.functions );

  /* Check if our function is listed as-is */
  if( \$db[\$fun] )\{
    /* It does. :) So print it. */
    Call( this, "print_reference" );
    return FALSE;
  \}

  /* Let's do a search and see the closest we find ... */
  \$results = prefixed_map( \$db, \$fun );

  if( map_sizeof( \$results ))\{ /* we found one or several results */
    if( map_sizeof( \$results ) == 1 ) \{
      /* we found one result. so, display it! */
      Call( this, "print_reference", \$fun: map_indices( \$results )[0] );
      return FALSE;
    \}
    /* several results. print a list */
    EmitTo( \$actor, "Multiple references begin with '"+\$fun+"':\\n\\n" );
    \$list = map_indices( \$results );
    for( \$i = 0; \$i \< sizeof( \$list ); \$i++ )
      EmitTo( \$actor, "-- "+\$\{Neoct:Data:mhelp\}.names[\$list[\$i]] );
  \} else \{
    EmitTo( \$actor, "I'm sorry, there were no matches on '"+\$fun+"'. Check the spelling and/or shorten the word a little." );
  \}

\}
      </Core:Property>
      <Core:Property property="merry:lib:print_reference">
         X[M] /*

  D=This script will print the reference of the merry function \$fun.

*/

if( !\$fun ) return FALSE;

\$db = \$\{Neoct:Data:mhelp\};

\$lasted = \$db.functions[\$fun];
if( !\$lasted ) return FALSE;

\$desc = \$db.description[\$fun];
\$exams = \$db.examples[\$fun];
\$related = \$db.related[\$fun];
\$ret = \$db.returns[\$fun];
\$syntax = \$db.syntaxes[\$fun];
\$name = \$db.names[\$fun];
\$retprop = \$db.retprops[\$fun];

if( \$desc == "" ) \$desc = nil;
if( \$exams == "" ) \$exams = nil;
if( !\$retprop ) \$retprop = ""; else if( \$retprop[strlen(\$retprop)-1..] != "*" ) \$retprop += " ";

EmitTo( \$actor, TAG( "Merry Quick Reference help\\n\\n", "imp" ));
EmitTo( \$actor, "Function: " + TAG( \$name, "who" )+"\\n\\n" );
if( \$syntax ) EmitTo( \$actor, "Syntax: " + TAG( \$retprop+\$name+"( "+\$syntax+" )", "syntax" )+"\\n\\n" );
else if( \$retprop ) EmitTo( \$actor, "Syntax: " + TAG( \$retprop+\$name+"()", "syntax" )+"\\n\\n" );
else EmitTo( \$actor, "Syntax: " + TAG( \$name+"()", "syntax" )+"\\n\\n" );
if( \$ret ) EmitTo( \$actor, "Return value(s): " + TAG( \$ret, "who" )+"\\n\\n" );
if( \$desc ) \{
  EmitTo( \$actor, TAG( "Description:", "imp" ));
  EmitTo( \$actor, TAG( "--------", "syntax" ) );
  EmitTo( \$actor, \$desc );
  EmitTo( \$actor, TAG( "--------\\n\\n", "syntax" ) );
\}
if( \$exams ) \{
  EmitTo( \$actor, TAG( "Example(s):", "imp" ));
  EmitTo( \$actor, TAG( "--------", "syntax" ) );
  EmitTo( \$actor, PRE( \$exams ));
  EmitTo( \$actor, TAG( "--------\\n\\n", "syntax" ) );
\}
if( \$related )\{
  \$add = "";
  \$value = "";
  for( \$i = 0; \$i \< sizeof( \$related ); \$i++ )\{
    \$value += \$add + \$related[\$i];
    \$add = \$i+2 == sizeof( \$related ) ? " and ":", ";
  \}
  \$value = "Related function(s): " + TAG( \$value, "who" ) + "\\n\\n";
  EmitTo( \$actor, \$value );
\}
EmitTo( \$actor, "(reference last edited "+short_time( \$lasted )+")" );
EmitTo( \$actor, TAG( "\\nAdd comment to this reference by typing +mhelp \\"!"+\$fun+"\\"", "chat" ));
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1135372241, "-", "SYNC", 1136490232, "kargh", "P" \})
      </Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
