<object clone="/usr/SkotOS/obj/meracha" owner="TextIF">
  <SkotOS:MerAcHa action_id="+setp">
    <Core:PCProperties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Neoct:Staff:Actions:+setp
 Email:         kalle@marrach.skotos.net
 Revision:      11.27
 Generated:     Sun Sep 25 01:46:00 2011 on Jonkichi
 Last revision: Wed Apr 26 11:00:56 2006 by zwoc (P)



(Do not modify #list# -- it is automatically constructed.)


-----------------------------------------------------------------------------------------------------------
 global:action        (M) Merry version of +setprop.
 lib:escape_arguments (M) Set a series of variables based on the string \$query, allowing escaping.
 lib:eval             (M) Merry Evaluator.
 lib:extract_props    (M) Extract multiple properties from a given object and a given "search queue" and
                          return these as mapped arrays (like ([ "prop" : "value", "prop2" : "value2",
                          etc. ])
 lib:propset          (M) Property set script for +setp(rop).
 lib:propset2         (M) Property set script for +setp(rop). (v2.0)
-----------------------------------------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="log:creator">
         "Kalle Alm"
      </Core:Property>
      <Core:Property property="merry:global:action">
         X[M] /*
 * D=Merry version of +setprop.
 */
int i, sz;

constant IMP = \$imperative;

\$query = \$(raw-evoke);

if (!\$query) \{
  EmitTo(\$actor, UnSAM(\$"For help, type: \<acmd cmd=\\"+man setp\\"\>+man setp\</acmd\>"));
  return FALSE;
\}

if( \$query == "undo" )
\{
  \$oldobj = \$actor."setp:undoo";
  \$oldval = \$actor."setp:undov";
  \$oldprop = \$actor."setp:undop";
  if( \$oldobj \&\& \$oldprop )\{
    EmitTo( \$actor, "Performing undo on last +setp action:\\nRestoring "+\$oldprop+" in "+dump_value( \$oldobj )+" to "+dump_value( \$oldval ) );
    \$newval = Get( \$oldobj, \$oldprop );
    Set( \$oldobj, \$oldprop, \$oldval );
    \$actor."setp:undov" = \$newval;
    EmitTo( \$actor, "Undoing again will undo the undo." );
    return FALSE;
  \} else \{
    EmitTo( \$actor, "There is no undo information in your body. Perhaps you're in the wrong body." );
    return FALSE;
  \}
\}

\$vm = \$actor.verbose;

if( \$adverb )
  if( \$adverb == "verbosely" )
  \{
    \$vm = !\$vm;

    EmitTo( \$actor, "(switching to "+(\$vm?"verbose":"brief")+" mode)\\n\\n" );

    \$actor.verbose = \$vm;

  \}
   else
  if( \$adverb == "confirmingly" )
  \{
    EmitTo( \$actor, "Confirmative consent." );
    \$confirm = TRUE;
  \}

if( \$query[0] == '@' ) \{
  /*
   * Set pointer to object.
   */
  \$query = \$query[1..];

  if(!( \$pointer = (\$query[..0] == "*" ? common::lookup(\$name: \$query[1..]) : Obj( \$query ))))
  \{
    EmitTo( \$actor, PRE( " [pointer] Unable to resolve object '"+\$query+"'" ));
    return FALSE;
  \}

  if( \$actor."setp:pointer" )
    EmitTo( \$actor, PRE( " [pointer] " + dump_value(\$actor."setp:pointer")+" --\> " + dump_value(\$pointer) ));
  else
    EmitTo( \$actor, PRE( " [pointer] " + dump_value(\$pointer) ));

  \$actor."setp:pointer" = \$pointer;
  return FALSE;
\}


if( \$dob \&\& (sz = sizeof( \$dob )) \> 1 )
  for( i = 0; i \< sz; i++ )
    Call( this, "propset2", \$t: \$dob[i] );
else
  Call( this, "propset2", \$t: \$target );
/*
 * ChangeLog [
 *    Change(2006-03-19; Zwoc)=Removed common::denied usage.
 * ]
 */
      </Core:Property>
      <Core:Property property="merry:lib:escape_arguments">
         X[M] /*

  D=Set a series of variables based on the string \$query, allowing escaping.

 ::escape_arguments( \$query: string, \$construct: (\{ "asc_subj", "prop", "value" \}), \$delimiter: " " )

*/

constant ESCAPED_DELIMITER = "ESCAPEDDELIMITER";

string query;

int pos, construct_size;
string value;

/*
 * Argument check.
 */
if( typeof( \$query ) != T_STRING )
  error( "escape_arguments(): string \$query expected" );

if( typeof( \$construct ) != T_ARRAY )
  error( "escape_arguments(): array \$construct expected" );

if( typeof( \$delimiter ) != T_STRING )
  error( "escape_arguments(): string \$delimiter expected" );

query = \$query;

/*
 * Run a replace on \$query right away, to replace any
 * double-escaped basic escaping. Additionally, replace the
 * escaped delimiters with jibberish that noone would (hopefully)
 * ever use.
 */
\$query = replace_strings( \$query, "\\\\" + \$delimiter, ESCAPED_DELIMITER, "\\\\n", "\\n", "\\\\t", "\\t", "\\\\b", "\\b", "\\\\\\\\", "\\\\" );

/*
 * Sscanf() through \$query based on \$delimiter,
 * until 1) construct_size is reached (at which
 * point the remainder of \$query is put into the
 * final property, or 2) the sscanf() fails,
 * in which case the escape_arguments() call
 * has failed as well.
 */
construct_size = sizeof( \$construct )-1;
pos            = 0;

while( pos \< construct_size \&\& sscanf( \$query, "%s"+\$delimiter+"%s", value, \$query ) == 2 )
\{
  SetVar( \$construct[pos], replace_strings( value, ESCAPED_DELIMITER, \$delimiter ));
  pos++;
\}

if( pos != construct_size )
  /*
   * Too few arguments to support construct;
   * escape_arguments() failed.
   */
  return FALSE;

SetVar( \$construct[pos], replace_strings( \$query, ESCAPED_DELIMITER, \$delimiter ));

/*
 * Successfully constructed arguments.
 * So we return TRUE.
 */
\$query = query;

return TRUE;
      </Core:Property>
      <Core:Property property="merry:lib:eval">
         X[M] /*

  D=Merry Evaluator.

*/

string code;

if( !\$what )
  error( "+setp/eval(): Missing \$what!" );

code = contains( \$what, "return " )
           ?
         "X[M] " + \$what
           :
         "X[M] return " + \$what + ";";

this."merry:lib:tmp_fun" = ascii_to_mixed( code );

\$retval = ::tmp_fun();

this."merry:lib:tmp_fun" = nil;

return \$retval;
      </Core:Property>
      <Core:Property property="merry:lib:extract_props">
         X[M] /*
  D=Extract multiple properties from a given object and a given "search queue" and return these as mapped arrays (like ([ "prop" : "value", "prop2" : "value2", etc. ])
*/

if( !\$prop \|\| !\$t ) return nil; /* do the best of this somewhat odd situation */

/*

  \$prop can be set up in three ways:

  "*value"  - anything ending with "value"
  "value*"  - anything beginning with "value"
  "*value*" - anything containing "value"

*/

constant S_CONTAINS = 1;
constant S_STARTS = 2;
constant S_ENDS = 3;

if( \$prop[..0] == "*" )
  if( \$prop[strlen( \$prop )-1..] == "*" )\{
    \$fval = \$prop[1..strlen( \$prop )-2];
    \$stype = S_CONTAINS;
  \} else \{
    \$fval = \$prop[1..];
    \$stype = S_ENDS;
  \}
else if( \$prop[strlen( \$prop )-1..] == "*" )\{
  \$fval = \$prop[0..strlen( \$prop )-2];
  \$stype = S_STARTS;
\} else \{
  EmitTo( \$actor, "WARNING: Query failed: \$prop." );
  return nil;
\}

\$findlen = strlen( \$fval );

/*
  Firstly, fetch all variables from the subject:
*/

\$all_props = Get( \$t, "*" );

/* Secondly, step through each and every one; and extract all matches */

\$indices = map_indices( \$all_props );

\$res = ([ ]);

\$starts = 0;
\$ends = 0;
\$contains = 0;

\$count = 0;
\$done = FALSE;
for( \$i = 0; !\$done \&\& \$i \< sizeof( \$indices ); \$i++ )\{
  \$current = \$indices[\$i];
  if( strlen( \$current ) \>= \$findlen )\{
    switch( \$stype )\{
      case S_STARTS: \$match = \$current[0..\$findlen-1] == \$fval; break;
      case S_ENDS: \$match = \$current[strlen( \$current )-\$findlen..] == \$fval; break;
      case S_CONTAINS: \$match = contains( \$current, \$fval ); break;
    \}
    if( \$match ) \$res += ([ \$current : \$all_props[\$current] ]);
  \}
  if( \$current[0..0] \> \$fval[0..0] ) \$done = TRUE; /* We're past the alphabetical list of matches */
\}

return \$res;
      </Core:Property>
      <Core:Property property="merry:lib:propset">
         X[M] /*

  D=Property set script for +setp(rop).
  [DEPRECATED! See 'propset2' instead!]

*/

if( \$actor."setp:beta" )
  return ::propset2();

if( \$t )\{

  \$asc_subj = dump_value(\$t);
  if( NRefsEqual( NRefOb( \$t ), \$t )) \$detail_set = nil; else \$detail_set = NRefDetail( \$t );
  \$subject = NRefOb( \$t );

\} else \{

  if( contains( \$query, "\|" )) \$delimiter = "\|"; else
  if( contains( \$query, " " )) \$delimiter = " "; else
  if( \$actor."setp:pointer" )  \$delimiter = " "; else \{
    EmitTo( \$actor, PRE(\$HELP) );
    EmitTo( \$actor, PRE(\$HELP_EXT) );
    return FALSE;
  \}

  sscanf( \$query, "%s"+\$delimiter+"%s", \$asc_subj, \$query );

  if( \$asc_subj[..0] == "*" )
    \$subject = Call( \$\{Lib:common\}, "lookup", \$name: \$asc_subj[1..] );
  else
    \$subject = Obj( \$asc_subj );

  if( !\$subject )
    \$query = \$asc_subj + \$delimiter + \$query;

\}

if( !\$subject ) \{
  \$subject = \$actor."setp:pointer";
  \$asc_subj = name(\$subject);
\}

if( !\$subject )\{

  EmitTo( \$actor, "Cannot find "+dump_value(\$asc_subj)+"." );
  return FALSE;

\}

if( contains( \$query, "\|" ) \&\& !contains( \$query, "X[S]" ) \&\& !contains( \$query, "NREF" ))
  \$delimiter = "\|";
else if( contains( \$query, " " ))
  \$delimiter = " ";
else \{
  EmitTo( \$actor, PRE(\$HELP) );
  EmitTo( \$actor, PRE(\$HELP_EXT) );
  return FALSE;
\}

sscanf( \$query, "%s"+\$delimiter+"%s", \$prop, \$value );

if( \$detail_set ) \{
  \$prop = "details:"+\$detail_set+":"+\$prop;
\} else \{
  /*
   * Check if this contains asterixes, in which
   * case we need to extract those from the target.
   */
  if( contains( \$prop, "*" ))
    \$multi_prop = ::extract_props(\$t: \$subject, \$prop: \$prop);

\}

if( \$value[strlen(\$value)-1..] == ")" )\{
  \$vai = TRUE;
  if( strlen( \$value ) \> 3 \&\& \$value[..3] == "OBJ(" )
    \$value = Obj( \$value[4..strlen(\$value)-1] );
  else if( strlen( \$value ) \> 4 \&\& \$value[..4] == "NREF(" \&\& sscanf( \$value, "NREF(%s\|%s)", \$obj, \$detail ) == 2 )\{
    \$value = NewNRef( Obj( \$obj ), \$detail );
  \} else \$vai = FALSE;
\}
if( !\$vai ) \$value = ascii_to_mixed( \$value );

if( typeof( \$value ) == T_STRING \&\& \$value[0..0] == "*" )\{
  \$pval = Call( \$\{Lib:common\}, "lookup", \$name: \$value[1..] );
  if( \$pval ) \$value = \$pval;
\}

if( \$multi_prop )\{
  \$multi_ind = map_indices( \$multi_prop );
  \$multi = TRUE;

  if( !sizeof( \$multi_ind ))\{
    EmitTo( \$actor, "- No matching properties found in "+dump_value( \$subject )+"." );
  \}

  if( sizeof( \$multi_ind ) \> 5 \&\& !\$confirm )\{
    EmitTo( \$actor, "ERROR: This action would set "+Str( sizeof( \$multi_ind ))+" properties; to do this, use +setp CONFIRM" );
    return FALSE;
  \}
\}

\$delay(0, FALSE, "91e4");
\$count = 0;
\$step = 0;
\$done = FALSE;

\$subject."setp:actor" = \$actor;

while( !\$done )\{
  \$count++;
  if( \$multi_ind \&\& \$step \< sizeof( \$multi_ind ))\{
    \$prop = \$multi_ind[\$step];
    \$step++;
  \}

  \$oldval = Get( \$subject, \$prop );
  if( \$vm \&\& !\$multi )
  \{
    EmitTo( \$actor, "Setting '"+\$prop+"' in "+dump_value(\$subject)+";\\n - from: "+dump_value(\$oldval)+"\\n - to: "+dump_value(\$value) );
  \}
   else
  if( \$vm \|\| !\$multi )
    EmitTo( \$actor, "Setting '"+\$prop+"' in "+dump_value(\$subject)+" to "+dump_value(\$value)+"." );

  Set( \$subject, \$prop, \$value );

  if( typeof( \$subject.revisions ) != T_ARRAY )
    \$subject.revisions = (\{ \});
  \$subject.revisions += (\{ time(), "S", \$actor."udat:name" \});

  if( \$multi_ind \&\& \$step \>= sizeof( \$multi_ind )) \$done = TRUE;
  else if( !\$multi_ind ) \$done = TRUE;

\}
\$subject."setp:actor" = nil;

Set( \$actor, "setp:undoo", \$subject );
Set( \$actor, "setp:undop", \$prop );
Set( \$actor, "setp:undov", \$oldval );

if( \$count \> 1 ) EmitTo( \$actor, Str( \$count ) + " values "+(\$value==nil?"unset":"set")+" in "+dump_value( \$subject )+"." );
      </Core:Property>
      <Core:Property property="merry:lib:propset2">
         X[M] /*
 * D=Property set script for +setp(rop). (v2.0)
 */
if( \$t )
\{
  \$asc_subj = dump_value(\$t);
  \$detail_set = IsPrime( \$t ) ? nil : NRefDetail( \$t );
  \$subject = NRefOb( \$t );

  if( !::escape_arguments(\$construct: (\{ "prop", "value" \}), \$delimiter: " ")) \{
    EmitTo(\$actor, UnSAM(\$"For help, type: \<acmd cmd=\\"+man setp\\"\>+man setp\</acmd\>"));
    return FALSE;
  \}
\}
 else
\{
  if( !::escape_arguments(\$query: \$query, \$construct: (\{ "asc_subj", "prop", "value" \}), \$delimiter: " "))
  \{
    if( !::escape_arguments(\$query: \$query, \$construct: (\{ "prop", "value" \}), \$delimiter: " "))
      return EmitTo(\$actor, UnSAM(\$"For help, type: \<acmd cmd=\\"+man setp\\"\>+man setp\</acmd\>")), 0;
    else
      \$asc_subj = "-";
  \}

  if( \$asc_subj[..0] == "*" )
    \$subject = common::lookup(\$name: \$asc_subj[1..]);
  else
    \$subject = Obj( \$asc_subj );

  if( !\$subject )
  \{
    if( !::escape_arguments(\$query: \$query, \$construct: (\{ "prop", "value" \}), \$delimiter: " "))
      return EmitTo(\$actor, UnSAM(\$"For help, type: \<acmd cmd=\\"+man setp\\"\>+man setp\</acmd\>")), 0;

    \$subject = \$actor."setp:pointer";
    if( !\$subject )
    \{
      EmitTo( \$actor, PRE( "error: can't resolve object: "+\$asc_subj ) );
      return FALSE;
    \}
    \$asc_subj = name(\$subject);
  \}
\}

if( \$detail_set )
  \$prop = "details:"+\$detail_set+":"+\$prop;
 else
\{
  /*
   * Check if this contains asterixes, in which
   * case we need to extract those from the target.
   */
  if( contains( \$prop, "*" ))
    \$multi_prop = ::extract_props(\$t: \$subject, \$prop: \$prop);

\}

if( \$value[strlen(\$value)-1..] == ")" )
\{
  \$vai = TRUE;
  if( strlen( \$value ) \> 3 \&\&
      \$value[..3] == "OBJ(" )
    \$value = Obj( \$value[4..strlen(\$value)-1] );
   else
  if( strlen( \$value ) \> 4 \&\&
      sscanf( \$value, "NREF(%s\|%s)", \$obj, \$detail ) == 2 )
    \$value = NewNRef( Obj( \$obj ), \$detail );
   else
    \$vai = FALSE;
\}

if( !\$vai \&\&
    strlen( \$value ) \> 4 \&\&
    sscanf( \$value, "EVAL:%s", \$merry ) == 1 )
\{
  string err;
  err = catch( \$value = ::eval(\$what: \$merry));
  if( err )
  \{
    EmitTo( \$actor, "Merry error in evaluated code:\\n- Code: " + \$merry + "\\n- Error: " + err );
    return FALSE;
  \}
  \$vai = TRUE;
\}

if( !\$vai )
  \$value = ascii_to_mixed( \$value );

if( typeof( \$value ) == T_STRING \&\&
    \$value[0..0] == "*" )
\{
  \$pval = common::lookup(\$name: \$value[1..]);
  if( \$pval )
    \$value = \$pval;
\}

if( \$multi_prop )
\{
  \$multi_ind = map_indices( \$multi_prop );
  \$multi = TRUE;

  if( !sizeof( \$multi_ind ))
    EmitTo( \$actor, "- No matching properties found in "+dump_value( \$subject )+"." );

  if( sizeof( \$multi_ind ) \> 5 \&\& !\$confirm )
  \{
    EmitTo( \$actor, "ERROR: This action would set "+Str( sizeof( \$multi_ind ))+" properties; to do this, use +setp CONFIRM" );
    return FALSE;
  \}
\}

\$delay(0, FALSE, "91e4");
\$count = 0;
\$step = 0;
\$done = FALSE;

\$subject."setp:actor" = \$actor;

while( !\$done )
\{
  \$count++;
  if( \$multi_ind \&\& \$step \< sizeof( \$multi_ind ))
  \{
    \$prop = \$multi_ind[\$step];
    \$step++;
  \}

  \$oldval = Get( \$subject, \$prop );
  if( \$vm \&\& !\$multi \&\& typeof( \$oldval ) \< 5 )
  \{
    EmitTo( \$actor, "Setting '"+\$prop+"' in "+dump_value(\$subject)+";\\n - from: "+dump_value(\$oldval)+"\\n - to: "+dump_value(\$value) );
  \}
   else
  if( \$vm \|\|
      !\$multi )
    EmitTo( \$actor, "Setting '"+\$prop+"' in "+dump_value(\$subject)+" to "+dump_value(\$value)+"." );

  \$err = catch(Set( \$subject, \$prop, \$value ));
  if (\$err) \{
      EmitTo(\$actor, TAG("Error when setting " + \$prop + " in " + name(\$subject) + ": " + \$err, "imp"));
  \}

  if( \$multi_ind \&\&
      \$step \>= sizeof( \$multi_ind ))
    \$done = TRUE;
  else if( !\$multi_ind ) \$done = TRUE;

\}
\$subject."setp:actor" = nil;

if( typeof( \$subject.revisions ) != T_ARRAY )
  \$subject.revisions = (\{ \});
\$subject.revisions += (\{ time(), \$actor."udat:name", "S" \});

Set( \$actor, "setp:undoo", \$subject );
Set( \$actor, "setp:undop", \$prop );
Set( \$actor, "setp:undov", \$oldval );
if (\$prop == "revisions")
  Set(\$\{Data:DB:spb\}, Str(time()), (\{ ur_name(\$actor), ur_name(\$subject), \$value, \$oldval \}));

if( \$count \> 1 )
  EmitTo( \$actor, Str( \$count ) + " values "+(\$value==nil?"unset":"set")+" in "+dump_value( \$subject )+"." );
/*
 * ChangeLog [
 *      Change(Apr 26 2006 17:00; Zwoc)=Added catching of errors when setting a property. The error is emitted to the actor without the full trace output.
 * ]
 */
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1071502504, "zwoc", "P", 1080683361, "zwoc", "P", 1080752862, "zwoc", "P", 1080753302, "zwoc", "P", 1080753313, "zwoc", "P", 1080753351, "zwoc", "P", 1080753551, "zwoc", "P", 1080753788, "zwoc", "P", 1080753865, "zwoc", "P", 1080753986, "zwoc", "P", 1080754103, "zwoc", "P", 1080763399, "zwoc", "P", 1080763678, "zwoc", "P", 1080763838, "zwoc", "P", 1080763844, "zwoc", "P", 1080765060, "zwoc", "P", 1080765069, "zwoc", "P", 1080765176, "zwoc", "P", 1080765215, "zwoc", "P", 1080765266, "zwoc", "P", 1080765282, "zwoc", "P", 1080765337, "zwoc", "P", 1080765384, "zwoc", "P", 1080765431, "zwoc", "P", 1080765537, "zwoc", "P", 1080765632, "zwoc", "P", 1080768542, "zwoc", "P", 1080768633, "zwoc", "P", 1080768845, "zwoc", "P", 1081664599, "zwoc", "P", 1082516667, "zwoc", "P", 1082517205, "zwoc", "P", 1082521822, "zwoc", "P", 1082521929, "zwoc", "P", 1082522168, "zwoc", "P", 1082522321, "zwoc", "P", 1082522329, "zwoc", "P", 1082522359, "zwoc", "P", 1082522380, "zwoc", "P", 1082523924, "zwoc", "P", 1084459030, "zwoc", "P", 1094953526, "zwoc", "P", 1094953583, "zwoc", "P", 1094953595, "zwoc", "P", 1094953658, "zwoc", "P", 1094953697, "zwoc", "P", 1094953781, "zwoc", "P", 1094953873, "zwoc", "P", 1094953903, "zwoc", "P", 1094953953, "zwoc", "P", 1094954017, "zwoc", "P", 1094954023, "zwoc", "P", 1094954034, "zwoc", "P", 1094954068, "zwoc", "P", 1094954381, "zwoc", "P", 1094954464, "zwoc", "P", 1094954570, "zwoc", "P", 1094954594, "zwoc", "P", 1094954735, "zwoc", "P", 1094954798, "zwoc", "P", 1094954860, "zwoc", "P", 1094954904, "zwoc", "P", 1094954934, "zwoc", "P", 1100569512, "zwoc", "P", 1100570124, "zwoc", "P", 1100570223, "zwoc", "P", 1100570532, "zwoc", "P", 1109074857, "zwoc", "P", 1109074996, "zwoc", "P", 1121694905, "zwoc", "P", 1121694957, "zwoc", "P", 1142799131, "zwoc", "P", 1142799143, "zwoc", "P", 1146063461, "zwoc", "P", 1146063645, "zwoc", "P", 1146063656, "zwoc", "P" \})
      </Core:Property>
      <Core:Property property="{email}">
         "kalle@marrach.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">11</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1146063656
      </Core:Property>
      <Core:Property property="{sub_rev}">27</Core:Property>
    </Core:PCProperties>
  </SkotOS:MerAcHa>
</object>
