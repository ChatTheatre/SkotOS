<object clone="/usr/SkotOS/obj/verb" owner="SkotOS">
  <Socials:Verb imp="+finger" evoke="optional" audible="false" private="false" secret="false" obscured="false" target-abstracts="false" disabled="false" ooc="false" raw_verb="true">
    <Ur:UrObject/>
    <Socials:SocialObjects/>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="#list#">
         X[M] /*

-----------------------------------
 LIBRARY CONTENT (Merry/SAM)

 Object:        Jonkichi:neoct:staff:verb:+finger
 Maintainer:    Kalle Alm
 Email:         kalle@mortalis.skotos.net
 Revision:      1.5
 Generated:     Sun Sep 25 01:45:56 2011 on Jonkichi
 Last revision: Tue Oct 10 04:33:08 2006 by zwoc (P)



(Do not modify #list# -- it is automatically constructed.)


----------------------------------------------------------------------------
 global:command (M) Look up an account's info.
 lib:lookup     (M) Look up information about \$acct and display to \$actor.
----------------------------------------------------------------------------

*/
      </Core:Property>
      <Core:Property property="merry:global:command">
         X[M] /*
 * D=Look up an account's info.
 */
string acct;
object char;

if (!\$line) \{
    EmitTo(\$actor, PRE("Usage: " + \$imperative + " [character name]"));
    return nil;
\}

char = common::lookup(\$name: \$line);
if (!char) \{
    EmitTo(\$actor, "Character cannot be found.");
    return nil;
\}
acct = char."skotos:creator";
if (!acct) \{
    EmitTo(\$actor, "The character " + name(char) + " does not have a skotos:creator.\\nIn other words, that body is broken.");
    return nil;
\}

::lookup(\$acct: acct);
      </Core:Property>
      <Core:Property property="merry:lib:lookup">
         X[M] /*
 * D=Look up information about \$acct and display to \$actor.
 *
 * Author: Kalle Alm
 * Email:  kalle@mortalis.skotos.net
 * Since:  Jan 22 12:33, 2006
 * State:  EXPERIMENTAL
 */
mixed info;
int tdays;
object *bodies;

info= Obj("UserAPI:UDats:" + \$acct[0..0] + ":" + \$acct);

if(info == nil) \{
    EmitTo(\$actor, "Account does not exist.");
    return nil;
\}

info = structure_propmap(copy(info."*"));
info["revisions"] = nil;

if (catch(bodies = userapi::query_bodies_in_roster(\$user: \$acct))) \{
    EmitTo(\$actor, "That user either does not exist, or has never logged in.");
    return nil;
\}

if(info["created"]) \{
    tdays = ((time() - info["created"]) / 86400);
\}

EmitTo(\$actor, PRE(
        "----- Finger Information -----\\n" +
        "Account name:       " + (info["acct"] ? info["acct"] : \$acct) + "\\n" +
        "Email:              " + (info["email"] ? Str(info["email"]) : "N/A") + "\\n" +
        "Account status:     " + (info["type"] ? info["type"] + (info["host"] ? "; host" : "") + (info["banned"] ? "; banned" : "") : "N/A") + "\\n" +
        "---\\n" +
        (info["realname"] ? "Real name:          " + (info["realname"] ? info["realname"] : "N/A") + "\\n" : "") +
        (info["birthday"] ? "Birthday:           " + (info["birthday"] ? info["birthday"] : "N/A") + "\\n" : "") +
        (info["gender"] ?   "Gender:             " + (info["gender"] ? info["gender"] : "N/A") + "\\n"   : "") +
        "User status:        " + (info["status"] ? Str(info["status"]) : "N/A") + "\\n" +
        "--\\n" +
        "Created:            " + (info["created"] ? ctime(info["created"]) : "N/A") + "\\n" +
        "Characters played:  " + Describe(bodies) + "\\n" +
        "Last seen [text]:   " + (info["lasttext"] ? info["lasttext"] : "N/A") + "\\n" +
        "Last seen [http]:   " + (info["lasthttp"] ? info["lasthttp"] : "N/A") + "\\n" +
        "--\\n" +
        "# of Days:          " + (info["days"] ? Int(info["days"]) : "N/A") + "\\n" +
        "Total Days:         " + (tdays ? tdays : "N/A") + "\\n" +
        "% of Days:          " + (tdays ? (tdays \> 0 ? format_float((Flt(info["days"])/(float)tdays)*100.0, 2) : "100") : "") + "\\n"
    ));

/*
 * ChangeLog [
 *    Change(Jan 22 12:33, 2006; Zwoc)=Added script to codebase.
 * ]
 */
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1636995281, "bobo", "E", 1637000386, "bobo", "R" \})
      </Core:Property>
      <Core:Property property="{author}">"Kalle Alm"</Core:Property>
      <Core:Property property="{email}">
         "kalle@mortalis.skotos.net"
      </Core:Property>
      <Core:Property property="{rev}">1</Core:Property>
      <Core:Property property="{sub_rev_stamp}">
         1160469188
      </Core:Property>
      <Core:Property property="{sub_rev}">5</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
