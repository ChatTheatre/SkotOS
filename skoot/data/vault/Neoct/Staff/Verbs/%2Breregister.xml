<object clone="/usr/SkotOS/obj/verb" owner="TextIF">
  <Socials:Verb imp="+reregister" evoke="optional" audible="false" private="true" secret="true" obscured="true" target-abstracts="false" disabled="false" ooc="true" raw_verb="false">
    <Ur:UrObject/>
    <Socials:SocialObjects>
      <Socials:SocialObject role="raw" direct="false" single="false" raw="true" requirement="optional" distance="far">
        <Socials:SocObPreps/>
        <Socials:SocObFilters/>
      </Socials:SocialObject>
    </Socials:SocialObjects>
    <Socials:VerbActions/>
    <Core:Properties>
      <Core:Property property="merry:global:command">
         X[M] /*
 * merry:global:command
 *
 * Implements the +reregister command, which moves a previously unregistered
 * body back onto the original account.
 * It performs some checks that this really is an unregistered body.
 */
string name, creator;
object owner, *targets, target, *bodies;

if (!\$(raw:words)) \{
    EmitTo(\$actor, "Usage: " + \$imperative + " \<body name\>");
    return FALSE;
\}

name = implode(\$(raw:words), " ");
targets = Get(UserAPI::, "all-bodies:" + name);

if (!targets \|\| !sizeof(targets)) \{
    EmitTo(\$actor, \$imperative + ": Could not find \\"" + name + "\\".  Aborting.");
    return FALSE;
\}

if (sizeof(targets) \> 1) \{
    EmitTo(\$actor, \$imperative + ": \\"" + name + "\\" is ambiguous.  Try to be more specific?");
    return FALSE;
\}

target = targets[0];

if (!target."skotos:unregistered") \{
    EmitTo(\$actor, \$imperative + ": " + Describe(target) + " is not an unregistered character.  Aborting.");
    return FALSE;
\}

creator = target."skotos:creator";
if (!creator) \{
    EmitTo(\$actor, \$imperative + ": " + Describe(target) + " has no known creator account.  Aborting.");
    return FALSE;
\}

owner = Get(UserAPI::, "udats:" + creator);
if (!owner) \{
    EmitTo(\$actor, \$imperative + ": " + Describe(target) + ": Creator acount (" + creator + ") does not exist anymore.  Aborting.");
    return FALSE;
\}

bodies = UserAPI::query_bodies_in_roster(\$user: creator);
if (bodies \&\& sizeof(bodies \& (\{ target \})) \> 0) \{
    EmitTo(\$actor, \$imperative + ": " + Describe(target) + " is still or again registered to the account \\"" + creator + "\\".  Aborting.");
    return FALSE;
\}

EmitTo(\$actor, "Moving skotos:unregistered property aside...");

target."skotos:original_unregistered" = target."skotos:unregistered";
target."skotos:unregistered" = nil;

UserAPI::add_body_to_roster(\$body: target, \$user: creator);

EmitTo(\$actor, Describe(target) + " is now again registered to the account \\"" + creator + "\\".");

return FALSE;
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1173810350, "nino", "E", 1173810387, "nino", "R", 1173810408, "nino", "R" \})
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Socials:Verb>
</object>
