<object clone="/obj/properties" owner="TextIF">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="page">
         "\<h1 style=\\"text-align: center;\\"\>The Signal System\</h1\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<div style=\\"text-align: center;\\"\>\<span style=\\"font-style: italic;\\"\>A Technical Summary\</span\>\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</div\>\<p\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n(TWiki version available at: \<a href=\\"https://troll.skotos.net/twiki/bin/view/Builders/SignalSystem\\"\>https://troll.skotos.net/twiki/bin/view/Builders/SignalSystem\</a\>)\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</p\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Introduction\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nWhen things happen in the physical world, signals are triggered. These signals are hooks onto which developers hang code; code that makes special effects happen, making the world more dynamic.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nWhen a player takes a bite out of a donut, for example, there are certain things the system always does automatically -- reduces the bulk of the donut, or if it's the last bite, destroys the donut object.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nA developer can make a magical donut with fragments of scripting code in it, code that catches the various 'eat' signals, so that something special happens when the player takes a bite. For example, perhaps each nibble you take out of the donut realistically increases the player's weight by a small amount 24 hours later? That would be quite simple to do using signals.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Signal Names\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nCurrently all scripting code fragments are written in \<span style=\\"text-decoration: line-through;\\"\>Bilbo or \</span\>Merry, and the code is stored in properties on the object. These properties have names, and the names are chosen according to a specific naming scheme --\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li style=\\"text-decoration: line-through;\\"\>Bilbo script property names start with 'bilbo:'\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>Merry script property names start with 'merry:'\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nAfter this language identifier comes the type of signal. The current list of types is:\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>act\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>react\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li style=\\"text-decoration: line-through;\\"\>auto\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li style=\\"text-decoration: line-through;\\"\>solo\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>witness\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nOf these, 'auto' and 'solo' are old, and should not be used in new code.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThe last part of the property name identies which actual signal it is. For example, in the case of the eaten donut, the signal is named 'eat'. To catch a player eating the magic donut, then, you would place your code in the property e.g. 'merry:react:eat'.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Objects And More On Signal Types\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThere are usually three groups of objects that may take an interest in any given physical event --\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>The object performing the action -- e.g. the player eating the donut. This is where the \<span style=\\"font-weight: bold;\\"\>act\</span\> type is used.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>The target of the action -- e.g. the donut. Use the \<span style=\\"font-weight: bold;\\"\>react\</span\> type here.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>The other objects in the room, who observe the action taking place but do not take part in it. Use \<span style=\\"font-weight: bold;\\"\>witness\</span\> here.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThose are the most straight-forward groups, but there are others --\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>When unlocking a door, the player 'acts', the door 'reacts', but what about the key? The key should also have signals run in it. I may want a key to break when used, or maybe set the player on fire, or... whatever. Thus there is need for more than one type of 'react'; one for each class of objects in an action.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>When I'm moving from one room to another, there are witnesses both in the room I'm leaving, and in the room I'm entering; there is also both an entrance detail and an exit detail that should be given the chance to react.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>If I shout very loudly, the shout may reach 20 rooms. Each one is full of witnesses.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>It may be the environment itself should also always be given a chance to react to whatever is being done in it.\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nFor all these reasons, we extend the signal type name. Thus when unlocking a door, we have:\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>merry:act:unlock\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in the actor\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:react:unlock\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in the lock\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:react:unlock-using\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in the key\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:react:unlock-in\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in the room\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:witness:unlock\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in everyone watching\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nWhen moving between rooms,\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>merry:act:enter\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:react:enter-into\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in the current room's exit detail\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:react:enter-from\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in the destination room's entrance detail\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:witness:enter-into\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in everyone watching in current room\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:witness:enter-from\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>in everyone watching in destination room\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Signal Timing\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nIf all this weren't complicated enough, there is yet another dimensions in which these signals spread out -- time. Each signal is actually triggered three times, under different conditions, and each type is used for a different purpose.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nFirst, the \<span style=\\"font-weight: bold;\\"\>pre\</span\> signal is triggered almost immediately when the action begins. It occurs before most error checking is done on the parameters. If I try to eat an inedible object, the action should abort with a \\"You can't eat that.\\" error message, but not before the pre signal has been run. The developer may replace the standard error message, and thus respond in some interesting way to the player trying to eat e.g. a doorknob.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nSignals return true or false. The pre signal's return value determines wether to abort the action or let it proceed. This signal is also the only one that is allowed to actually modify the signal's input values. For example, if I had a mute curse, I might have a script that intercepts socials with evokes and turns the evoke into \\"...\\".\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThe \<span style=\\"font-weight: bold;\\"\>main\</span\> signal itself, sometimes called the \<span style=\\"font-weight: bold;\\"\>standard\</span\> signal, or \\"\<span style=\\"font-weight: bold;\\"\>std\</span\>\\" abbreviated -- is run when the action is just about to irreversibly execute. All sanity checking has been done at this point and the action \<span style=\\"font-style: italic;\\"\>will\</span\> execute unless the signal forbids it. Once again, the return value determines whether to abort the signal or not.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<span style=\\"font-style: italic;\\"\>Note: Any signal that does choose to abort the action must provide a message to the user explaining why, or the action will fail silently.\</span\>\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThe last signal, the \<span style=\\"font-weight: bold;\\"\>post\</span\> one, is used when the action has already succeeded. It is run in a separate thread. It can output extra text to the user, of course, but more commonly it is used to handle side-effects of the action, often involving delays. Eating a poisoned donut, the post version of the eat signal may be used to start a 6-hour delay, at the end of which the player vomits profusely and, perhaps, dies. The return value of a post action does not, naturally, determine whether an action succeeds or not. Instead, it determines whether other post actions, if any, may execute after it has finished. Thus, \<span style=\\"font-style: italic;\\"\>unless there is good reason to, a \</span\>post\<span style=\\"font-style: italic;\\"\> script should \</span\>always\<span style=\\"font-style: italic;\\"\> return TRUE, or it runs the risk of breaking other code.\</span\> (Modified by Kalle to redescribe how return values are handled in post actions.) \<span style=\\"color: rgb(80, 39, 216);\\"\>NB Witness does not allow -post signals - Leanan\</span\> / \<font color=\\"red\\"\>Witness does allow -post signals, but not all signalssupport post. In fact, witnessing a login attempt MUST be done as-post, because the login signal only triggers the post action. -Kalle.\</font\>\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nExamples of valid signal names, then, include\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<ul\>\<li\>merry:witness-re:move-in\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<li\>merry:react-post:unlock-using\</li\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</ul\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Signals and Socials\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nSocial verbs are special in that they normally only cause messages (and possibly prox movement and consent requests), but it is possible to hook actions into specific verbs as well. For example, the developer may write a react-script for 'kiss' in a ring, and trigger some magical effect when a player kisses a ring.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nA word of warning first: it is very easy to accidentally create 'guess the verb' puzzles using this functionality -- i.e. situations where the player is forced to type a specific verb to trigger a script, when from the player's perspective any of the verb's synonyms ought to have the same effect. Guess-the-verb puzzles are \<span style=\\"font-weight: bold;\\"\>strongly\</span\> discouraged. If you can 'tug' a rope, you should be able to 'pull' it with the same effect.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nA system of semantic tags is being developed to address this problem, but it is not finished yet. For now, you have to create properties for each verb synonym, and use inheritance to point to a single script that handles all the verbs in the same way. \<span style=\\"font-style: italic;\\"\>Update: Such a system is in place, but requires work to make a reality. For instance, a react:tag/pulling-iob script could catch both pull, tug, yank, and so on in one single script, but only if each of the pull-y verb objects were given the \\"tag/pulling\\" action. This has partially been done. For instance, there are sense actions which include sets of sensing verbs, such as sense/touch,which includes touch, stroke, caress, etc.\</span\>\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nThe script names for socials are constructed from the imperative form of the social and, in the case of the react scripts, the role identifiers of the various social objects that are reacting. These role identifiers are not yet settled for all the social verbs. At the moment, they tend to be 'dob' or 'iob' most of the time, for direct object and indirect object.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nIf we wanted to make a sword that glimmers when it's waved, you'd create a script called merry:react:wave-dob (because when you wave a sword, the sword is the direct object -- the dob). If you wanted to make a guard who reacts when you wave at him, you'd give him a merry:react:wave-iob (because when you wave \<span style=\\"font-style: italic;\\"\>at\</span\> something, it's an indirect object -- the iob).\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nSo these 'dob' and 'iob' role names are identical to the 'using' role in the unlock signal example above. Soon, socials should receive more sensible role names, more like 'using' than the current unintuitive 'iob'.\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Signal Reference\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nHere is a table of existing signals, the roles they take, and the arguments they set:\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<p\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\</p\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<table cellspacing=\\"1\\" cellpadding=\\"0\\" border=\\"1\\"\>\<tbody\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> signal \</td\>\<td bgcolor=\\"#ffffcc\\"\> pre \</td\>\<td bgcolor=\\"#ffffcc\\"\> sig \</td\>\<td bgcolor=\\"#ffffcc\\"\> post \</td\>\<td bgcolor=\\"#ffffcc\\"\> arg \</td\>\<td bgcolor=\\"#ffffcc\\"\> type \</td\>\<td bgcolor=\\"#ffffcc\\"\> description \</td\>\<td bgcolor=\\"#ffffcc\\"\> role \</td\>\<td bgcolor=\\"#ffffcc\\"\> description \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> quit \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> disconnect \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> disconnect from the game \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> linkdie \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> login \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> default \</td\>\<td bgcolor=\\"#ffffff\\"\> obj \</td\>\<td bgcolor=\\"#ffffff\\"\> fall-back starting location \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> open \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> what \</td\>\<td bgcolor=\\"#ffffcc\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffcc\\"\> nrefs to attempt to open \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid doors to attempt to open \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> close \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> what \</td\>\<td bgcolor=\\"#ffffff\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffff\\"\> nrefs to attempt to close \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> valid doors to attempt to close \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> unlock \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> what \</td\>\<td bgcolor=\\"#ffffcc\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffcc\\"\> nrefs to attempt to unlock \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid doors to attempt to unlock \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> keys \</td\>\<td bgcolor=\\"#ffffff\\"\> obj * \</td\>\<td bgcolor=\\"#ffffff\\"\> keys available for use \</td\>\<td bgcolor=\\"#ffffff\\"\> using \</td\>\<td bgcolor=\\"#ffffff\\"\> keys available for use \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> explicit \</td\>\<td bgcolor=\\"#ffffcc\\"\> int \</td\>\<td bgcolor=\\"#ffffcc\\"\> did the player specify keys to use? \</td\>\<td bgcolor=\\"#ffffcc\\"\> in \</td\>\<td bgcolor=\\"#ffffcc\\"\> the environment of the player \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> lock \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> what \</td\>\<td bgcolor=\\"#ffffff\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffff\\"\> nrefs to attempt to lock \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> valid doors to attempt to lock \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> keys \</td\>\<td bgcolor=\\"#ffffcc\\"\> obj * \</td\>\<td bgcolor=\\"#ffffcc\\"\> keys available for use \</td\>\<td bgcolor=\\"#ffffcc\\"\> using \</td\>\<td bgcolor=\\"#ffffcc\\"\> keys available for use \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> explicit \</td\>\<td bgcolor=\\"#ffffff\\"\> int \</td\>\<td bgcolor=\\"#ffffff\\"\> did the player specify keys to use? \</td\>\<td bgcolor=\\"#ffffff\\"\> in \</td\>\<td bgcolor=\\"#ffffff\\"\> the environment of the player \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> drop \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> what \</td\>\<td bgcolor=\\"#ffffcc\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffcc\\"\> nrefs to attempt to drop \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid objects to attempt to drop \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> into \</td\>\<td bgcolor=\\"#ffffff\\"\> where the dropped objects go \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> take \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> what \</td\>\<td bgcolor=\\"#ffffcc\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffcc\\"\> nrefs to attempt to take \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid objects to attempt to drop \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> from \</td\>\<td bgcolor=\\"#ffffff\\"\> where each object is taken from \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> place \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> what \</td\>\<td bgcolor=\\"#ffffcc\\"\> NRef * \</td\>\<td bgcolor=\\"#ffffcc\\"\> nrefs to attempt to place \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid objects to attempt to place \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> where \</td\>\<td bgcolor=\\"#ffffff\\"\> object \</td\>\<td bgcolor=\\"#ffffff\\"\> destination of objects \</td\>\<td bgcolor=\\"#ffffff\\"\> onto \</td\>\<td bgcolor=\\"#ffffff\\"\> destination for each object \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> prep \</td\>\<td bgcolor=\\"#ffffcc\\"\> int \</td\>\<td bgcolor=\\"#ffffcc\\"\> intended preposition of objects \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> stance \</td\>\<td bgcolor=\\"#ffffff\\"\> int \</td\>\<td bgcolor=\\"#ffffff\\"\> intended stance of objects \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> v2 \</td\>\<td bgcolor=\\"#ffffcc\\"\> string \</td\>\<td bgcolor=\\"#ffffcc\\"\> second-person form of verb used \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> v3 \</td\>\<td bgcolor=\\"#ffffff\\"\> string \</td\>\<td bgcolor=\\"#ffffff\\"\> third-person form of verb used \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> drag \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> victim \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> who to drag \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> who to drag \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> eat \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> what \</td\>\<td bgcolor=\\"#ffffff\\"\> NRef \</td\>\<td bgcolor=\\"#ffffff\\"\> nref to attempt to eat \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> valid object to attempt to eat \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> drink \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> what \</td\>\<td bgcolor=\\"#ffffcc\\"\> NRef \</td\>\<td bgcolor=\\"#ffffcc\\"\> nref to attempt to drink \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid object to attempt to drink \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> wear \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> articles \</td\>\<td bgcolor=\\"#ffffff\\"\> obj * \</td\>\<td bgcolor=\\"#ffffff\\"\> objects to attempt to wear \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> valid objects to attempt to wear \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> wield \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> article \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> object to attempt to wield \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid object to attempt to wield \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> unwear \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> articles \</td\>\<td bgcolor=\\"#ffffff\\"\> obj * \</td\>\<td bgcolor=\\"#ffffff\\"\> objects to attempt to unwear \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> valid objects to attempt to unwear \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> unwield \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> article \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> object to attempt to unwield \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> valid object to attempt to unwield \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> allow \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> who \</td\>\<td bgcolor=\\"#ffffff\\"\> object \</td\>\<td bgcolor=\\"#ffffff\\"\> object being allowed \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> object being allowed \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> deny \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> who \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> object being denied \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> object being denied \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> demand-consent \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> target \</td\>\<td bgcolor=\\"#ffffff\\"\> object \</td\>\<td bgcolor=\\"#ffffff\\"\> object being asked \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> object being asked \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> message \</td\>\<td bgcolor=\\"#ffffcc\\"\> string \</td\>\<td bgcolor=\\"#ffffcc\\"\> what is displayed to target \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> action \</td\>\<td bgcolor=\\"#ffffff\\"\> string \</td\>\<td bgcolor=\\"#ffffff\\"\> action we want to perform \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> args \</td\>\<td bgcolor=\\"#ffffcc\\"\> mapping \</td\>\<td bgcolor=\\"#ffffcc\\"\> arguments of action we want to perform \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> enter \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> what \</td\>\<td bgcolor=\\"#ffffff\\"\> NRef \</td\>\<td bgcolor=\\"#ffffff\\"\> detail we're trying to enter \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> detail we're trying to enter \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> from \</td\>\<td bgcolor=\\"#ffffcc\\"\> detail we emerge from \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> into \</td\>\<td bgcolor=\\"#ffffff\\"\> detail we enter into \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> teleport \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> dest \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> where to go \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> where to go \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> approach \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> target \</td\>\<td bgcolor=\\"#ffffff\\"\> NRef \</td\>\<td bgcolor=\\"#ffffff\\"\> which detail to approach \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> which detail to approach \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> leave \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> offer \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> what \</td\>\<td bgcolor=\\"#ffffff\\"\> obj * \</td\>\<td bgcolor=\\"#ffffff\\"\> objects being offered \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> objects being offered \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> who \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> to whom they're offered \</td\>\<td bgcolor=\\"#ffffcc\\"\> to \</td\>\<td bgcolor=\\"#ffffcc\\"\> to whom they're offered \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> accept \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> what \</td\>\<td bgcolor=\\"#ffffff\\"\> obj * \</td\>\<td bgcolor=\\"#ffffff\\"\> objects being accepted \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> objects being accepted \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> who \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> from whom they're accepted \</td\>\<td bgcolor=\\"#ffffcc\\"\> from \</td\>\<td bgcolor=\\"#ffffcc\\"\> from whom they're accepted \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> revoke \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> who \</td\>\<td bgcolor=\\"#ffffff\\"\> object \</td\>\<td bgcolor=\\"#ffffff\\"\> object to whom revoked offer was made \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> object to whom revoked offer was made \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\> refuse \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> X \</td\>\<td bgcolor=\\"#ffffcc\\"\> who \</td\>\<td bgcolor=\\"#ffffcc\\"\> object \</td\>\<td bgcolor=\\"#ffffcc\\"\> whose offer to revoke \</td\>\<td bgcolor=\\"#ffffcc\\"\> * \</td\>\<td bgcolor=\\"#ffffcc\\"\> whose offer to revoke \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\> stance \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> X \</td\>\<td bgcolor=\\"#ffffff\\"\> target \</td\>\<td bgcolor=\\"#ffffff\\"\> NRef \</td\>\<td bgcolor=\\"#ffffff\\"\> prox target of stance (e.g. altar) \</td\>\<td bgcolor=\\"#ffffff\\"\> * \</td\>\<td bgcolor=\\"#ffffff\\"\> prox target of stance \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\> stance \</td\>\<td bgcolor=\\"#ffffcc\\"\> int \</td\>\<td bgcolor=\\"#ffffcc\\"\> stance to take, e.g. !STANCE_KNEEL \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\<td bgcolor=\\"#ffffcc\\"\>   \</td\>\</tr\>\<tr\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\> prep \</td\>\<td bgcolor=\\"#ffffff\\"\> int \</td\>\<td bgcolor=\\"#ffffff\\"\> preposition to use, e.g. !PREP_BEFORE \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\<td bgcolor=\\"#ffffff\\"\>   \</td\>\</tr\>\</tbody\>\</table\>\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h2\>Comments and questions\</h2\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<pre\>\> My milk container now emits it is closing once spawned... looks rather\\r\\n\> strange. I haven't used it in ages, but originally it didn't emit that\\r\\n\> message. Again, previously worked fine.\\r\\n\>  \> \\\\\&lt;Lazarus:rooms:asylum:props:milk/\\\\\&gt;\\r\\nThe start script does:\\r\\n0010  if this.details:\\\\\$detail:exit:door = 1 then\\r\\n           set this.details:\\\\\$detail:exit:closed to 1\\r\\nwhich closes the door... this was silent in the past but now has a\\r\\nmessage. I realize that's a backwards compatiblity breaker -- sorry\\r\\nabout that. You can fix it by changing the property to:\\r\\n0010  if this.details:\\\\\$detail:exit:door = 1 then\\r\\n           set this.details:\\\\\$detail:exit:closed:silently to 1\\r\\n                                                ^^^^^^^^\\r\\ni.e. adding 'silently' at the end.\</pre\>\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n-- Main.ParWinzell - 25 Feb 2003\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<sbr/\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<h3\>Emails\</h3\>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\<pre\>----- Original Message ----- \\r\\n\\r\\n From: \\"Par Winzell\\" \\\\\&lt;zell@skotos.net\\\\\&gt;\\r\\n To: \\\\\&lt;skotos-seven@skotos.net\\\\\&gt;\\r\\n Sent: Wednesday, February 19, 2003 1:26 PM\\r\\n Subject: Re: ![skotos-seven] Distant emits\\r\\n Scott, \\r\\n \> I guess I'm suggesting a signal for merry:witness:emit.\\r\\n \>   The only information it needs to catch is any text that\\r\\n \>   is sent to the room. Of course, since I have not seen\\r\\n \>   the underlying code, this might be impossible. But\\r\\n \>   wouldn't this be generally useful in lots of different\\r\\n \>   situations? Spying? Watching several room at once?\\r\\n \>   Logging of events and occurrences for later use?\\r\\n Firing an event for every single line of text is questionable, for performance reasons if nothing else. However, one -is- fired for each \\r\\ncommand that has been converted to Merry, and that's what the lighter examplified, if you looked closer. It defines three scripts:\\r\\n       \\\\\&lt;Core:Property property=\\"merry:witness-post:command\\"/\\\\\&gt;\\r\\n       \\\\\&lt;Core:Property property=\\"merry:witness-post:evoke\\"/\\\\\&gt;\\r\\n       \\\\\&lt;Core:property property=\\"merry:witness-post:take\\"/\\\\\&gt;\\r\\n The COMMAND event is triggered for every dynamic verb ('social') that is executed. That's everything a player types except the actions that \\r\\nhave not yet been converted to Merry.\\r\\n The EVOKE event is triggered whenever somebody does something that evokes something. This means you can automatically spy on everything that \\r\\nis actually said in a room -- every action that involves a free-form text string. An evoke.\\r\\n The TAKE is just there as an example of catching an action that has yet to be converted to Merry. It's possible that I could rig things so \\r\\nthat the COMMAND is sent in those cases, too, if you think that'd be useful.\\r\\nZell\</pre\>\\r\\n"
      </Core:Property>
      <Core:Property property="reads">29</Core:Property>
      <Core:Property property="refback">
         ([ "index_":1 ])
      </Core:Property>
      <Core:Property property="rev">24</Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052088, "-", "SYNC", 1144082363, "zwoc", "MIKI", 1144082405, "zwoc", "MIKI", 1144082476, "zwoc", "MIKI", 1144082521, "zwoc", "MIKI", 1144082605, "zwoc", "MIKI", 1144082626, "zwoc", "MIKI", 1144082666, "zwoc", "MIKI", 1144083148, "zwoc", "MIKI", 1144083567, "zwoc", "MIKI", 1144083645, "zwoc", "MIKI", 1144083700, "zwoc", "MIKI", 1144083723, "zwoc", "MIKI", 1144083749, "zwoc", "MIKI", 1144083988, "zwoc", "MIKI", 1144084038, "zwoc", "MIKI", 1144084111, "zwoc", "MIKI", 1144084127, "zwoc", "MIKI", 1144084139, "zwoc", "MIKI", 1144084835, "zwoc", "MIKI", 1144084877, "zwoc", "MIKI", 1144085049, "zwoc", "MIKI", 1144085260, "zwoc", "MIKI", 1144085372, "zwoc", "MIKI", 1144085462, "zwoc", "MIKI" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
