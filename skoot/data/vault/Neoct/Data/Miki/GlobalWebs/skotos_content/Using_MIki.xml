<object clone="/obj/properties" owner="TextIF">
  <Core:PropertyContainer>
    <Ur:UrObject/>
    <Core:PCProperties>
      <Core:Property property="diff:1">
         (\{ (\{ "-\<h1\>Using MIki.\</h1\>\\r\\n", "+\<h1\>Using MIki.\</h1\> ", "-\\r\\nMIki is simple. It's not TWiki. It doesn't contain any obscure rules or\\r\\nsyntaxes that make you want to throw up or kill it. It is based on a\\r\\nsimple WYSIWYG editing interface in which you can style a document and\\r\\ninclude lists, formating, etc. as well as raw \&lt;a\\r\\nhref=\\"http://google.com/\\" target=\\"_new\\"\&gt;HTML\&lt;/a\&gt; where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \&lt;a href=\\"http://google.com/\\" target=\\"_new\\"\&gt;HTML\&lt;/a\&gt; where needed.", "-\\r\\n", "+ ", "-\\r\\nThere are a few things to note, however:", "+ There are a few things to note, however:", "-\\r\\n\<ol\>\\r\\n  \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#95;\</span\>)\\r\\nmeans \\"page\\". You use underscore instead of space when you want to\\r\\ncreate a link to another page. If your page only has one word in it,\\r\\njust tack on an underscore after the word, like so: index_ \&amp;larr; \&lt;code\&gt;index\&amp;#95;\&lt;/code\&gt;", "+ \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#95;\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ \&amp;larr; \&lt;code\&gt;index\&amp;#95;\&lt;/code\&gt;", "-\\r\\n\</li\>\\r\\n  \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>)\\r\\nalso mean \\"page\\". The difference between putting something in brackets\\r\\nand using underscore is that you can include optional text instead of\\r\\nthe page text, like so: [index\|The Index Page!] \&amp;larr;\\r\\n\&lt;code\&gt;\&amp;#91;index\|The Index\\r\\nPage!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\>\\r\\nalways contain at least one underscore. Using square brackets, saying\\r\\n\\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>\\r\\n  \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&amp;larr; \&lt;code\&gt;\&amp;#91;index\|The Index Page!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).", "-\\r\\n  \</li\>\\r\\n\\r\\n\</ol\>\\r\\nThat be it.", "+   \</li\>  \</ol\>That be it.", "-\\r\\n", "+ ", "-\\r\\n", "+ \<span style=\\"font-weight: bold;\\"\>Tips and tricks to using MIki:\<span style=\\"font-weight: bold;\\"\>", "-\\r\\n", "+ \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\> \</ul\> --main.user_zwoc.", "+ \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"\>\</span\>\</span\> " \}), 1134071103, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:10">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a target=\\"_new\\" href=\\"http://google.com/\\"\>HTML\</a\> where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "=2", "- \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>_\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ ← \<code\>index_\</code\>", "+ \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>_\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ ← \<code\>!index_\</code\>", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>[index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>![index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "=4" \}), 1142285013, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:11">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a target=\\"_new\\" href=\\"http://google.com/\\"\>HTML\</a\> where needed.", "=3", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>![index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>![index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !!unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "=4" \}), 1142285062, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:12">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a target=\\"_new\\" href=\\"http://google.com/\\"\>HTML\</a\> where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "=3", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>![index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !!unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>![index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !!unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\\\\\{\</span\> and \<span style=\\"font-weight: bold;\\"\>\\\\\}\</span\>) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "=4" \}), 1142285129, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:2">
         (\{ (\{ "=9", "- \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\> \</ul\> --main.user_zwoc.", "+ \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\> \</ul\> --[main.user_zwoc\|Kalle].", "=1" \}), 1134071115, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:3">
         (\{ (\{ "=5", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&amp;larr; \&lt;code\&gt;\&amp;#91;index\|The Index Page!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&amp;larr; \&lt;code\&gt;\&amp;#91;index\|The Index Page!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved\&amp;#95;underscored\&amp;#95;entry.", "-   \</li\>  \</ol\>That be it.", "+   \</li\>   \</ol\>That be it.", "=4" \}), 1134072358, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:4">
         (\{ (\{ "=9", "- \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\> \</ul\> --[main.user_zwoc\|Kalle].", "+ \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server \&amp;rarr; skotos \&amp;rarr; \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?", "+   \</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "=1" \}), 1134075290, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:5">
         (\{ (\{ "=5", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&amp;larr; \&lt;code\&gt;\&amp;#91;index\|The Index Page!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved\&amp;#95;underscored\&amp;#95;entry.", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&amp;larr; \&lt;code\&gt;\&amp;#91;index\|The Index Page!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved\&amp;#95;underscored\&amp;#95;entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".", "-   \</li\>   \</ol\>That be it.", "+   \</li\>    \</ol\>That be it.", "=5" \}), 1135016964, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:6">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \&lt;a href=\\"http://google.com/\\" target=\\"_new\\"\&gt;HTML\&lt;/a\&gt; where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "=2", "- \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#95;\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ \&amp;larr; \&lt;code\&gt;index\&amp;#95;\&lt;/code\&gt;", "+ \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>\&#95;\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ \&larr; \<code\>index\&#95;\</code\>", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&amp;#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&amp;#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&amp;larr; \&lt;code\&gt;\&amp;#91;index\|The Index Page!\&amp;#93;\&lt;/code\&gt;\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&amp;#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved\&amp;#95;underscored\&amp;#95;entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&larr; \<code\>\&#91;index\|The Index Page!\&#93;\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved\&#95;underscored\&#95;entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "-   \</li\>    \</ol\>That be it.", "=2", "- \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server \&amp;rarr; skotos \&amp;rarr; \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?", "+ \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server \&rarr; skotos \&rarr; \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?\</li\>\<li\>You can include arguments in a reference to another page using the % sign. For dynamically generated content, this is an excellent way of making things even more dynamic. E.g.: ![control panel%what=listusers\|Control panel - list users]. This would link to the page \\"!control_panel\\" and set \\\\\$(what) to \\"listusers\\" on that page.\<sbr type=\\"_moz\\"/\>\</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "-   \</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "+ \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"/\>\</span\> ", "- \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"\>\</span\>\</span\> " \}), 1142284836, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:7">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a target=\\"_new\\" href=\\"http://google.com/\\"\>HTML\</a\> where needed.", "=2", "- \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>\&#95;\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ \&larr; \<code\>index\&#95;\</code\>", "+ \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>_\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ ← \<code\>index_\</code\>", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\&#91;\</span\> and \<span style=\\"font-weight: bold;\\"\>\&#93;\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] \&larr; \<code\>\&#91;index\|The Index Page!\&#93;\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index\&#95;\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved\&#95;underscored\&#95;entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>[\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>[index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "=2", "- \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server \&rarr; skotos \&rarr; \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?\</li\>\<li\>You can include arguments in a reference to another page using the % sign. For dynamically generated content, this is an excellent way of making things even more dynamic. E.g.: ![control panel%what=listusers\|Control panel - list users]. This would link to the page \\"!control_panel\\" and set \\\\\$(what) to \\"listusers\\" on that page.\<sbr type=\\"_moz\\"/\>\</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "+ \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server → skotos → \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?\</li\>\<li\>You can include arguments in a reference to another page using the % sign. For dynamically generated content, this is an excellent way of making things even more dynamic. E.g.: ![control panel%what=listusers\|Control panel - list users]. This would link to the page \\"!control_panel\\" and set \\\\\$(what) to \\"listusers\\" on that page. You can include any number of arguments, separated by ampersand. Like so: ![control panel%what=listusers\&where=outerbailey\|Control panel - list users in Outer Bailey].\<sbr type=\\"_moz\\"/\>\</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "- \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"/\>\</span\> ", "+ \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"/\> \</span\>" \}), 1142284892, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:8">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a target=\\"_new\\" href=\\"http://google.com/\\"\>HTML\</a\> where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "=6", "- \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server → skotos → \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?\</li\>\<li\>You can include arguments in a reference to another page using the % sign. For dynamically generated content, this is an excellent way of making things even more dynamic. E.g.: ![control panel%what=listusers\|Control panel - list users]. This would link to the page \\"!control_panel\\" and set \\\\\$(what) to \\"listusers\\" on that page. You can include any number of arguments, separated by ampersand. Like so: ![control panel%what=listusers\&where=outerbailey\|Control panel - list users in Outer Bailey].\<sbr type=\\"_moz\\"/\>\</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "+ \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server → skotos → \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?\</li\>\<li\>You can include arguments in a reference to another page using the % sign. For dynamically generated content, this is an excellent way of making things even more dynamic. E.g.: ![control panel%what=listusers\|Control panel - list users]. This would link to the page \\"!control_panel\\" and set \\\\\$(what) to \\"listusers\\" on that page. You can include any number of arguments, separated by ampersand. Like so: ![control panel%what=listusers\\\\\&where=outerbailey\|Control panel - list users in Outer Bailey].\<sbr type=\\"_moz\\"/\>\</li\>  \</ul\> --[main.user_zwoc\|Kalle].", "- \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"/\> \</span\>", "+ \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"\> \</span\>\</span\>" \}), 1142284917, "zwoc" \})
      </Core:Property>
      <Core:Property property="diff:9">
         (\{ (\{ "=1", "- MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.", "+ MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a target=\\"_new\\" href=\\"http://google.com/\\"\>HTML\</a\> where needed.", "=3", "- \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>[\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>[index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "+ \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>[index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\\\\\{ and \\\\\}) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.", "=4" \}), 1142284941, "zwoc" \})
      </Core:Property>
      <Core:Property property="invref">
         ([ "MIki_commands":1 ])
      </Core:Property>
      <Core:Property property="page">
         "\<h1\>Using MIki.\</h1\> \<sbr/\> MIki is simple. It's not TWiki. It doesn't contain any obscure rules or syntaxes that make you want to throw up or kill it. It is based on a simple WYSIWYG editing interface in which you can style a document and include lists, formating, etc. as well as raw \<a href=\\"http://google.com/\\" target=\\"_new\\"\>HTML\</a\> where needed.\<sbr/\> \<sbr/\> There are a few things to note, however:\<sbr/\> \<ol\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Underscore\</span\> (\<span style=\\"font-weight: bold;\\"\>_\</span\>) means \\"page\\". You use underscore instead of space when you want to create a link to another page. If your page only has one word in it, just tack on an underscore after the word, like so: index_ ← \<code\>!index_\</code\>\<sbr/\> \</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Square brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>![\</span\> and \<span style=\\"font-weight: bold;\\"\>]\</span\>) also mean \\"page\\". The difference between putting something in brackets and using underscore is that you can include optional text instead of the page text, like so: [index\|The Index Page!] ← \<code\>![index\|The Index Page!]\</code\>\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> always contain at least one underscore. Using square brackets, saying \\"index\\", the system will automatically change it to \\"index_\\".\</li\>   \<li\>\<span style=\\"font-weight: bold;\\"\>Pages\</span\> are \<span style=\\"font-weight: bold;\\"\>case-insensitive\</span\>, just like properties in a regular WOE object (because they are, indeed, properties in a regular WOE object).\</li\>\<li\>If you want to \<span style=\\"font-weight: bold;\\"\>prevent \</span\>underscored words (such as !function_name) from being resolved into pages, put an exclamation mark in front of it, like so: !!unresolved_underscored_entry.\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Dollar-signs\</span\> (\\\\\$) must be escaped. You escape them using the backslash (\\\\\\\\) sign. Thus, \\\\\$ is written as \\\\\\\\\\\\\$. If you don't, MIki will try to resolve the variable reference. For instance \\\\\$page, if unescaped, resolves to \\"\$page\\".\</li\>\<li\>\<span style=\\"font-weight: bold;\\"\>Curling brackets\</span\> (\<span style=\\"font-weight: bold;\\"\>\\\\\{\</span\> and \<span style=\\"font-weight: bold;\\"\>\\\\\}\</span\>) must be escaped, unless you want the SAM default. \<span style=\\"font-style: italic;\\"\>Users: this could be reversed, if you wish it, and is a simple matter of finding-and-replacing as a pre-stage to rendering a page. Thoughts on this?\</span\>\</li\>    \</ol\>That be it.\<sbr/\> \<sbr/\> \<span style=\\"font-weight: bold;\\"\>Tips and tricks to using MIki:\<span style=\\"font-weight: bold;\\"\>\<sbr/\> \</span\>\</span\> \<ul\>   \<li\>You know you can use inline SAM in MIki right? In fact, there are a few [MIki commands] already available, and writing more is as simple as making a Merry script somewhere that returns a value.\</li\>   \<li\>MIki is \<span style=\\"font-weight: bold;\\"\>WYSIWYG\</span\>. It is not like TWiki, in that you're supposed to work using the various tools. For convenience, it has a number of hotkeys (Ctrl+B = toggle bold, Ctrl+I = toggle italic, etc.) which work both by selecting a chunk of text and applying a style to it, or as you type toggling styles on/off. While MIki allows HTML inline, you're sort of missing the point if all you do is write HTML and ignore the tools available to you.\</li\>\<li\>The page in the \\"MIki location\\" at the top of the page (\<span style=\\"font-style: italic;\\"\>server → skotos → \</span\>\<span style=\\"font-weight: bold;\\"\>Using MIki\</span\>) can be clicked on. Clicking on it turns it into a field which lets you type in a page you wish to go to directly. Try it and type in e.g. \\"\<span style=\\"font-weight: bold;\\"\>index\</span\>\\" and see what happens. Neat, neh?\</li\>\<li\>You can include arguments in a reference to another page using the % sign. For dynamically generated content, this is an excellent way of making things even more dynamic. E.g.: ![control panel%what=listusers\|Control panel - list users]. This would link to the page \\"!control_panel\\" and set \\\\\$(what) to \\"listusers\\" on that page. You can include any number of arguments, separated by ampersand. Like so: ![control panel%what=listusers\\\\\&where=outerbailey\|Control panel - list users in Outer Bailey].\<sbr type=\\"_moz\\"/\>\</li\>  \</ul\> --[main.user_zwoc\|Kalle].\<sbr/\> \<span style=\\"font-weight: bold;\\"\>\<span style=\\"font-weight: bold;\\"\> \</span\>\</span\>"
      </Core:Property>
      <Core:Property property="reads">15</Core:Property>
      <Core:Property property="refback">
         ([ "index_":1 ])
      </Core:Property>
      <Core:Property property="rev">12</Core:Property>
      <Core:Property property="revisions">
         (\{ 1144052072, "-", "SYNC" \})
      </Core:Property>
    </Core:PCProperties>
    <Notes:Notes/>
  </Core:PropertyContainer>
</object>
