<object clone="/base/obj/thing" owner="kargh">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details/>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="merry:lib:addressmessage">
         X[M] /* D=Sets address array for new mail

     The following arguments are required:
       \$evoke: List of names to send message to in the form of name or name@theatre (raw-evoke)
*/

\{

  \$user_mbox = mail::getmbox(\$user: \$actor);

  if (\$user_mbox."msg:draft:addresses" \|\| \$user_mbox."msg:draft:body" \|\| \$user_mbox."msg:draft:subject") \{
    EmitTo(\$actor, "You already have a message in progress. See 'proof' to see the message or 'discard' to discard your current message.");
    return FALSE;
  \}

  /*
   *******************************************************
   * Lets see if any of our supplied addresses are valid *
   *******************************************************
  */

  mail::addresslist(\$evoke: \$(raw-evoke));

  if (sizeof(\$addresses_good) == 0) \{ EmitTo(\$actor, "I am unable to find any good addresses for the names you supplied."); return FALSE; \}

  mail::getmbox(\$user: \$actor)."msg:draft:addresses" = \$addresses_good;

  \$strgood = "";
  \$strbad = "";

  for (\$i = 0; \$i \< sizeof(\$addresses_good); \$i++) \{
    if (\$i == sizeof(\$addresses_good)-1) \{
      \$strgood += Describe((\$r1 = \$addresses_good[\$i])) + "@" + ((\$r2 = \$r1."theatre:id") ? capitalize(\$r2) : "Unknown");
      continue;
    \}
    if (\$i == sizeof(\$addresses_good)-2) \{
      \$strgood += Describe((\$r1 = \$addresses_good[\$i])) + "@" + ((\$r2 = \$r1."theatre:id") ? capitalize(\$r2) : "Unknown") + " and ";
      continue;
    \}
    \$strgood += Describe((\$r1 = \$addresses_good[\$i])) + "@" + ((\$r2 = \$r1."theatre:id") ? capitalize(\$r2) : "Unknown") + ", ";
    continue;
  \}

  for (\$i = 0; \$i \< sizeof(\$addresses_bad); \$i++) \{
    if (\$i == sizeof(\$addresses_bad)-1) \{
      \$strbad += \$addresses_bad[\$i];
      continue;
    \}
    if (\$i == sizeof(\$addresses_bad)-2) \{
      \$strbad += \$addresses_bad[\$i] + " and ";
      continue;
    \}
    \$strbad += \$addresses_bad[\$i] + ", ";
    continue;
  \}

EmitTo(\$actor, "You have addressed your message to " + \$strgood + (strlen(\$strbad) \> 0 ? ". The following names were not found: " + \$strbad + "." : "."));

return FALSE;

\}
      </Core:Property>
      <Core:Property property="merry:lib:displaymessage">
         X[M] /* D=Displays message */


\{

  mail::readmessage(\$msg_num: \$(dob:words)[0]);

  if (typeof(\$msg_map) == 6) \{

  \$output = pad_right("Message: " + \$(dob:words)[0], 19) + pad_right("Folder: " + capitalize(\$folder), 21)[..19] + pad_left("Flags: " + implode(\$msg_map["Flags"], ", "), 19) + "\\n";

  \$output += "---------------------------------------------------------\\n";

  \$output += pad_left("From: ", 9) + common::get_name(\$src: \$msg_map["Sender"]) + "@" + ((\$r1 = \$msg_map["Sender"]."theatre:id") ? \$r1 : "Unknown") + "\\n" + pad_left("To: ", 9);

  \$to = "";
  for (\$i = 0; \$i \< sizeof(\$msg_map["Recipients"]); \$i++) \{
     \$to += (sizeof(\$msg_map["Recipients"]) == 1 ? common::get_name(\$src: \$msg_map["Recipients"][\$i]) + "@" + ((\$r1 = \$msg_map["Recipients"][\$i]."theatre:id") ? \$r1 : "Unknown") : (\$i == sizeof(\$msg_map["Recipients"])-1 ? " and " : ", ") + common::get_name(\$src: \$msg_map["Recipients"][\$i]) + "@" + ((\$r1 = \$msg_map["Recipients"][\$i]."theatre:id") ? \$r1 : "Unknown"));

  \}

  \$output += \$to + "\\n" + pad_left("Date: ", 9) + ctime(\$msg_map["DateSent"]) + " (" + common::convsecs(\$secs: time() - \$msg_map["DateSent"], \$short: "true") + " )\\n" + pad_left("Subject: ", 9) + mail::xorcrypt(\$text: \$msg_map["Subject"], \$xor: Int(ur_name(\$actor)[16..])) + "\\n";

  \$output += "---------------------------------------------------------\\n\\n";

  \$output += common::wrap(\$string: mail::xorcrypt(\$text: \$msg_map["Body"], \$xor: Int(ur_name(\$actor)[16..])), \$maxlength: 60);

  \$output += "---------------------------------------------------------\\n";

  EmitTo(\$actor, PRE(\$output));

  \} else \{

    EmitTo(\$actor, "That is an invalid message to read.");

  \}

\}
      </Core:Property>
      <Core:Property property="merry:lib:docmd">
         X[M] /* Figure out how it is being used

     The following arguments are required:
       \$data: The db object
       \$cmd: The command
*/


if (!\$(dob:words) \&\& !\$evoke) \{ mailcmd::listmailfolder(); return FALSE; \}
if (sizeof(\$(dob:words)) == 1 \&\& !\$evoke) \{ mailcmd::displaymessage(); return FALSE; \}

\$cmd = \$(dob:words)[0];

if (\$cmd == "address" \&\& sizeof(\$(dob:words)) == 1 \&\& \$evoke) \{ mailcmd::addressmessage(); return FALSE; \}


EmitTo(\$actor, "Default confusion message.");


/*
if (!\$(dob:words) \&\& !\$evoke) \{ assist::dolistwhat(\$data: \$data, \$cmd: \$cmd, \$words: (\{ "new" \})); return FALSE; \}
if (!\$(dob:words) \&\& \$evoke) \{ chat::chat(\$channel: "tas", \$staff: TRUE); return FALSE; \}

\$command = \$(dob:words)[0];

if (\$command == "who") \{ chat::chat(\$channel: "tas", \$staff: TRUE); return FALSE; \}
*/
      </Core:Property>
      <Core:Property property="merry:lib:listmailfolder">
         X[M] /* D=Lists contents of supplied folder */


\{

  /*
   **************************
   * Get contents of folder *
   **************************
  */

  mail::listmailfolder();

  /*
   ***********************************
   * Create and emit table to player *
   ***********************************
  */

  mail::tablepresent();

\}
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1064080072, "kargh", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
