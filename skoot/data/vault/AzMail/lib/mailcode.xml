<object clone="/base/obj/thing" owner="kargh">
  <Base:Thing>
    <Ur:UrObject/>
    <Base:Bulk immobile="false" mass="1" density="1"/>
    <Base:Container flexible="false" transparent-container="false" public-container="false" tight="false" capacity="1" maxweight="1"/>
    <Base:Misc gender="neuter" volition="false" weapon="false" default_stance="none" combinable="false" discrete="false" by_weight="false" tight="false" scriptrunner="false">
      <Base:Edible value="false"/>
      <Base:Potable value="false"/>
      <Base:DrinkMessageFirst/>
      <Base:DrinkMessageThird/>
      <Base:Transparency value="false"/>
      <Base:Unsafe value="false"/>
      <Base:Safe value="false"/>
      <Base:ClothesExpected value="false"/>
      <Base:DieMessageFirst/>
      <Base:DieMessageThird/>
    </Base:Misc>
    <Base:Details>
      <Base:Detail id="default" prime="false" def="false" abstract="false" hidden="false" luminosity="0" targetable_in_dark="false" plural="false">
        <Base:Preposition close="false" against="false" under="false" on="false" inside="false" near="false" over="false" behind="false" before="false" beside="false"/>
        <Base:Names>
          <Base:SNames>
            <Base:SName sname="azmailer"/>
          </Base:SNames>
          <Base:PNames/>
        </Base:Names>
        <Base:Adjectives/>
        <Base:Descriptions>
          <Base:Description type="brief">AzMailer</Base:Description>
        </Base:Descriptions>
        <Base:Exit door="false" closed="false" locked="false" never_obvious="false" obvious_when_open="false" hidden_when_closed="false" separate="false" self-locking="false" deadbolt="false"/>
        <Base:Climbable/>
      </Base:Detail>
    </Base:Details>
    <Base:Clothing>
      <Base:SingleWear value="false"/>
    </Base:Clothing>
    <Base:Crafting see_level="0" do_level="0" time="0" attention="false" held="false">
      <Base:Ingredients/>
      <Base:Tools/>
      <Base:CraftVerbs/>
    </Base:Crafting>
    <Base:InitialContents/>
    <Base:InitialProperties/>
    <Core:Properties>
      <Core:Property property="#version#">"0.1"</Core:Property>
      <Core:Property property="merry:lib:addresslist">
         X[M] /* D=Creates the mapping of addresses

     The following arguments are required:
       \$evoke: The evoke

     The addresses are in the form of Name@Theatre or just Name
     If only name is provided, it assumes your theatre and attempts to locate body

     If name@theatre is not located, it adds name@theatre to \$addresses_bad

     Returned:
       \$addresses_good: The array of good addresses, obj:theatre
       \$addresses_bad: The array of bad addresses, string:theatre

*/

\{

  /*
   **************************************************************************************
   * Parse the evoke into two arrays, one of good addresses, the other of bad addresses *
   **************************************************************************************
  */

  \$addresses_good = (\{ \});
  \$addresses_bad = (\{ \});

  \$addresses = explode(\$evoke, "; ");

  for (\$i = 0; \$i \< sizeof(\$addresses); \$i++) \{
    \$count = 0;
    \$add_id = explode(\$addresses[\$i], "@");
    \$address_name = lower_case(\$add_id[0]);
    \$address_id = (sizeof(\$add_id) == 2 ? lower_case(\$add_id[1]) : ((\$r1 = \$actor."theatre:id") ? lower_case(\$r1) : "unknown"));

    if (\$address_id == "unknown") \{ \$addresses_bad += (\{ \$addresses[\$i] \}); continue; \}

    \$bodies_all = Get(udat::, "all-bodies:" + \$address_name);

    if (\$bodies_all == nil \|\| sizeof(\$bodies_all) == 0) \{ \$addresses_bad += (\{ \$addresses[\$i] \}); continue; \}

    for (\$x = 0; \$x \< sizeof(\$bodies_all); \$x++) \{
      if (\$bodies_all[\$x]."theatre:id" \&\& lower_case(\$bodies_all[\$x]."theatre:id") == \$address_id) \{
        \$addresses_good += (\{ \$bodies_all[\$x] \});
        \$count++;
        continue;
      \}
    \}

    if (\$count == 0) \$addresses_bad += (\{ \$addresses[\$i] \});

  \}

  return \$addresses_good, \$addresses_bad;

\}
      </Core:Property>
      <Core:Property property="merry:lib:creatembox">
         X[M] /* D=Creates a new mailbox for player if one does not exist

     The following arguments are requird:
       \$obj: The object that needs a mailbox
       \$loc: The location of the mbox folder
       \$mailcmd: The mail command

     mail::creatembox(\$obj: obj)
*/

\$mbox = \$loc + ":mbox." + ur_name(\$obj)[16..];

/*
 ************************************
 ** Create a new mailbox for object *
 ************************************
*/

\{

  if (!Obj(\$mbox)) \{
    \$template = \$loc + ":templates:mbox-template";
    \$newmbox = Duplicate(Obj(\$template));
    \$newmbox."base:objectname" = \$mbox;
    \$newmbox."#creationstamp#" = time();
    \$newmbox."#owner#" = \$obj;

    /*
     *******************************
     * Creating new folder setting *
     *******************************
    */

    \$newmbox."mbox:array:folders" = (\{ "new" \});
    \$newmbox."mbox:array:new" = (\{ 1 \});
    \$newmbox."mbox:mapping:unread" = ([ 1:"new" ]);
    \$newmbox."mbox:mail:current" = 1;
    \$newmbox.signature = "";

    /*
     ********************************
     * Creating new welcome message *
     ********************************
    */

    \$body = "Welcome to AzMail system v" + \$this."#version#" + "! To see the available help for this system, type: " + \$mailcmd + " help\\n\\nIf you find any bugs in this system, please file a \\'bug\\' report and it shall be reported to Aziel.\\n\\nAgain, welcome and enjoy!\\nAziel";

    \$subject = "Welcome to AzMail!";

    \$newmbox."msg.1" = ([ "Sender":\$this, "UDatName":"System", "Theatre":"System", "DateSent":time(), "DateRead":"", "Flags":(\{ \}), "Recipients":(\{ \$obj \}), "Body":mail::xorcrypt(\$text: \$body, \$xor: ur_name(\$obj)[16..]), "Subject":mail::xorcrypt(\$text: \$subject, \$xor: ur_name(\$obj)[16..]) ]);

  \}
\}
      </Core:Property>
      <Core:Property property="merry:lib:getmbox">
         X[M] /* D=Takes username and returns mailbox object.

     The following arguments are required:
       \$user: The user object
       \$loc: The mbox folder location

     The following arguments are optional:
       \$create: If TRUE, create mailbox if one does not exist
*/

\{
  \$mbox = \$loc + ":mbox." + ur_name(\$user)[16..];
  if (!Obj(\$mbox) \&\& !\$create) \{
    \$mbox = nil;
  \} else if (!Obj(\$mbox) \&\& \$create) \{
    mail::creatembox(\$obj: \$user, \$mailcmd: \$mailcmd);
    mail::getmbox(\$user: \$user, \$loc: \$loc, \$create: TRUE);
  \} else if (Obj(\$mbox)) \{
    \$mbox = Obj(\$mbox);
  \}
  return \$mbox;
\}
      </Core:Property>
      <Core:Property property="merry:lib:getmsglist">
         X[M] /* D=Gets the message list array

     The following arguments are required:
       \$user: The actor obj
       \$folder: The folder you want the list from
       \$list: All, if you want the folder list, unread if you just want the list of unread mails
       \$loc: The location of the mailbox folder
*/

\{

  \$mbox = \$loc + ":mbox." + ur_name(\$user)[16..];
  \$mbox_folder = "mbox:array:" + lower_case(\$folder);

  if (lower_case(\$list) == "all") \{
    \$msglist = ((\$r1 = Get(Obj(\$mbox), \$mbox_folder)) ? \$r1 : 0 );
  \} else \{
    \$msglist = Obj(\$mbox)."mbox:mapping:unread";
  \}

  return \$msglist;

\}
      </Core:Property>
      <Core:Property property="merry:lib:getmsgmap">
         X[M] /* D=Gets the message map

     The following arguments are required:
       \$loc: The location of the mbox folder
       \$user: The obj of the user
       \$msg_num: The message number to retrieve
*/

\{

  \$mbox = \$loc + ":mbox." + ur_name(\$user)[16..];
  \$msgnum = "msg." + \$msg_num;

  \$map = ((\$r1 = Get(Obj(\$mbox), \$msgnum)) ? \$r1 : 0);

  return \$map;

\}
      </Core:Property>
      <Core:Property property="merry:lib:listmailfolder">
         X[M] /* D=Lists contents of folder. Default 'new' folder if none are listed

     The following arguments are optional:
       \$mail_folder: The mail folder to list
*/

int *msg_list, i;
mixed *msg_list_arr;
mapping msg_map;

\{
  /*
   **************************************************************************************
   * Create the header and array for these messages. If none, note that folder is empty *
   **************************************************************************************
  */

  msg_list = mail::getmsglist(\$user: \$actor, \$folder: \$folder, \$list: "all");

  if (sizeof(msg_list) \> 0) \{
    msg_list = map_indices(arr_to_set(msg_list));
    msg_list_arr = (\{ (\{ "#", "F", "U", "Date", "Sender", "Subject" \}) \});

    for (i = 0; i \< sizeof(msg_list); i++) \{
      msg_map = mail::getmsgmap(\$user: \$actor, \$msg_num: msg_list[i]);
      msg_list_arr += (\{ (\{ Str(i + 1),
                         (sizeof(msg_map["Flags"]) \> 0 ? implode(msg_map["Flags"], "") : " "),
                         (member(msg_list[i], map_indices(mail::getmsglist(\$user: \$actor, \$list: "unread"))) == 0 ? " " : "*"),
                         short_time(msg_map["DateSent"]),
                         common::get_name(\$src: msg_map["Sender"]),
                         mail::xorcrypt(\$text: msg_map["Subject"], \$xor: ur_name(\$actor)[16..])
                      \}) \});
    \}

  \}

  \$output_header = "Date: " + ctime(time()) + "\\n";
  \$output_footer = "Message Count: " + Str(sizeof(msg_list)) + "\\n";
  \$output_body = msg_list_arr;

  return \$output_body, \$output_header, \$output_footer;

\}
      </Core:Property>
      <Core:Property property="merry:lib:readmessage">
         X[M] /* D=Gets message mapping

     The following arguments are required:
       \$loc: The folder for mailboxes
       \$msg_num: The message number

     Returns:
       \$msg_map: 0 if any error (bad number, no such message, etc) or message mapping

*/

\{

  /*
   *****************************************
   * Is the number supplied a valid number *
   *****************************************
  */

  if ((sscanf(\$msg_num, "%d%s", \$number, \$dummy) == 2 \&\& strlen(\$dummy)) \|\| sscanf(\$msg_num, "%d%s", \$number, \$dummy) == 0) \{
    \$msg_map = 0;
    return \$msg_map;
  \}

  /*
   ************************************************************
   * Is there a message that corresponds with supplied number *
   * \$msglist is the returned property                        *
   ************************************************************
  */

  if (Int(\$msg_num) == 0) \{ \$msg_map = 0; return \$msg_map; \}

  mail::getmsglist(\$list: "all");

  if (typeof(\$msglist) != 5) \{ \$msg_map = 0; return \$msg_map; \}

  if (Int(\$msg_num) \> sizeof(\$msglist)) \{ \$msg_map = 0; return \$msg_map; \}

  /*
   ***************************************************
   * If this message is unread, lets mark it as read *
   ***************************************************
  */

  \$mbox = \$loc + ":mbox." + ur_name(\$actor)[16..];
  if (member(Int(\$msg_num), map_indices(Obj(\$mbox)."mbox:mapping:unread"))) \{
    Obj(\$mbox)."mbox:mapping:unread"[Int(\$msg_num)] = nil;
  \}

  /*
   *************************************************************
   * Everything is good so get the message map for the message *
   * Return \$msg_map                                           *
   *************************************************************
  */

  \$msg_map = mail::getmsgmap();
  return \$msg_map;

\}
      </Core:Property>
      <Core:Property property="merry:lib:tablepresent">
         X[M] /* D=Sends a generic, preformatted table emit with header and footer

     The following arguments are required:
       \$output_body: The mail table body for this function

     The following arguments are optional:
       \$output_header: A header before the table
       \$output_footer: A footer after the table
*/

\{

  EmitTo(\$actor, PRE((\$output_header ? \$output_header : "") + ascii::table(\$content: \$output_body, \$ignoreseparator: "bottom left right") +
(\$output_footer ? \$output_footer : "")));

\}
      </Core:Property>
      <Core:Property property="merry:lib:xorcrypt">
         X[M] /* D=Encryption/Decryption Function

     The following arguments are required:
       \$text: The text to encrypt
       \$xor: The XOR value

     Copyright Erwin Harte 2003
*/

int i, sz, xor;

string text;
text = \$text;
xor  = Int(\$xor);
sz   = strlen(text);

for (i = 0; i \< sz; i++) \{
    text[i] = text[i] ^ xor;
\}

return text;
      </Core:Property>
      <Core:Property property="new property name">
         "New Property Value"
      </Core:Property>
      <Core:Property property="revisions">
         (\{ 1064068361, "kargh", "E", 1064068387, "kargh", "E", 1064068409, "kargh", "E", 1064068428, "kargh", "E", 1064068448, "kargh", "E", 1064068472, "kargh", "E", 1064070749, "kargh", "E", 1064071891, "kargh", "E", 1064072041, "kargh", "E", 1064072054, "kargh", "E", 1064072222, "kargh", "E", 1064072264, "kargh", "E", 1064075792, "kargh", "X", 1064079325, "kargh", "E" \})
      </Core:Property>
      <Core:Property property="skill:fatigue">1.0</Core:Property>
      <Core:Property property="skotos:playercapname">
         "AzMailer"
      </Core:Property>
    </Core:Properties>
    <Notes:Notes/>
  </Base:Thing>
</object>
